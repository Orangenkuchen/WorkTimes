{"version":3,"sources":["node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs","node_modules/@angular/router/fesm2022/router.mjs","src/app/entities/TimeSliceType.ts","src/app/StateDiagramm/StateDiagramm.ts","src/app/directives/LiveTimeSpan/live-time-span.directive.ts","src/app/entities/ActiveWorkDay.ts","src/app/services/time-repository/time-repository.service.ts","src/app/components/current-work/current-work.component.ts","src/app/components/current-work/current-work.component.html","node_modules/@angular/cdk/fesm2022/platform.mjs","node_modules/@angular/cdk/fesm2022/coercion.mjs","node_modules/@angular/cdk/fesm2022/layout.mjs","node_modules/@angular/cdk/fesm2022/a11y.mjs","node_modules/@angular/cdk/fesm2022/bidi.mjs","node_modules/@angular/material/fesm2022/core.mjs","node_modules/@angular/material/fesm2022/sort.mjs","node_modules/@angular/cdk/fesm2022/collections.mjs","node_modules/@angular/cdk/fesm2022/scrolling.mjs","node_modules/@angular/cdk/fesm2022/table.mjs","node_modules/@angular/material/fesm2022/table.mjs","src/app/Pipes/time-span.pipe.ts","src/app/Helper/DateHelper.ts","src/app/Helper/ExportHelper.ts","src/app/Helper/DownloadHelper.ts","src/app/components/history/history.component.ts","src/app/components/history/history.component.html","src/app/app.routes.ts","node_modules/@angular/service-worker/fesm2022/service-worker.mjs","node_modules/@angular/platform-browser/fesm2022/animations/async.mjs","src/app/app.config.ts","src/app/app.component.ts","src/app/app.component.html","src/main.ts"],"sourcesContent":["/**\n * @license Angular v17.3.12\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { ɵglobal, ɵRuntimeError, Injectable, InjectionToken, Inject, APP_ID, CSP_NONCE, PLATFORM_ID, Optional, ViewEncapsulation, RendererStyleFlags2, ɵinternalCreateApplication, ErrorHandler, ɵsetDocument, PLATFORM_INITIALIZER, createPlatformFactory, platformCore, ɵTESTABILITY_GETTER, ɵTESTABILITY, Testability, NgZone, TestabilityRegistry, ɵINJECTOR_SCOPE, RendererFactory2, ApplicationModule, NgModule, SkipSelf, ApplicationRef, ɵConsole, forwardRef, ɵXSS_SECURITY_URL, SecurityContext, ɵallowSanitizationBypassAndThrow, ɵunwrapSafeValue, ɵ_sanitizeUrl, ɵ_sanitizeHtml, ɵbypassSanitizationTrustHtml, ɵbypassSanitizationTrustStyle, ɵbypassSanitizationTrustScript, ɵbypassSanitizationTrustUrl, ɵbypassSanitizationTrustResourceUrl, ENVIRONMENT_INITIALIZER, inject, ɵformatRuntimeError, makeEnvironmentProviders, ɵwithDomHydration, Version, makeStateKey as makeStateKey$1, TransferState as TransferState$1 } from '@angular/core';\nimport { ɵDomAdapter, ɵsetRootDomAdapter, ɵparseCookieValue, ɵgetDOM, isPlatformServer, DOCUMENT, ɵPLATFORM_BROWSER_ID, XhrFactory, CommonModule } from '@angular/common';\nexport { ɵgetDOM } from '@angular/common';\nimport { ɵwithHttpTransferCache } from '@angular/common/http';\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nclass GenericBrowserDomAdapter extends ɵDomAdapter {\n  constructor() {\n    super(...arguments);\n    this.supportsDOMEvents = true;\n  }\n}\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nclass BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    ɵsetRootDomAdapter(new BrowserDomAdapter());\n  }\n  onAndCancel(el, evt, listener) {\n    el.addEventListener(evt, listener);\n    return () => {\n      el.removeEventListener(evt, listener);\n    };\n  }\n  dispatchEvent(el, evt) {\n    el.dispatchEvent(evt);\n  }\n  remove(node) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n  createElement(tagName, doc) {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createHtmlDocument() {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument() {\n    return document;\n  }\n  isElementNode(node) {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n  isShadowRoot(node) {\n    return node instanceof DocumentFragment;\n  }\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  getGlobalEventTarget(doc, target) {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getBaseHref(doc) {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement() {\n    baseElement = null;\n  }\n  getUserAgent() {\n    return window.navigator.userAgent;\n  }\n  getCookie(name) {\n    return ɵparseCookieValue(document.cookie, name);\n  }\n}\nlet baseElement = null;\nfunction getBaseElementHref() {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\nfunction relativePath(url) {\n  // The base URL doesn't really matter, we just need it so relative paths have something\n  // to resolve against. In the browser `HTMLBaseElement.href` is always absolute.\n  return new URL(url, document.baseURI).pathname;\n}\nclass BrowserGetTestability {\n  addToWindow(registry) {\n    ɵglobal['getAngularTestability'] = (elem, findInAncestors = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new ɵRuntimeError(5103 /* RuntimeErrorCode.TESTABILITY_NOT_FOUND */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Could not find testability for element.');\n      }\n      return testability;\n    };\n    ɵglobal['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n    ɵglobal['getAllAngularRootElements'] = () => registry.getAllRootElements();\n    const whenAllStable = callback => {\n      const testabilities = ɵglobal['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      const decrement = function () {\n        count--;\n        if (count == 0) {\n          callback();\n        }\n      };\n      testabilities.forEach(testability => {\n        testability.whenStable(decrement);\n      });\n    };\n    if (!ɵglobal['frameworkStabilizers']) {\n      ɵglobal['frameworkStabilizers'] = [];\n    }\n    ɵglobal['frameworkStabilizers'].push(whenAllStable);\n  }\n  findTestabilityInTree(registry, elem, findInAncestors) {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (ɵgetDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, elem.host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\nlet BrowserXhr = /*#__PURE__*/(() => {\n  class BrowserXhr {\n    build() {\n      return new XMLHttpRequest();\n    }\n    static {\n      this.ɵfac = function BrowserXhr_Factory(t) {\n        return new (t || BrowserXhr)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: BrowserXhr,\n        factory: BrowserXhr.ɵfac\n      });\n    }\n  }\n  return BrowserXhr;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * The injection token for plugins of the `EventManager` service.\n *\n * @publicApi\n */\nconst EVENT_MANAGER_PLUGINS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'EventManagerPlugins' : '');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\nlet EventManager = /*#__PURE__*/(() => {\n  class EventManager {\n    /**\n     * Initializes an instance of the event-manager service.\n     */\n    constructor(plugins, _zone) {\n      this._zone = _zone;\n      this._eventNameToPlugin = new Map();\n      plugins.forEach(plugin => {\n        plugin.manager = this;\n      });\n      this._plugins = plugins.slice().reverse();\n    }\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns  A callback function that can be used to remove the handler.\n     */\n    addEventListener(element, eventName, handler) {\n      const plugin = this._findPluginFor(eventName);\n      return plugin.addEventListener(element, eventName, handler);\n    }\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     */\n    getZone() {\n      return this._zone;\n    }\n    /** @internal */\n    _findPluginFor(eventName) {\n      let plugin = this._eventNameToPlugin.get(eventName);\n      if (plugin) {\n        return plugin;\n      }\n      const plugins = this._plugins;\n      plugin = plugins.find(plugin => plugin.supports(eventName));\n      if (!plugin) {\n        throw new ɵRuntimeError(5101 /* RuntimeErrorCode.NO_PLUGIN_FOR_EVENT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `No event manager plugin found for event ${eventName}`);\n      }\n      this._eventNameToPlugin.set(eventName, plugin);\n      return plugin;\n    }\n    static {\n      this.ɵfac = function EventManager_Factory(t) {\n        return new (t || EventManager)(i0.ɵɵinject(EVENT_MANAGER_PLUGINS), i0.ɵɵinject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: EventManager,\n        factory: EventManager.ɵfac\n      });\n    }\n  }\n  return EventManager;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The plugin definition for the `EventManager` class\n *\n * It can be used as a base class to create custom manager plugins, i.e. you can create your own\n * class that extends the `EventManagerPlugin` one.\n *\n * @publicApi\n */\nclass EventManagerPlugin {\n  // TODO: remove (has some usage in G3)\n  constructor(_doc) {\n    this._doc = _doc;\n  }\n}\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\nlet SharedStylesHost = /*#__PURE__*/(() => {\n  class SharedStylesHost {\n    constructor(doc, appId, nonce, platformId = {}) {\n      this.doc = doc;\n      this.appId = appId;\n      this.nonce = nonce;\n      this.platformId = platformId;\n      // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n      this.styleRef = new Map();\n      this.hostNodes = new Set();\n      this.styleNodesInDOM = this.collectServerRenderedStyles();\n      this.platformIsServer = isPlatformServer(platformId);\n      this.resetHostNodes();\n    }\n    addStyles(styles) {\n      for (const style of styles) {\n        const usageCount = this.changeUsageCount(style, 1);\n        if (usageCount === 1) {\n          this.onStyleAdded(style);\n        }\n      }\n    }\n    removeStyles(styles) {\n      for (const style of styles) {\n        const usageCount = this.changeUsageCount(style, -1);\n        if (usageCount <= 0) {\n          this.onStyleRemoved(style);\n        }\n      }\n    }\n    ngOnDestroy() {\n      const styleNodesInDOM = this.styleNodesInDOM;\n      if (styleNodesInDOM) {\n        styleNodesInDOM.forEach(node => node.remove());\n        styleNodesInDOM.clear();\n      }\n      for (const style of this.getAllStyles()) {\n        this.onStyleRemoved(style);\n      }\n      this.resetHostNodes();\n    }\n    addHost(hostNode) {\n      this.hostNodes.add(hostNode);\n      for (const style of this.getAllStyles()) {\n        this.addStyleToHost(hostNode, style);\n      }\n    }\n    removeHost(hostNode) {\n      this.hostNodes.delete(hostNode);\n    }\n    getAllStyles() {\n      return this.styleRef.keys();\n    }\n    onStyleAdded(style) {\n      for (const host of this.hostNodes) {\n        this.addStyleToHost(host, style);\n      }\n    }\n    onStyleRemoved(style) {\n      const styleRef = this.styleRef;\n      styleRef.get(style)?.elements?.forEach(node => node.remove());\n      styleRef.delete(style);\n    }\n    collectServerRenderedStyles() {\n      const styles = this.doc.head?.querySelectorAll(`style[${APP_ID_ATTRIBUTE_NAME}=\"${this.appId}\"]`);\n      if (styles?.length) {\n        const styleMap = new Map();\n        styles.forEach(style => {\n          if (style.textContent != null) {\n            styleMap.set(style.textContent, style);\n          }\n        });\n        return styleMap;\n      }\n      return null;\n    }\n    changeUsageCount(style, delta) {\n      const map = this.styleRef;\n      if (map.has(style)) {\n        const styleRefValue = map.get(style);\n        styleRefValue.usage += delta;\n        return styleRefValue.usage;\n      }\n      map.set(style, {\n        usage: delta,\n        elements: []\n      });\n      return delta;\n    }\n    getStyleElement(host, style) {\n      const styleNodesInDOM = this.styleNodesInDOM;\n      const styleEl = styleNodesInDOM?.get(style);\n      if (styleEl?.parentNode === host) {\n        // `styleNodesInDOM` cannot be undefined due to the above `styleNodesInDOM?.get`.\n        styleNodesInDOM.delete(style);\n        styleEl.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // This attribute is solely used for debugging purposes.\n          styleEl.setAttribute('ng-style-reused', '');\n        }\n        return styleEl;\n      } else {\n        const styleEl = this.doc.createElement('style');\n        if (this.nonce) {\n          styleEl.setAttribute('nonce', this.nonce);\n        }\n        styleEl.textContent = style;\n        if (this.platformIsServer) {\n          styleEl.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n        }\n        host.appendChild(styleEl);\n        return styleEl;\n      }\n    }\n    addStyleToHost(host, style) {\n      const styleEl = this.getStyleElement(host, style);\n      const styleRef = this.styleRef;\n      const styleElRef = styleRef.get(style)?.elements;\n      if (styleElRef) {\n        styleElRef.push(styleEl);\n      } else {\n        styleRef.set(style, {\n          elements: [styleEl],\n          usage: 1\n        });\n      }\n    }\n    resetHostNodes() {\n      const hostNodes = this.hostNodes;\n      hostNodes.clear();\n      // Re-add the head element back since this is the default host.\n      hostNodes.add(this.doc.head);\n    }\n    static {\n      this.ɵfac = function SharedStylesHost_Factory(t) {\n        return new (t || SharedStylesHost)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(APP_ID), i0.ɵɵinject(CSP_NONCE, 8), i0.ɵɵinject(PLATFORM_ID));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: SharedStylesHost,\n        factory: SharedStylesHost.ɵfac\n      });\n    }\n  }\n  return SharedStylesHost;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst NAMESPACE_URIS = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/MathML/'\n};\nconst COMPONENT_REGEX = /%COMP%/g;\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `true`.\n * @publicApi\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY = /*#__PURE__*/new InjectionToken(ngDevMode ? 'RemoveStylesOnCompDestroy' : '', {\n  providedIn: 'root',\n  factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT\n});\nfunction shimContentAttribute(componentShortId) {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nfunction shimHostAttribute(componentShortId) {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nfunction shimStylesContent(compId, styles) {\n  return styles.map(s => s.replace(COMPONENT_REGEX, compId));\n}\nlet DomRendererFactory2 = /*#__PURE__*/(() => {\n  class DomRendererFactory2 {\n    constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestroy, doc, platformId, ngZone, nonce = null) {\n      this.eventManager = eventManager;\n      this.sharedStylesHost = sharedStylesHost;\n      this.appId = appId;\n      this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;\n      this.doc = doc;\n      this.platformId = platformId;\n      this.ngZone = ngZone;\n      this.nonce = nonce;\n      this.rendererByCompId = new Map();\n      this.platformIsServer = isPlatformServer(platformId);\n      this.defaultRenderer = new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer);\n    }\n    createRenderer(element, type) {\n      if (!element || !type) {\n        return this.defaultRenderer;\n      }\n      if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {\n        // Domino does not support shadow DOM.\n        type = {\n          ...type,\n          encapsulation: ViewEncapsulation.Emulated\n        };\n      }\n      const renderer = this.getOrCreateRenderer(element, type);\n      // Renderers have different logic due to different encapsulation behaviours.\n      // Ex: for emulated, an attribute is added to the element.\n      if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n        renderer.applyToHost(element);\n      } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n        renderer.applyStyles();\n      }\n      return renderer;\n    }\n    getOrCreateRenderer(element, type) {\n      const rendererByCompId = this.rendererByCompId;\n      let renderer = rendererByCompId.get(type.id);\n      if (!renderer) {\n        const doc = this.doc;\n        const ngZone = this.ngZone;\n        const eventManager = this.eventManager;\n        const sharedStylesHost = this.sharedStylesHost;\n        const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n        const platformIsServer = this.platformIsServer;\n        switch (type.encapsulation) {\n          case ViewEncapsulation.Emulated:\n            renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer);\n            break;\n          case ViewEncapsulation.ShadowDom:\n            return new ShadowDomRenderer(eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce, platformIsServer);\n          default:\n            renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone, platformIsServer);\n            break;\n        }\n        rendererByCompId.set(type.id, renderer);\n      }\n      return renderer;\n    }\n    ngOnDestroy() {\n      this.rendererByCompId.clear();\n    }\n    static {\n      this.ɵfac = function DomRendererFactory2_Factory(t) {\n        return new (t || DomRendererFactory2)(i0.ɵɵinject(EventManager), i0.ɵɵinject(SharedStylesHost), i0.ɵɵinject(APP_ID), i0.ɵɵinject(REMOVE_STYLES_ON_COMPONENT_DESTROY), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(CSP_NONCE));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: DomRendererFactory2,\n        factory: DomRendererFactory2.ɵfac\n      });\n    }\n  }\n  return DomRendererFactory2;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass DefaultDomRenderer2 {\n  constructor(eventManager, doc, ngZone, platformIsServer) {\n    this.eventManager = eventManager;\n    this.doc = doc;\n    this.ngZone = ngZone;\n    this.platformIsServer = platformIsServer;\n    this.data = Object.create(null);\n    /**\n     * By default this renderer throws when encountering synthetic properties\n     * This can be disabled for example by the AsyncAnimationRendererFactory\n     */\n    this.throwOnSyntheticProps = true;\n    this.destroyNode = null;\n  }\n  destroy() {}\n  createElement(name, namespace) {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n    return this.doc.createElement(name);\n  }\n  createComment(value) {\n    return this.doc.createComment(value);\n  }\n  createText(value) {\n    return this.doc.createTextNode(value);\n  }\n  appendChild(parent, newChild) {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n  insertBefore(parent, newChild, refChild) {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n  removeChild(parent, oldChild) {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n  selectRootElement(selectorOrNode, preserveContent) {\n    let el = typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) : selectorOrNode;\n    if (!el) {\n      throw new ɵRuntimeError(-5104 /* RuntimeErrorCode.ROOT_NODE_NOT_FOUND */, (typeof ngDevMode === 'undefined' || ngDevMode) && `The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n  parentNode(node) {\n    return node.parentNode;\n  }\n  nextSibling(node) {\n    return node.nextSibling;\n  }\n  setAttribute(el, name, value, namespace) {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n  removeAttribute(el, name, namespace) {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n  addClass(el, name) {\n    el.classList.add(name);\n  }\n  removeClass(el, name) {\n    el.classList.remove(name);\n  }\n  setStyle(el, style, value, flags) {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n  removeStyle(el, style, flags) {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n  setProperty(el, name, value) {\n    if (el == null) {\n      return;\n    }\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n  setValue(node, value) {\n    node.nodeValue = value;\n  }\n  listen(target, event, callback) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      target = ɵgetDOM().getGlobalEventTarget(this.doc, target);\n      if (!target) {\n        throw new Error(`Unsupported event target ${target} for event ${event}`);\n      }\n    }\n    return this.eventManager.addEventListener(target, event, this.decoratePreventDefault(callback));\n  }\n  decoratePreventDefault(eventHandler) {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n    // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n    // unwrap the listener (see below).\n    return event => {\n      // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n      // debug_node can inspect the listener toString contents for the existence of this special\n      // token. Because the token is a string literal, it is ensured to not be modified by compiled\n      // code.\n      if (event === '__ngUnwrap__') {\n        return eventHandler;\n      }\n      // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n      const allowDefaultBehavior = this.platformIsServer ? this.ngZone.runGuarded(() => eventHandler(event)) : eventHandler(event);\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n      }\n      return undefined;\n    };\n  }\n}\nconst AT_CHARCODE = /*#__PURE__*/(() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name, nameKind) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new ɵRuntimeError(5105 /* RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY */, `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\nfunction isTemplateNode(node) {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  constructor(eventManager, sharedStylesHost, hostEl, component, doc, ngZone, nonce, platformIsServer) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.sharedStylesHost = sharedStylesHost;\n    this.hostEl = hostEl;\n    this.shadowRoot = hostEl.attachShadow({\n      mode: 'open'\n    });\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = shimStylesContent(component.id, component.styles);\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n      if (nonce) {\n        styleEl.setAttribute('nonce', nonce);\n      }\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n  nodeOrShadowRoot(node) {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n  appendChild(parent, newChild) {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  insertBefore(parent, newChild, refChild) {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  removeChild(parent, oldChild) {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  parentNode(node) {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n  destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n}\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, compId) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.sharedStylesHost = sharedStylesHost;\n    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;\n    this.styles = compId ? shimStylesContent(compId, component.styles) : component.styles;\n  }\n  applyStyles() {\n    this.sharedStylesHost.addStyles(this.styles);\n  }\n  destroy() {\n    if (!this.removeStylesOnCompDestroy) {\n      return;\n    }\n    this.sharedStylesHost.removeStyles(this.styles);\n  }\n}\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer) {\n    const compId = appId + '-' + component.id;\n    super(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, compId);\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n  applyToHost(element) {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n  createElement(parent, name) {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\nlet DomEventsPlugin = /*#__PURE__*/(() => {\n  class DomEventsPlugin extends EventManagerPlugin {\n    constructor(doc) {\n      super(doc);\n    }\n    // This plugin should come last in the list of plugins, because it accepts all\n    // events.\n    supports(eventName) {\n      return true;\n    }\n    addEventListener(element, eventName, handler) {\n      element.addEventListener(eventName, handler, false);\n      return () => this.removeEventListener(element, eventName, handler);\n    }\n    removeEventListener(target, eventName, callback) {\n      return target.removeEventListener(eventName, callback);\n    }\n    static {\n      this.ɵfac = function DomEventsPlugin_Factory(t) {\n        return new (t || DomEventsPlugin)(i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: DomEventsPlugin,\n        factory: DomEventsPlugin.ɵfac\n      });\n    }\n  }\n  return DomEventsPlugin;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS = {\n  'alt': event => event.altKey,\n  'control': event => event.ctrlKey,\n  'meta': event => event.metaKey,\n  'shift': event => event.shiftKey\n};\n/**\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nlet KeyEventsPlugin = /*#__PURE__*/(() => {\n  class KeyEventsPlugin extends EventManagerPlugin {\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param doc The document in which key events will be detected.\n     */\n    constructor(doc) {\n      super(doc);\n    }\n    /**\n     * Reports whether a named key event is supported.\n     * @param eventName The event name to query.\n     * @return True if the named key event is supported.\n     */\n    supports(eventName) {\n      return KeyEventsPlugin.parseEventName(eventName) != null;\n    }\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the key event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns The key event that was registered.\n     */\n    addEventListener(element, eventName, handler) {\n      const parsedEvent = KeyEventsPlugin.parseEventName(eventName);\n      const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n      return this.manager.getZone().runOutsideAngular(() => {\n        return ɵgetDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n      });\n    }\n    /**\n     * Parses the user provided full keyboard event definition and normalizes it for\n     * later internal use. It ensures the string is all lowercase, converts special\n     * characters to a standard spelling, and orders all the values consistently.\n     *\n     * @param eventName The name of the key event to listen for.\n     * @returns an object with the full, normalized string, and the dom event name\n     * or null in the case when the event doesn't match a keyboard event.\n     */\n    static parseEventName(eventName) {\n      const parts = eventName.toLowerCase().split('.');\n      const domEventName = parts.shift();\n      if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n        return null;\n      }\n      const key = KeyEventsPlugin._normalizeKey(parts.pop());\n      let fullKey = '';\n      let codeIX = parts.indexOf('code');\n      if (codeIX > -1) {\n        parts.splice(codeIX, 1);\n        fullKey = 'code.';\n      }\n      MODIFIER_KEYS.forEach(modifierName => {\n        const index = parts.indexOf(modifierName);\n        if (index > -1) {\n          parts.splice(index, 1);\n          fullKey += modifierName + '.';\n        }\n      });\n      fullKey += key;\n      if (parts.length != 0 || key.length === 0) {\n        // returning null instead of throwing to let another plugin process the event\n        return null;\n      }\n      // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n      //       The code must remain in the `result['domEventName']` form.\n      // return {domEventName, fullKey};\n      const result = {};\n      result['domEventName'] = domEventName;\n      result['fullKey'] = fullKey;\n      return result;\n    }\n    /**\n     * Determines whether the actual keys pressed match the configured key code string.\n     * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n     * event is attached to the DOM during the `addEventListener` call. This is unseen\n     * by the end user and is normalized for internal consistency and parsing.\n     *\n     * @param event The keyboard event.\n     * @param fullKeyCode The normalized user defined expected key event string\n     * @returns boolean.\n     */\n    static matchEventFullKeyCode(event, fullKeyCode) {\n      let keycode = _keyMap[event.key] || event.key;\n      let key = '';\n      if (fullKeyCode.indexOf('code.') > -1) {\n        keycode = event.code;\n        key = 'code.';\n      }\n      // the keycode could be unidentified so we have to check here\n      if (keycode == null || !keycode) return false;\n      keycode = keycode.toLowerCase();\n      if (keycode === ' ') {\n        keycode = 'space'; // for readability\n      } else if (keycode === '.') {\n        keycode = 'dot'; // because '.' is used as a separator in event names\n      }\n      MODIFIER_KEYS.forEach(modifierName => {\n        if (modifierName !== keycode) {\n          const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n          if (modifierGetter(event)) {\n            key += modifierName + '.';\n          }\n        }\n      });\n      key += keycode;\n      return key === fullKeyCode;\n    }\n    /**\n     * Configures a handler callback for a key event.\n     * @param fullKey The event name that combines all simultaneous keystrokes.\n     * @param handler The function that responds to the key event.\n     * @param zone The zone in which the event occurred.\n     * @returns A callback function.\n     */\n    static eventCallback(fullKey, handler, zone) {\n      return event => {\n        if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n          zone.runGuarded(() => handler(event));\n        }\n      };\n    }\n    /** @internal */\n    static _normalizeKey(keyName) {\n      return keyName === 'esc' ? 'escape' : keyName;\n    }\n    static {\n      this.ɵfac = function KeyEventsPlugin_Factory(t) {\n        return new (t || KeyEventsPlugin)(i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: KeyEventsPlugin,\n        factory: KeyEventsPlugin.ɵfac\n      });\n    }\n  }\n  return KeyEventsPlugin;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nfunction bootstrapApplication(rootComponent, options) {\n  return ɵinternalCreateApplication({\n    rootComponent,\n    ...createProvidersConfig(options)\n  });\n}\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nfunction createApplication(options) {\n  return ɵinternalCreateApplication(createProvidersConfig(options));\n}\nfunction createProvidersConfig(options) {\n  return {\n    appProviders: [...BROWSER_MODULE_PROVIDERS, ...(options?.providers ?? [])],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n  };\n}\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nfunction provideProtractorTestingSupport() {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\nfunction initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\nfunction errorHandler() {\n  return new ErrorHandler();\n}\nfunction _document() {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{\n  provide: PLATFORM_ID,\n  useValue: ɵPLATFORM_BROWSER_ID\n}, {\n  provide: PLATFORM_INITIALIZER,\n  useValue: initDomAdapter,\n  multi: true\n}, {\n  provide: DOCUMENT,\n  useFactory: _document,\n  deps: []\n}];\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nconst platformBrowser = /*#__PURE__*/createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'BrowserModule Providers Marker' : '');\nconst TESTABILITY_PROVIDERS = [{\n  provide: ɵTESTABILITY_GETTER,\n  useClass: BrowserGetTestability,\n  deps: []\n}, {\n  provide: ɵTESTABILITY,\n  useClass: Testability,\n  deps: [NgZone, TestabilityRegistry, ɵTESTABILITY_GETTER]\n}, {\n  provide: Testability,\n  // Also provide as `Testability` for backwards-compatibility.\n  useClass: Testability,\n  deps: [NgZone, TestabilityRegistry, ɵTESTABILITY_GETTER]\n}];\nconst BROWSER_MODULE_PROVIDERS = [{\n  provide: ɵINJECTOR_SCOPE,\n  useValue: 'root'\n}, {\n  provide: ErrorHandler,\n  useFactory: errorHandler,\n  deps: []\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: DomEventsPlugin,\n  multi: true,\n  deps: [DOCUMENT, NgZone, PLATFORM_ID]\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: KeyEventsPlugin,\n  multi: true,\n  deps: [DOCUMENT]\n}, DomRendererFactory2, SharedStylesHost, EventManager, {\n  provide: RendererFactory2,\n  useExisting: DomRendererFactory2\n}, {\n  provide: XhrFactory,\n  useClass: BrowserXhr,\n  deps: []\n}, typeof ngDevMode === 'undefined' || ngDevMode ? {\n  provide: BROWSER_MODULE_PROVIDERS_MARKER,\n  useValue: true\n} : []];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nlet BrowserModule = /*#__PURE__*/(() => {\n  class BrowserModule {\n    constructor(providersAlreadyPresent) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && providersAlreadyPresent) {\n        throw new ɵRuntimeError(5100 /* RuntimeErrorCode.BROWSER_MODULE_ALREADY_LOADED */, `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` + `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n      }\n    }\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     *\n     * @deprecated Use {@link APP_ID} instead to set the application ID.\n     */\n    static withServerTransition(params) {\n      return {\n        ngModule: BrowserModule,\n        providers: [{\n          provide: APP_ID,\n          useValue: params.appId\n        }]\n      };\n    }\n    static {\n      this.ɵfac = function BrowserModule_Factory(t) {\n        return new (t || BrowserModule)(i0.ɵɵinject(BROWSER_MODULE_PROVIDERS_MARKER, 12));\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: BrowserModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n        imports: [CommonModule, ApplicationModule]\n      });\n    }\n  }\n  return BrowserModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\nlet Meta = /*#__PURE__*/(() => {\n  class Meta {\n    constructor(_doc) {\n      this._doc = _doc;\n      this._dom = ɵgetDOM();\n    }\n    /**\n     * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n     * values in the provided tag definition, and verifies that all other attribute values are equal.\n     * If an existing element is found, it is returned and is not modified in any way.\n     * @param tag The definition of a `<meta>` element to match or create.\n     * @param forceCreation True to create a new element without checking whether one already exists.\n     * @returns The existing element with the same attributes and values if found,\n     * the new element if no match is found, or `null` if the tag parameter is not defined.\n     */\n    addTag(tag, forceCreation = false) {\n      if (!tag) return null;\n      return this._getOrCreateElement(tag, forceCreation);\n    }\n    /**\n     * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n     * values in the provided tag definition, and verifies that all other attribute values are equal.\n     * @param tags An array of tag definitions to match or create.\n     * @param forceCreation True to create new elements without checking whether they already exist.\n     * @returns The matching elements if found, or the new elements.\n     */\n    addTags(tags, forceCreation = false) {\n      if (!tags) return [];\n      return tags.reduce((result, tag) => {\n        if (tag) {\n          result.push(this._getOrCreateElement(tag, forceCreation));\n        }\n        return result;\n      }, []);\n    }\n    /**\n     * Retrieves a `<meta>` tag element in the current HTML document.\n     * @param attrSelector The tag attribute and value to match against, in the format\n     * `\"tag_attribute='value string'\"`.\n     * @returns The matching element, if any.\n     */\n    getTag(attrSelector) {\n      if (!attrSelector) return null;\n      return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n    }\n    /**\n     * Retrieves a set of `<meta>` tag elements in the current HTML document.\n     * @param attrSelector The tag attribute and value to match against, in the format\n     * `\"tag_attribute='value string'\"`.\n     * @returns The matching elements, if any.\n     */\n    getTags(attrSelector) {\n      if (!attrSelector) return [];\n      const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n      return list ? [].slice.call(list) : [];\n    }\n    /**\n     * Modifies an existing `<meta>` tag element in the current HTML document.\n     * @param tag The tag description with which to replace the existing tag content.\n     * @param selector A tag attribute and value to match against, to identify\n     * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n     * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n     * replacement tag.\n     * @return The modified element.\n     */\n    updateTag(tag, selector) {\n      if (!tag) return null;\n      selector = selector || this._parseSelector(tag);\n      const meta = this.getTag(selector);\n      if (meta) {\n        return this._setMetaElementAttributes(tag, meta);\n      }\n      return this._getOrCreateElement(tag, true);\n    }\n    /**\n     * Removes an existing `<meta>` tag element from the current HTML document.\n     * @param attrSelector A tag attribute and value to match against, to identify\n     * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n     */\n    removeTag(attrSelector) {\n      this.removeTagElement(this.getTag(attrSelector));\n    }\n    /**\n     * Removes an existing `<meta>` tag element from the current HTML document.\n     * @param meta The tag definition to match against to identify an existing tag.\n     */\n    removeTagElement(meta) {\n      if (meta) {\n        this._dom.remove(meta);\n      }\n    }\n    _getOrCreateElement(meta, forceCreation = false) {\n      if (!forceCreation) {\n        const selector = this._parseSelector(meta);\n        // It's allowed to have multiple elements with the same name so it's not enough to\n        // just check that element with the same name already present on the page. We also need to\n        // check if element has tag attributes\n        const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n        if (elem !== undefined) return elem;\n      }\n      const element = this._dom.createElement('meta');\n      this._setMetaElementAttributes(meta, element);\n      const head = this._doc.getElementsByTagName('head')[0];\n      head.appendChild(element);\n      return element;\n    }\n    _setMetaElementAttributes(tag, el) {\n      Object.keys(tag).forEach(prop => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n      return el;\n    }\n    _parseSelector(tag) {\n      const attr = tag.name ? 'name' : 'property';\n      return `${attr}=\"${tag[attr]}\"`;\n    }\n    _containsAttributes(tag, elem) {\n      return Object.keys(tag).every(key => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n    }\n    _getMetaKeyMap(prop) {\n      return META_KEYS_MAP[prop] || prop;\n    }\n    static {\n      this.ɵfac = function Meta_Factory(t) {\n        return new (t || Meta)(i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: Meta,\n        factory: Meta.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return Meta;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP = {\n  httpEquiv: 'http-equiv'\n};\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\nlet Title = /*#__PURE__*/(() => {\n  class Title {\n    constructor(_doc) {\n      this._doc = _doc;\n    }\n    /**\n     * Get the title of the current HTML document.\n     */\n    getTitle() {\n      return this._doc.title;\n    }\n    /**\n     * Set the title of the current HTML document.\n     * @param newTitle\n     */\n    setTitle(newTitle) {\n      this._doc.title = newTitle || '';\n    }\n    static {\n      this.ɵfac = function Title_Factory(t) {\n        return new (t || Title)(i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: Title,\n        factory: Title.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return Title;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nfunction exportNgVar(name, value) {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = ɵglobal['ng'] = ɵglobal['ng'] || {};\n    ng[name] = value;\n  }\n}\nclass ChangeDetectionPerfRecord {\n  constructor(msPerTick, numTicks) {\n    this.msPerTick = msPerTick;\n    this.numTicks = numTicks;\n  }\n}\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nclass AngularProfiler {\n  constructor(ref) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config) {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    if (record && 'profile' in console && typeof console.profile === 'function') {\n      console.profile(profileName);\n    }\n    const start = performance.now();\n    let numTicks = 0;\n    while (numTicks < 5 || performance.now() - start < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performance.now();\n    if (record && 'profileEnd' in console && typeof console.profileEnd === 'function') {\n      console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    console.log(`ran ${numTicks} change detection cycles`);\n    console.log(`${msPerTick.toFixed(2)} ms per check`);\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\nconst PROFILER_GLOBAL_NAME = 'profiler';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nfunction enableDebugTools(ref) {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nfunction disableDebugTools() {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nclass By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all() {\n    return () => true;\n  }\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector) {\n    return debugElement => {\n      return debugElement.nativeElement != null ? elementMatches(debugElement.nativeElement, selector) : false;\n    };\n  }\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type) {\n    return debugNode => debugNode.providerTokens.indexOf(type) !== -1;\n  }\n}\nfunction elementMatches(n, selector) {\n  if (ɵgetDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n  return false;\n}\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see {@link HammerGestureConfig}\n *\n * @ngModule HammerModule\n * @publicApi\n */\nconst HAMMER_GESTURE_CONFIG = /*#__PURE__*/new InjectionToken('HammerGestureConfig');\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nconst HAMMER_LOADER = /*#__PURE__*/new InjectionToken('HammerLoader');\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\nlet HammerGestureConfig = /*#__PURE__*/(() => {\n  class HammerGestureConfig {\n    constructor() {\n      /**\n       * A set of supported event names for gestures to be used in Angular.\n       * Angular supports all built-in recognizers, as listed in\n       * [HammerJS documentation](https://hammerjs.github.io/).\n       */\n      this.events = [];\n      /**\n       * Maps gesture event names to a set of configuration options\n       * that specify overrides to the default values for specific properties.\n       *\n       * The key is a supported event name to be configured,\n       * and the options object contains a set of properties, with override values\n       * to be applied to the named recognizer event.\n       * For example, to disable recognition of the rotate event, specify\n       *  `{\"rotate\": {\"enable\": false}}`.\n       *\n       * Properties that are not present take the HammerJS default values.\n       * For information about which properties are supported for which events,\n       * and their allowed and default values, see\n       * [HammerJS documentation](https://hammerjs.github.io/).\n       *\n       */\n      this.overrides = {};\n    }\n    /**\n     * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n     * and attaches it to a given HTML element.\n     * @param element The element that will recognize gestures.\n     * @returns A HammerJS event-manager object.\n     */\n    buildHammer(element) {\n      const mc = new Hammer(element, this.options);\n      mc.get('pinch').set({\n        enable: true\n      });\n      mc.get('rotate').set({\n        enable: true\n      });\n      for (const eventName in this.overrides) {\n        mc.get(eventName).set(this.overrides[eventName]);\n      }\n      return mc;\n    }\n    static {\n      this.ɵfac = function HammerGestureConfig_Factory(t) {\n        return new (t || HammerGestureConfig)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: HammerGestureConfig,\n        factory: HammerGestureConfig.ɵfac\n      });\n    }\n  }\n  return HammerGestureConfig;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\nlet HammerGesturesPlugin = /*#__PURE__*/(() => {\n  class HammerGesturesPlugin extends EventManagerPlugin {\n    constructor(doc, _config, console, loader) {\n      super(doc);\n      this._config = _config;\n      this.console = console;\n      this.loader = loader;\n      this._loaderPromise = null;\n    }\n    supports(eventName) {\n      if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n        return false;\n      }\n      if (!window.Hammer && !this.loader) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          this.console.warn(`The \"${eventName}\" event cannot be bound because Hammer.JS is not ` + `loaded and no custom loader has been specified.`);\n        }\n        return false;\n      }\n      return true;\n    }\n    addEventListener(element, eventName, handler) {\n      const zone = this.manager.getZone();\n      eventName = eventName.toLowerCase();\n      // If Hammer is not present but a loader is specified, we defer adding the event listener\n      // until Hammer is loaded.\n      if (!window.Hammer && this.loader) {\n        this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader());\n        // This `addEventListener` method returns a function to remove the added listener.\n        // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n        // than remove anything.\n        let cancelRegistration = false;\n        let deregister = () => {\n          cancelRegistration = true;\n        };\n        zone.runOutsideAngular(() => this._loaderPromise.then(() => {\n          // If Hammer isn't actually loaded when the custom loader resolves, give up.\n          if (!window.Hammer) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n              this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n            }\n            deregister = () => {};\n            return;\n          }\n          if (!cancelRegistration) {\n            // Now that Hammer is loaded and the listener is being loaded for real,\n            // the deregistration function changes from canceling registration to\n            // removal.\n            deregister = this.addEventListener(element, eventName, handler);\n          }\n        }).catch(() => {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            this.console.warn(`The \"${eventName}\" event cannot be bound because the custom ` + `Hammer.JS loader failed.`);\n          }\n          deregister = () => {};\n        }));\n        // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n        // can change the behavior of `deregister` once the listener is added. Using a closure in\n        // this way allows us to avoid any additional data structures to track listener removal.\n        return () => {\n          deregister();\n        };\n      }\n      return zone.runOutsideAngular(() => {\n        // Creating the manager bind events, must be done outside of angular\n        const mc = this._config.buildHammer(element);\n        const callback = function (eventObj) {\n          zone.runGuarded(function () {\n            handler(eventObj);\n          });\n        };\n        mc.on(eventName, callback);\n        return () => {\n          mc.off(eventName, callback);\n          // destroy mc to prevent memory leak\n          if (typeof mc.destroy === 'function') {\n            mc.destroy();\n          }\n        };\n      });\n    }\n    isCustomEvent(eventName) {\n      return this._config.events.indexOf(eventName) > -1;\n    }\n    static {\n      this.ɵfac = function HammerGesturesPlugin_Factory(t) {\n        return new (t || HammerGesturesPlugin)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(HAMMER_GESTURE_CONFIG), i0.ɵɵinject(i0.ɵConsole), i0.ɵɵinject(HAMMER_LOADER, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: HammerGesturesPlugin,\n        factory: HammerGesturesPlugin.ɵfac\n      });\n    }\n  }\n  return HammerGesturesPlugin;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's `EventManager`.\n *\n * @publicApi\n */\nlet HammerModule = /*#__PURE__*/(() => {\n  class HammerModule {\n    static {\n      this.ɵfac = function HammerModule_Factory(t) {\n        return new (t || HammerModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: HammerModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [{\n          provide: EVENT_MANAGER_PLUGINS,\n          useClass: HammerGesturesPlugin,\n          multi: true,\n          deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, ɵConsole, [new Optional(), HAMMER_LOADER]]\n        }, {\n          provide: HAMMER_GESTURE_CONFIG,\n          useClass: HammerGestureConfig,\n          deps: []\n        }]\n      });\n    }\n  }\n  return HammerModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\nlet DomSanitizer = /*#__PURE__*/(() => {\n  class DomSanitizer {\n    static {\n      this.ɵfac = function DomSanitizer_Factory(t) {\n        return new (t || DomSanitizer)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: DomSanitizer,\n        factory: function DomSanitizer_Factory(t) {\n          let r = null;\n          if (t) {\n            r = new (t || DomSanitizer)();\n          } else {\n            r = i0.ɵɵinject(DomSanitizerImpl);\n          }\n          return r;\n        },\n        providedIn: 'root'\n      });\n    }\n  }\n  return DomSanitizer;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DomSanitizerImpl = /*#__PURE__*/(() => {\n  class DomSanitizerImpl extends DomSanitizer {\n    constructor(_doc) {\n      super();\n      this._doc = _doc;\n    }\n    sanitize(ctx, value) {\n      if (value == null) return null;\n      switch (ctx) {\n        case SecurityContext.NONE:\n          return value;\n        case SecurityContext.HTML:\n          if (ɵallowSanitizationBypassAndThrow(value, \"HTML\" /* BypassType.Html */)) {\n            return ɵunwrapSafeValue(value);\n          }\n          return ɵ_sanitizeHtml(this._doc, String(value)).toString();\n        case SecurityContext.STYLE:\n          if (ɵallowSanitizationBypassAndThrow(value, \"Style\" /* BypassType.Style */)) {\n            return ɵunwrapSafeValue(value);\n          }\n          return value;\n        case SecurityContext.SCRIPT:\n          if (ɵallowSanitizationBypassAndThrow(value, \"Script\" /* BypassType.Script */)) {\n            return ɵunwrapSafeValue(value);\n          }\n          throw new ɵRuntimeError(5200 /* RuntimeErrorCode.SANITIZATION_UNSAFE_SCRIPT */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'unsafe value used in a script context');\n        case SecurityContext.URL:\n          if (ɵallowSanitizationBypassAndThrow(value, \"URL\" /* BypassType.Url */)) {\n            return ɵunwrapSafeValue(value);\n          }\n          return ɵ_sanitizeUrl(String(value));\n        case SecurityContext.RESOURCE_URL:\n          if (ɵallowSanitizationBypassAndThrow(value, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n            return ɵunwrapSafeValue(value);\n          }\n          throw new ɵRuntimeError(5201 /* RuntimeErrorCode.SANITIZATION_UNSAFE_RESOURCE_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `unsafe value used in a resource URL context (see ${ɵXSS_SECURITY_URL})`);\n        default:\n          throw new ɵRuntimeError(5202 /* RuntimeErrorCode.SANITIZATION_UNEXPECTED_CTX */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Unexpected SecurityContext ${ctx} (see ${ɵXSS_SECURITY_URL})`);\n      }\n    }\n    bypassSecurityTrustHtml(value) {\n      return ɵbypassSanitizationTrustHtml(value);\n    }\n    bypassSecurityTrustStyle(value) {\n      return ɵbypassSanitizationTrustStyle(value);\n    }\n    bypassSecurityTrustScript(value) {\n      return ɵbypassSanitizationTrustScript(value);\n    }\n    bypassSecurityTrustUrl(value) {\n      return ɵbypassSanitizationTrustUrl(value);\n    }\n    bypassSecurityTrustResourceUrl(value) {\n      return ɵbypassSanitizationTrustResourceUrl(value);\n    }\n    static {\n      this.ɵfac = function DomSanitizerImpl_Factory(t) {\n        return new (t || DomSanitizerImpl)(i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: DomSanitizerImpl,\n        factory: DomSanitizerImpl.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DomSanitizerImpl;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * The list of features as an enum to uniquely type each `HydrationFeature`.\n * @see {@link HydrationFeature}\n *\n * @publicApi\n */\nvar HydrationFeatureKind = /*#__PURE__*/function (HydrationFeatureKind) {\n  HydrationFeatureKind[HydrationFeatureKind[\"NoHttpTransferCache\"] = 0] = \"NoHttpTransferCache\";\n  HydrationFeatureKind[HydrationFeatureKind[\"HttpTransferCacheOptions\"] = 1] = \"HttpTransferCacheOptions\";\n  return HydrationFeatureKind;\n}(HydrationFeatureKind || {});\n/**\n * Helper function to create an object that represents a Hydration feature.\n */\nfunction hydrationFeature(ɵkind, ɵproviders = [], ɵoptions = {}) {\n  return {\n    ɵkind,\n    ɵproviders\n  };\n}\n/**\n * Disables HTTP transfer cache. Effectively causes HTTP requests to be performed twice: once on the\n * server and other one on the browser.\n *\n * @publicApi\n */\nfunction withNoHttpTransferCache() {\n  // This feature has no providers and acts as a flag that turns off\n  // HTTP transfer cache (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoHttpTransferCache);\n}\n/**\n * The function accepts a an object, which allows to configure cache parameters,\n * such as which headers should be included (no headers are included by default),\n * wether POST requests should be cached or a callback function to determine if a\n * particular request should be cached.\n *\n * @publicApi\n */\nfunction withHttpTransferCacheOptions(options) {\n  // This feature has no providers and acts as a flag to pass options to the HTTP transfer cache.\n  return hydrationFeature(HydrationFeatureKind.HttpTransferCacheOptions, ɵwithHttpTransferCache(options));\n}\n/**\n * Returns an `ENVIRONMENT_INITIALIZER` token setup with a function\n * that verifies whether compatible ZoneJS was used in an application\n * and logs a warning in a console if it's not the case.\n */\nfunction provideZoneJsCompatibilityDetector() {\n  return [{\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      const ngZone = inject(NgZone);\n      // Checking `ngZone instanceof NgZone` would be insufficient here,\n      // because custom implementations might use NgZone as a base class.\n      if (ngZone.constructor !== NgZone) {\n        const console = inject(ɵConsole);\n        const message = ɵformatRuntimeError(-5000 /* RuntimeErrorCode.UNSUPPORTED_ZONEJS_INSTANCE */, 'Angular detected that hydration was enabled for an application ' + 'that uses a custom or a noop Zone.js implementation. ' + 'This is not yet a fully supported configuration.');\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n      }\n    },\n    multi: true\n  }];\n}\n/**\n * Sets up providers necessary to enable hydration functionality for the application.\n *\n * By default, the function enables the recommended set of features for the optimal\n * performance for most of the applications. It includes the following features:\n *\n * * Reconciling DOM hydration. Learn more about it [here](guide/hydration).\n * * [`HttpClient`](api/common/http/HttpClient) response caching while running on the server and\n * transferring this cache to the client to avoid extra HTTP requests. Learn more about data caching\n * [here](/guide/ssr#caching-data-when-using-httpclient).\n *\n * These functions allow you to disable some of the default features or configure features\n * * {@link withNoHttpTransferCache} to disable HTTP transfer cache\n * * {@link withHttpTransferCacheOptions} to configure some HTTP transfer cache options\n *\n * @usageNotes\n *\n * Basic example of how you can enable hydration in your application when\n * `bootstrapApplication` function is used:\n * ```\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration()]\n * });\n * ```\n *\n * Alternatively if you are using NgModules, you would add `provideClientHydration`\n * to your root app module's provider list.\n * ```\n * @NgModule({\n *   declarations: [RootCmp],\n *   bootstrap: [RootCmp],\n *   providers: [provideClientHydration()],\n * })\n * export class AppModule {}\n * ```\n *\n * @see {@link withNoHttpTransferCache}\n * @see {@link withHttpTransferCacheOptions}\n *\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to enable hydration.\n *\n * @publicApi\n */\nfunction provideClientHydration(...features) {\n  const providers = [];\n  const featuresKind = new Set();\n  const hasHttpTransferCacheOptions = featuresKind.has(HydrationFeatureKind.HttpTransferCacheOptions);\n  for (const {\n    ɵproviders,\n    ɵkind\n  } of features) {\n    featuresKind.add(ɵkind);\n    if (ɵproviders.length) {\n      providers.push(ɵproviders);\n    }\n  }\n  if (typeof ngDevMode !== 'undefined' && ngDevMode && featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) && hasHttpTransferCacheOptions) {\n    // TODO: Make this a runtime error\n    throw new Error('Configuration error: found both withHttpTransferCacheOptions() and withNoHttpTransferCache() in the same call to provideClientHydration(), which is a contradiction.');\n  }\n  return makeEnvironmentProviders([typeof ngDevMode !== 'undefined' && ngDevMode ? provideZoneJsCompatibilityDetector() : [], ɵwithDomHydration(), featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) || hasHttpTransferCacheOptions ? [] : ɵwithHttpTransferCache({}), providers]);\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n/**\n * @publicApi\n */\nconst VERSION = /*#__PURE__*/new Version('17.3.12');\n\n// Re-export TransferState to the public API of the `platform-browser` for backwards-compatibility.\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n * @deprecated `makeStateKey` has moved, please import `makeStateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nconst makeStateKey = makeStateKey$1;\n// The below type is needed for G3 due to JSC_CONFORMANCE_VIOLATION.\nconst TransferState = TransferState$1;\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserModule, By, DomSanitizer, EVENT_MANAGER_PLUGINS, EventManager, EventManagerPlugin, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerModule, HydrationFeatureKind, Meta, REMOVE_STYLES_ON_COMPONENT_DESTROY, Title, TransferState, VERSION, bootstrapApplication, createApplication, disableDebugTools, enableDebugTools, makeStateKey, platformBrowser, provideClientHydration, provideProtractorTestingSupport, withHttpTransferCacheOptions, withNoHttpTransferCache, BrowserDomAdapter as ɵBrowserDomAdapter, BrowserGetTestability as ɵBrowserGetTestability, DomEventsPlugin as ɵDomEventsPlugin, DomRendererFactory2 as ɵDomRendererFactory2, DomSanitizerImpl as ɵDomSanitizerImpl, HammerGesturesPlugin as ɵHammerGesturesPlugin, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, KeyEventsPlugin as ɵKeyEventsPlugin, SharedStylesHost as ɵSharedStylesHost, initDomAdapter as ɵinitDomAdapter };\n","/**\n * @license Angular v17.3.12\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { ɵisPromise, ɵRuntimeError, Injectable, EventEmitter, inject, ViewContainerRef, ChangeDetectorRef, EnvironmentInjector, Directive, Input, Output, InjectionToken, reflectComponentType, Component, createEnvironmentInjector, ɵisNgModule, isStandalone, ɵisInjectable, runInInjectionContext, Compiler, NgModuleFactory, NgZone, afterNextRender, ɵConsole, ɵPendingTasks, ɵɵsanitizeUrlOrResourceUrl, booleanAttribute, Attribute, HostBinding, HostListener, Optional, ContentChildren, makeEnvironmentProviders, APP_BOOTSTRAP_LISTENER, ENVIRONMENT_INITIALIZER, Injector, ApplicationRef, InjectFlags, APP_INITIALIZER, SkipSelf, NgModule, Inject, Version } from '@angular/core';\nimport { isObservable, from, of, BehaviorSubject, combineLatest, EmptyError, concat, defer, pipe, throwError, EMPTY, ConnectableObservable, Subject, Subscription } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, Location, ViewportScroller, LOCATION_INITIALIZED, LocationStrategy, HashLocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { map, switchMap, take, startWith, filter, mergeMap, first, concatMap, tap, catchError, scan, defaultIfEmpty, last as last$1, takeLast, mapTo, finalize, refCount, takeUntil, mergeAll } from 'rxjs/operators';\nimport * as i1 from '@angular/platform-browser';\n\n/**\n * The primary routing outlet.\n *\n * @publicApi\n */\nconst PRIMARY_OUTLET = 'primary';\n/**\n * A private symbol used to store the value of `Route.title` inside the `Route.data` if it is a\n * static string or `Route.resolve` if anything else. This allows us to reuse the existing route\n * data/resolvers to support the title feature without new instrumentation in the `Router` pipeline.\n */\nconst RouteTitleKey = /* @__PURE__ */Symbol('RouteTitle');\nclass ParamsAsMap {\n  constructor(params) {\n    this.params = params || {};\n  }\n  has(name) {\n    return Object.prototype.hasOwnProperty.call(this.params, name);\n  }\n  get(name) {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v[0] : v;\n    }\n    return null;\n  }\n  getAll(name) {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v : [v];\n    }\n    return [];\n  }\n  get keys() {\n    return Object.keys(this.params);\n  }\n}\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * @param params The instance to convert.\n * @returns The new map instance.\n *\n * @publicApi\n */\nfunction convertToParamMap(params) {\n  return new ParamsAsMap(params);\n}\n/**\n * Matches the route configuration (`route`) against the actual URL (`segments`).\n *\n * When no matcher is defined on a `Route`, this is the matcher used by the Router by default.\n *\n * @param segments The remaining unmatched segments in the current navigation\n * @param segmentGroup The current segment group being matched\n * @param route The `Route` to match against.\n *\n * @see {@link UrlMatchResult}\n * @see {@link Route}\n *\n * @returns The resulting match information or `null` if the `route` should not match.\n * @publicApi\n */\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\n  const parts = route.path.split('/');\n  if (parts.length > segments.length) {\n    // The actual URL is shorter than the config, no match\n    return null;\n  }\n  if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || parts.length < segments.length)) {\n    // The config is longer than the actual URL but we are looking for a full match, return null\n    return null;\n  }\n  const posParams = {};\n  // Check each config part against the actual URL\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const segment = segments[index];\n    const isParameter = part.startsWith(':');\n    if (isParameter) {\n      posParams[part.substring(1)] = segment;\n    } else if (part !== segment.path) {\n      // The actual URL part does not match the config, no match\n      return null;\n    }\n  }\n  return {\n    consumed: segments.slice(0, parts.length),\n    posParams\n  };\n}\nfunction shallowEqualArrays(a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\nfunction shallowEqual(a, b) {\n  // While `undefined` should never be possible, it would sometimes be the case in IE 11\n  // and pre-chromium Edge. The check below accounts for this edge case.\n  const k1 = a ? getDataKeys(a) : undefined;\n  const k2 = b ? getDataKeys(b) : undefined;\n  if (!k1 || !k2 || k1.length != k2.length) {\n    return false;\n  }\n  let key;\n  for (let i = 0; i < k1.length; i++) {\n    key = k1[i];\n    if (!equalArraysOrString(a[key], b[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Gets the keys of an object, including `symbol` keys.\n */\nfunction getDataKeys(obj) {\n  return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];\n}\n/**\n * Test equality for arrays of strings or a string.\n */\nfunction equalArraysOrString(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    const aSorted = [...a].sort();\n    const bSorted = [...b].sort();\n    return aSorted.every((val, index) => bSorted[index] === val);\n  } else {\n    return a === b;\n  }\n}\n/**\n * Return the last element of an array.\n */\nfunction last(a) {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\nfunction wrapIntoObservable(value) {\n  if (isObservable(value)) {\n    return value;\n  }\n  if (ɵisPromise(value)) {\n    // Use `Promise.resolve()` to wrap promise-like instances.\n    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n    // change detection.\n    return from(Promise.resolve(value));\n  }\n  return of(value);\n}\nconst pathCompareMap = {\n  'exact': equalSegmentGroups,\n  'subset': containsSegmentGroup\n};\nconst paramCompareMap = {\n  'exact': equalParams,\n  'subset': containsParams,\n  'ignored': () => true\n};\nfunction containsTree(container, containee, options) {\n  return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === 'exact' && container.fragment !== containee.fragment);\n}\nfunction equalParams(container, containee) {\n  // TODO: This does not handle array params correctly.\n  return shallowEqual(container, containee);\n}\nfunction equalSegmentGroups(container, containee, matrixParams) {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {\n    return false;\n  }\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams)) return false;\n  }\n  return true;\n}\nfunction containsParams(container, containee) {\n  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(key => equalArraysOrString(container[key], containee[key]));\n}\nfunction containsSegmentGroup(container, containee, matrixParams) {\n  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);\n}\nfunction containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;\n    for (const c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!matrixParamsMatch(container.segments, current, matrixParams)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);\n  }\n}\nfunction matrixParamsMatch(containerPaths, containeePaths, options) {\n  return containeePaths.every((containeeSegment, i) => {\n    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);\n  });\n}\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass UrlTree {\n  constructor( /** The root segment group of the URL tree */\n  root = new UrlSegmentGroup([], {}), /** The query params of the URL */\n  queryParams = {}, /** The fragment of the URL */\n  fragment = null) {\n    this.root = root;\n    this.queryParams = queryParams;\n    this.fragment = fragment;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (root.segments.length > 0) {\n        throw new ɵRuntimeError(4015 /* RuntimeErrorCode.INVALID_ROOT_URL_SEGMENT */, 'The root `UrlSegmentGroup` should not contain `segments`. ' + 'Instead, these segments belong in the `children` so they can be associated with a named outlet.');\n      }\n    }\n  }\n  get queryParamMap() {\n    this._queryParamMap ??= convertToParamMap(this.queryParams);\n    return this._queryParamMap;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return DEFAULT_SERIALIZER.serialize(this);\n  }\n}\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * @publicApi\n */\nclass UrlSegmentGroup {\n  constructor( /** The URL segments of this group. See `UrlSegment` for more information */\n  segments, /** The list of children of this group */\n  children) {\n    this.segments = segments;\n    this.children = children;\n    /** The parent node in the url tree */\n    this.parent = null;\n    Object.values(children).forEach(v => v.parent = this);\n  }\n  /** Whether the segment has child segments */\n  hasChildren() {\n    return this.numberOfChildren > 0;\n  }\n  /** Number of child segments */\n  get numberOfChildren() {\n    return Object.keys(this.children).length;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return serializePaths(this);\n  }\n}\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass UrlSegment {\n  constructor( /** The path part of a URL segment */\n  path, /** The matrix parameters associated with a segment */\n  parameters) {\n    this.path = path;\n    this.parameters = parameters;\n  }\n  get parameterMap() {\n    this._parameterMap ??= convertToParamMap(this.parameters);\n    return this._parameterMap;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return serializePath(this);\n  }\n}\nfunction equalSegments(as, bs) {\n  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\nfunction equalPath(as, bs) {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path);\n}\nfunction mapChildrenIntoArray(segment, fn) {\n  let res = [];\n  Object.entries(segment.children).forEach(([childOutlet, child]) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  Object.entries(segment.children).forEach(([childOutlet, child]) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * @publicApi\n */\nlet UrlSerializer = /*#__PURE__*/(() => {\n  class UrlSerializer {\n    static {\n      this.ɵfac = function UrlSerializer_Factory(t) {\n        return new (t || UrlSerializer)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: UrlSerializer,\n        factory: () => (() => new DefaultUrlSerializer())(),\n        providedIn: 'root'\n      });\n    }\n  }\n  return UrlSerializer;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * @publicApi\n */\nclass DefaultUrlSerializer {\n  /** Parses a url into a `UrlTree` */\n  parse(url) {\n    const p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n  /** Converts a `UrlTree` into a url */\n  serialize(tree) {\n    const segment = `/${serializeSegment(tree.root, true)}`;\n    const query = serializeQueryParams(tree.queryParams);\n    const fragment = typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment)}` : '';\n    return `${segment}${query}${fragment}`;\n  }\n}\nconst DEFAULT_SERIALIZER = /*#__PURE__*/new DefaultUrlSerializer();\nfunction serializePaths(segment) {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\nfunction serializeSegment(segment, root) {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n  if (root) {\n    const primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : '';\n    const children = [];\n    Object.entries(segment.children).forEach(([k, v]) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n  } else {\n    const children = mapChildrenIntoArray(segment, (v, k) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n      return [`${k}:${serializeSegment(v, false)}`];\n    });\n    // use no parenthesis if the only child is a primary outlet route\n    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {\n      return `${serializePaths(segment)}/${children[0]}`;\n    }\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n */\nfunction encodeUriString(s) {\n  return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');\n}\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriQuery(s) {\n  return encodeUriString(s).replace(/%3B/gi, ';');\n}\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriFragment(s) {\n  return encodeURI(s);\n}\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriSegment(s) {\n  return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\nfunction decode(s) {\n  return decodeURIComponent(s);\n}\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\nfunction decodeQuery(s) {\n  return decode(s.replace(/\\+/g, '%20'));\n}\nfunction serializePath(path) {\n  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\nfunction serializeMatrixParams(params) {\n  return Object.entries(params).map(([key, value]) => `;${encodeUriSegment(key)}=${encodeUriSegment(value)}`).join('');\n}\nfunction serializeQueryParams(params) {\n  const strParams = Object.entries(params).map(([name, value]) => {\n    return Array.isArray(value) ? value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n  }).filter(s => s);\n  return strParams.length ? `?${strParams.join('&')}` : '';\n}\nconst SEGMENT_RE = /^[^\\/()?;#]+/;\nfunction matchSegments(str) {\n  const match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\nconst MATRIX_PARAM_SEGMENT_RE = /^[^\\/()?;=#]+/;\nfunction matchMatrixKeySegments(str) {\n  const match = str.match(MATRIX_PARAM_SEGMENT_RE);\n  return match ? match[0] : '';\n}\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\nfunction matchQueryParams(str) {\n  const match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\nconst QUERY_PARAM_VALUE_RE = /^[^&#]+/;\n// Return the value of the query param at the start of the string or an empty string\nfunction matchUrlQueryParamValue(str) {\n  const match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\nclass UrlParser {\n  constructor(url) {\n    this.url = url;\n    this.remaining = url;\n  }\n  parseRootSegment() {\n    this.consumeOptional('/');\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n    // The root segment group never has segments\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n  parseQueryParams() {\n    const params = {};\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n    return params;\n  }\n  parseFragment() {\n    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n  }\n  parseChildren() {\n    if (this.remaining === '') {\n      return {};\n    }\n    this.consumeOptional('/');\n    const segments = [];\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n    let children = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n    let res = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n    return res;\n  }\n  // parse a segment with its matrix parameters\n  // ie `name;k1=v1;k2`\n  parseSegment() {\n    const path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new ɵRuntimeError(4009 /* RuntimeErrorCode.EMPTY_PATH_WITH_PARAMS */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n  parseMatrixParams() {\n    const params = {};\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n    return params;\n  }\n  parseParam(params) {\n    const key = matchMatrixKeySegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n    params[decode(key)] = decode(value);\n  }\n  // Parse a single query parameter `name[=value]`\n  parseQueryParam(params) {\n    const key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n    const decodedKey = decodeQuery(key);\n    const decodedVal = decodeQuery(value);\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n  // parse `(a/b//outlet_name:c/d)`\n  parseParens(allowPrimary) {\n    const segments = {};\n    this.capture('(');\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      const path = matchSegments(this.remaining);\n      const next = this.remaining[path.length];\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new ɵRuntimeError(4010 /* RuntimeErrorCode.UNPARSABLE_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot parse url '${this.url}'`);\n      }\n      let outletName = undefined;\n      if (path.indexOf(':') > -1) {\n        outletName = path.slice(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n      const children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n    return segments;\n  }\n  peekStartsWith(str) {\n    return this.remaining.startsWith(str);\n  }\n  // Consumes the prefix when it is present and returns whether it has been consumed\n  consumeOptional(str) {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n    return false;\n  }\n  capture(str) {\n    if (!this.consumeOptional(str)) {\n      throw new ɵRuntimeError(4011 /* RuntimeErrorCode.UNEXPECTED_VALUE_IN_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Expected \"${str}\".`);\n    }\n  }\n}\nfunction createRoot(rootCandidate) {\n  return rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], {\n    [PRIMARY_OUTLET]: rootCandidate\n  }) : rootCandidate;\n}\n/**\n * Recursively\n * - merges primary segment children into their parents\n * - drops empty children (those which have no segments and no children themselves). This latter\n * prevents serializing a group into something like `/a(aux:)`, where `aux` is an empty child\n * segment.\n * - merges named outlets without a primary segment sibling into the children. This prevents\n * serializing a URL like `//(a:a)(b:b) instead of `/(a:a//b:b)` when the aux b route lives on the\n * root but the `a` route lives under an empty path primary route.\n */\nfunction squashSegmentGroup(segmentGroup) {\n  const newChildren = {};\n  for (const [childOutlet, child] of Object.entries(segmentGroup.children)) {\n    const childCandidate = squashSegmentGroup(child);\n    // moves named children in an empty path primary child into this group\n    if (childOutlet === PRIMARY_OUTLET && childCandidate.segments.length === 0 && childCandidate.hasChildren()) {\n      for (const [grandChildOutlet, grandChild] of Object.entries(childCandidate.children)) {\n        newChildren[grandChildOutlet] = grandChild;\n      }\n    } // don't add empty children\n    else if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {\n      newChildren[childOutlet] = childCandidate;\n    }\n  }\n  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);\n  return mergeTrivialChildren(s);\n}\n/**\n * When possible, merges the primary outlet child into the parent `UrlSegmentGroup`.\n *\n * When a segment group has only one child which is a primary outlet, merges that child into the\n * parent. That is, the child segment group's segments are merged into the `s` and the child's\n * children become the children of `s`. Think of this like a 'squash', merging the child segment\n * group into the parent.\n */\nfunction mergeTrivialChildren(s) {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n  return s;\n}\nfunction isUrlTree(v) {\n  return v instanceof UrlTree;\n}\n\n/**\n * Creates a `UrlTree` relative to an `ActivatedRouteSnapshot`.\n *\n * @publicApi\n *\n *\n * @param relativeTo The `ActivatedRouteSnapshot` to apply the commands to\n * @param commands An array of URL fragments with which to construct the new URL tree.\n * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n * segments, followed by the parameters for each segment.\n * The fragments are applied to the one provided in the `relativeTo` parameter.\n * @param queryParams The query parameters for the `UrlTree`. `null` if the `UrlTree` does not have\n *     any query parameters.\n * @param fragment The fragment for the `UrlTree`. `null` if the `UrlTree` does not have a fragment.\n *\n * @usageNotes\n *\n * ```\n * // create /team/33/user/11\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, 'user', 11]);\n *\n * // create /team/33;expand=true/user/11\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {expand: true}, 'user', 11]);\n *\n * // you can collapse static segments like this (this works only with the first passed-in value):\n * createUrlTreeFromSnapshot(snapshot, ['/team/33/user', userId]);\n *\n * // If the first segment can contain slashes, and you do not want the router to split it,\n * // you can do the following:\n * createUrlTreeFromSnapshot(snapshot, [{segmentPath: '/one/two'}]);\n *\n * // create /team/33/(user/11//right:chat)\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {outlets: {primary: 'user/11', right:\n * 'chat'}}], null, null);\n *\n * // remove the right secondary node\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n *\n * // For the examples below, assume the current URL is for the `/team/33/user/11` and the\n * `ActivatedRouteSnapshot` points to `user/11`:\n *\n * // navigate to /team/33/user/11/details\n * createUrlTreeFromSnapshot(snapshot, ['details']);\n *\n * // navigate to /team/33/user/22\n * createUrlTreeFromSnapshot(snapshot, ['../22']);\n *\n * // navigate to /team/44/user/22\n * createUrlTreeFromSnapshot(snapshot, ['../../team/44/user/22']);\n * ```\n */\nfunction createUrlTreeFromSnapshot(relativeTo, commands, queryParams = null, fragment = null) {\n  const relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeTo);\n  return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, queryParams, fragment);\n}\nfunction createSegmentGroupFromRoute(route) {\n  let targetGroup;\n  function createSegmentGroupFromRouteRecursive(currentRoute) {\n    const childOutlets = {};\n    for (const childSnapshot of currentRoute.children) {\n      const root = createSegmentGroupFromRouteRecursive(childSnapshot);\n      childOutlets[childSnapshot.outlet] = root;\n    }\n    const segmentGroup = new UrlSegmentGroup(currentRoute.url, childOutlets);\n    if (currentRoute === route) {\n      targetGroup = segmentGroup;\n    }\n    return segmentGroup;\n  }\n  const rootCandidate = createSegmentGroupFromRouteRecursive(route.root);\n  const rootSegmentGroup = createRoot(rootCandidate);\n  return targetGroup ?? rootSegmentGroup;\n}\nfunction createUrlTreeFromSegmentGroup(relativeTo, commands, queryParams, fragment) {\n  let root = relativeTo;\n  while (root.parent) {\n    root = root.parent;\n  }\n  // There are no commands so the `UrlTree` goes to the same path as the one created from the\n  // `UrlSegmentGroup`. All we need to do is update the `queryParams` and `fragment` without\n  // applying any other logic.\n  if (commands.length === 0) {\n    return tree(root, root, root, queryParams, fragment);\n  }\n  const nav = computeNavigation(commands);\n  if (nav.toRoot()) {\n    return tree(root, root, new UrlSegmentGroup([], {}), queryParams, fragment);\n  }\n  const position = findStartingPositionForTargetGroup(nav, root, relativeTo);\n  const newSegmentGroup = position.processChildren ? updateSegmentGroupChildren(position.segmentGroup, position.index, nav.commands) : updateSegmentGroup(position.segmentGroup, position.index, nav.commands);\n  return tree(root, position.segmentGroup, newSegmentGroup, queryParams, fragment);\n}\nfunction isMatrixParams(command) {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * Determines if a given command has an `outlets` map. When we encounter a command\n * with an outlets k/v map, we need to apply each outlet individually to the existing segment.\n */\nfunction isCommandWithOutlets(command) {\n  return typeof command === 'object' && command != null && command.outlets;\n}\nfunction tree(oldRoot, oldSegmentGroup, newSegmentGroup, queryParams, fragment) {\n  let qp = {};\n  if (queryParams) {\n    Object.entries(queryParams).forEach(([name, value]) => {\n      qp[name] = Array.isArray(value) ? value.map(v => `${v}`) : `${value}`;\n    });\n  }\n  let rootCandidate;\n  if (oldRoot === oldSegmentGroup) {\n    rootCandidate = newSegmentGroup;\n  } else {\n    rootCandidate = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);\n  }\n  const newRoot = createRoot(squashSegmentGroup(rootCandidate));\n  return new UrlTree(newRoot, qp, fragment);\n}\n/**\n * Replaces the `oldSegment` which is located in some child of the `current` with the `newSegment`.\n * This also has the effect of creating new `UrlSegmentGroup` copies to update references. This\n * shouldn't be necessary but the fallback logic for an invalid ActivatedRoute in the creation uses\n * the Router's current url tree. If we don't create new segment groups, we end up modifying that\n * value.\n */\nfunction replaceSegment(current, oldSegment, newSegment) {\n  const children = {};\n  Object.entries(current.children).forEach(([outletName, c]) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n  constructor(isAbsolute, numberOfDoubleDots, commands) {\n    this.isAbsolute = isAbsolute;\n    this.numberOfDoubleDots = numberOfDoubleDots;\n    this.commands = commands;\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new ɵRuntimeError(4003 /* RuntimeErrorCode.ROOT_SEGMENT_MATRIX_PARAMS */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Root segment cannot have matrix parameters');\n    }\n    const cmdWithOutlet = commands.find(isCommandWithOutlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new ɵRuntimeError(4004 /* RuntimeErrorCode.MISPLACED_OUTLETS_COMMAND */, (typeof ngDevMode === 'undefined' || ngDevMode) && '{outlets:{}} has to be the last command');\n    }\n  }\n  toRoot() {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n/** Transforms commands to a normalized `Navigation` */\nfunction computeNavigation(commands) {\n  if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n  let numberOfDoubleDots = 0;\n  let isAbsolute = false;\n  const res = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const outlets = {};\n        Object.entries(cmd.outlets).forEach(([name, commands]) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {\n          outlets\n        }];\n      }\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {\n          //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {\n          //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n      return res;\n    }\n    return [...res, cmd];\n  }, []);\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n  constructor(segmentGroup, processChildren, index) {\n    this.segmentGroup = segmentGroup;\n    this.processChildren = processChildren;\n    this.index = index;\n  }\n}\nfunction findStartingPositionForTargetGroup(nav, root, target) {\n  if (nav.isAbsolute) {\n    return new Position(root, true, 0);\n  }\n  if (!target) {\n    // `NaN` is used only to maintain backwards compatibility with incorrectly mocked\n    // `ActivatedRouteSnapshot` in tests. In prior versions of this code, the position here was\n    // determined based on an internal property that was rarely mocked, resulting in `NaN`. In\n    // reality, this code path should _never_ be touched since `target` is not allowed to be falsey.\n    return new Position(root, false, NaN);\n  }\n  if (target.parent === null) {\n    return new Position(target, true, 0);\n  }\n  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const index = target.segments.length - 1 + modifier;\n  return createPositionApplyingDoubleDots(target, index, nav.numberOfDoubleDots);\n}\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n  let g = group;\n  let ci = index;\n  let dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent;\n    if (!g) {\n      throw new ɵRuntimeError(4005 /* RuntimeErrorCode.INVALID_DOUBLE_DOTS */, (typeof ngDevMode === 'undefined' || ngDevMode) && \"Invalid number of '../'\");\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\nfunction getOutlets(commands) {\n  if (isCommandWithOutlets(commands[0])) {\n    return commands[0].outlets;\n  }\n  return {\n    [PRIMARY_OUTLET]: commands\n  };\n}\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n  segmentGroup ??= new UrlSegmentGroup([], {});\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n  const m = prefixedWith(segmentGroup, startIndex, commands);\n  const slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const outlets = getOutlets(commands);\n    const children = {};\n    // If the set of commands applies to anything other than the primary outlet and the child\n    // segment is an empty path primary segment on its own, we want to apply the commands to the\n    // empty child path rather than here. The outcome is that the empty primary child is effectively\n    // removed from the final output UrlTree. Imagine the following config:\n    //\n    // {path: '', children: [{path: '**', outlet: 'popup'}]}.\n    //\n    // Navigation to /(popup:a) will activate the child outlet correctly Given a follow-up\n    // navigation with commands\n    // ['/', {outlets: {'popup': 'b'}}], we _would not_ want to apply the outlet commands to the\n    // root segment because that would result in\n    // //(popup:a)(popup:b) since the outlet command got applied one level above where it appears in\n    // the `ActivatedRoute` rather than updating the existing one.\n    //\n    // Because empty paths do not appear in the URL segments and the fact that the segments used in\n    // the output `UrlTree` are squashed to eliminate these empty paths where possible\n    // https://github.com/angular/angular/blob/13f10de40e25c6900ca55bd83b36bd533dacfa9e/packages/router/src/url_tree.ts#L755\n    // it can be hard to determine what is the right thing to do when applying commands to a\n    // `UrlSegmentGroup` that is created from an \"unsquashed\"/expanded `ActivatedRoute` tree.\n    // This code effectively \"squashes\" empty path primary routes when they have no siblings on\n    // the same level of the tree.\n    if (Object.keys(outlets).some(o => o !== PRIMARY_OUTLET) && segmentGroup.children[PRIMARY_OUTLET] && segmentGroup.numberOfChildren === 1 && segmentGroup.children[PRIMARY_OUTLET].segments.length === 0) {\n      const childrenOfEmptyChild = updateSegmentGroupChildren(segmentGroup.children[PRIMARY_OUTLET], startIndex, commands);\n      return new UrlSegmentGroup(segmentGroup.segments, childrenOfEmptyChild.children);\n    }\n    Object.entries(outlets).forEach(([outlet, commands]) => {\n      if (typeof commands === 'string') {\n        commands = [commands];\n      }\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n    Object.entries(segmentGroup.children).forEach(([childOutlet, child]) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n  let currentCommandIndex = 0;\n  let currentPathIndex = startIndex;\n  const noMatch = {\n    match: false,\n    pathIndex: 0,\n    commandIndex: 0\n  };\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const path = segmentGroup.segments[currentPathIndex];\n    const command = commands[currentCommandIndex];\n    // Do not try to consume command as part of the prefixing if it has outlets because it can\n    // contain outlets other than the one being processed. Consuming the outlets command would\n    // result in other outlets being ignored.\n    if (isCommandWithOutlets(command)) {\n      break;\n    }\n    const curr = `${command}`;\n    const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n    if (currentPathIndex > 0 && curr === undefined) break;\n    if (curr && next && typeof next === 'object' && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n  return {\n    match: true,\n    pathIndex: currentPathIndex,\n    commandIndex: currentCommandIndex\n  };\n}\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n  const paths = segmentGroup.segments.slice(0, startIndex);\n  let i = 0;\n  while (i < commands.length) {\n    const command = commands[i];\n    if (isCommandWithOutlets(command)) {\n      const children = createNewSegmentChildren(command.outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, stringify(commands[0])));\n      i++;\n      continue;\n    }\n    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;\n    const next = i < commands.length - 1 ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\nfunction createNewSegmentChildren(outlets) {\n  const children = {};\n  Object.entries(outlets).forEach(([outlet, commands]) => {\n    if (typeof commands === 'string') {\n      commands = [commands];\n    }\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\nfunction stringify(params) {\n  const res = {};\n  Object.entries(params).forEach(([k, v]) => res[k] = `${v}`);\n  return res;\n}\nfunction compare(path, params, segment) {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\nconst IMPERATIVE_NAVIGATION = 'imperative';\n/**\n * Identifies the type of a router event.\n *\n * @publicApi\n */\nvar EventType = /*#__PURE__*/function (EventType) {\n  EventType[EventType[\"NavigationStart\"] = 0] = \"NavigationStart\";\n  EventType[EventType[\"NavigationEnd\"] = 1] = \"NavigationEnd\";\n  EventType[EventType[\"NavigationCancel\"] = 2] = \"NavigationCancel\";\n  EventType[EventType[\"NavigationError\"] = 3] = \"NavigationError\";\n  EventType[EventType[\"RoutesRecognized\"] = 4] = \"RoutesRecognized\";\n  EventType[EventType[\"ResolveStart\"] = 5] = \"ResolveStart\";\n  EventType[EventType[\"ResolveEnd\"] = 6] = \"ResolveEnd\";\n  EventType[EventType[\"GuardsCheckStart\"] = 7] = \"GuardsCheckStart\";\n  EventType[EventType[\"GuardsCheckEnd\"] = 8] = \"GuardsCheckEnd\";\n  EventType[EventType[\"RouteConfigLoadStart\"] = 9] = \"RouteConfigLoadStart\";\n  EventType[EventType[\"RouteConfigLoadEnd\"] = 10] = \"RouteConfigLoadEnd\";\n  EventType[EventType[\"ChildActivationStart\"] = 11] = \"ChildActivationStart\";\n  EventType[EventType[\"ChildActivationEnd\"] = 12] = \"ChildActivationEnd\";\n  EventType[EventType[\"ActivationStart\"] = 13] = \"ActivationStart\";\n  EventType[EventType[\"ActivationEnd\"] = 14] = \"ActivationEnd\";\n  EventType[EventType[\"Scroll\"] = 15] = \"Scroll\";\n  EventType[EventType[\"NavigationSkipped\"] = 16] = \"NavigationSkipped\";\n  return EventType;\n}(EventType || {});\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * The following code shows how a class subscribes to router events.\n *\n * ```ts\n * import {Event, RouterEvent, Router} from '@angular/router';\n *\n * class MyService {\n *   constructor(public router: Router) {\n *     router.events.pipe(\n *        filter((e: Event | RouterEvent): e is RouterEvent => e instanceof RouterEvent)\n *     ).subscribe((e: RouterEvent) => {\n *       // Do something\n *     });\n *   }\n * }\n * ```\n *\n * @see {@link Event}\n * @see [Router events summary](guide/router-reference#router-events)\n * @publicApi\n */\nclass RouterEvent {\n  constructor( /** A unique ID that the router assigns to every router navigation. */\n  id, /** The URL that is the destination for this navigation. */\n  url) {\n    this.id = id;\n    this.url = url;\n  }\n}\n/**\n * An event triggered when a navigation starts.\n *\n * @publicApi\n */\nclass NavigationStart extends RouterEvent {\n  constructor( /** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  navigationTrigger = 'imperative', /** @docsNotRequired */\n  restoredState = null) {\n    super(id, url);\n    this.type = EventType.NavigationStart;\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n/**\n * An event triggered when a navigation ends successfully.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationCancel}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nclass NavigationEnd extends RouterEvent {\n  constructor( /** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.type = EventType.NavigationEnd;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n/**\n * A code for the `NavigationCancel` event of the `Router` to indicate the\n * reason a navigation failed.\n *\n * @publicApi\n */\nvar NavigationCancellationCode = /*#__PURE__*/function (NavigationCancellationCode) {\n  /**\n   * A navigation failed because a guard returned a `UrlTree` to redirect.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"Redirect\"] = 0] = \"Redirect\";\n  /**\n   * A navigation failed because a more recent navigation started.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"SupersededByNewNavigation\"] = 1] = \"SupersededByNewNavigation\";\n  /**\n   * A navigation failed because one of the resolvers completed without emitting a value.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"NoDataFromResolver\"] = 2] = \"NoDataFromResolver\";\n  /**\n   * A navigation failed because a guard returned `false`.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"GuardRejected\"] = 3] = \"GuardRejected\";\n  return NavigationCancellationCode;\n}(NavigationCancellationCode || {});\n/**\n * A code for the `NavigationSkipped` event of the `Router` to indicate the\n * reason a navigation was skipped.\n *\n * @publicApi\n */\nvar NavigationSkippedCode = /*#__PURE__*/function (NavigationSkippedCode) {\n  /**\n   * A navigation was skipped because the navigation URL was the same as the current Router URL.\n   */\n  NavigationSkippedCode[NavigationSkippedCode[\"IgnoredSameUrlNavigation\"] = 0] = \"IgnoredSameUrlNavigation\";\n  /**\n   * A navigation was skipped because the configured `UrlHandlingStrategy` return `false` for both\n   * the current Router URL and the target of the navigation.\n   *\n   * @see {@link UrlHandlingStrategy}\n   */\n  NavigationSkippedCode[NavigationSkippedCode[\"IgnoredByUrlHandlingStrategy\"] = 1] = \"IgnoredByUrlHandlingStrategy\";\n  return NavigationSkippedCode;\n}(NavigationSkippedCode || {});\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n * This can happen for several reasons including when a route guard\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nclass NavigationCancel extends RouterEvent {\n  constructor( /** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url,\n  /**\n   * A description of why the navigation was cancelled. For debug purposes only. Use `code`\n   * instead for a stable cancellation reason that can be used in production.\n   */\n  reason,\n  /**\n   * A code to indicate why the navigation was canceled. This cancellation code is stable for\n   * the reason and can be relied on whereas the `reason` string could change and should not be\n   * used in production.\n   */\n  code) {\n    super(id, url);\n    this.reason = reason;\n    this.code = code;\n    this.type = EventType.NavigationCancel;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n/**\n * An event triggered when a navigation is skipped.\n * This can happen for a couple reasons including onSameUrlHandling\n * is set to `ignore` and the navigation URL is not different than the\n * current state.\n *\n * @publicApi\n */\nclass NavigationSkipped extends RouterEvent {\n  constructor( /** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url,\n  /**\n   * A description of why the navigation was skipped. For debug purposes only. Use `code`\n   * instead for a stable skipped reason that can be used in production.\n   */\n  reason,\n  /**\n   * A code to indicate why the navigation was skipped. This code is stable for\n   * the reason and can be relied on whereas the `reason` string could change and should not be\n   * used in production.\n   */\n  code) {\n    super(id, url);\n    this.reason = reason;\n    this.code = code;\n    this.type = EventType.NavigationSkipped;\n  }\n}\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationCancel}\n *\n * @publicApi\n */\nclass NavigationError extends RouterEvent {\n  constructor( /** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  error,\n  /**\n   * The target of the navigation when the error occurred.\n   *\n   * Note that this can be `undefined` because an error could have occurred before the\n   * `RouterStateSnapshot` was created for the navigation.\n   */\n  target) {\n    super(id, url);\n    this.error = error;\n    this.target = target;\n    this.type = EventType.NavigationError;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n/**\n * An event triggered when routes are recognized.\n *\n * @publicApi\n */\nclass RoutesRecognized extends RouterEvent {\n  constructor( /** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n    this.type = EventType.RoutesRecognized;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * @see {@link GuardsCheckEnd}\n *\n * @publicApi\n */\nclass GuardsCheckStart extends RouterEvent {\n  constructor( /** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n    this.type = EventType.GuardsCheckStart;\n  }\n  toString() {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * @see {@link GuardsCheckStart}\n *\n * @publicApi\n */\nclass GuardsCheckEnd extends RouterEvent {\n  constructor( /** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state, /** @docsNotRequired */\n  shouldActivate) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n    this.shouldActivate = shouldActivate;\n    this.type = EventType.GuardsCheckEnd;\n  }\n  toString() {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n/**\n * An event triggered at the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * @see {@link ResolveEnd}\n *\n * @publicApi\n */\nclass ResolveStart extends RouterEvent {\n  constructor( /** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n    this.type = EventType.ResolveStart;\n  }\n  toString() {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ResolveEnd extends RouterEvent {\n  constructor( /** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n    this.type = EventType.ResolveEnd;\n  }\n  toString() {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * @see {@link RouteConfigLoadEnd}\n *\n * @publicApi\n */\nclass RouteConfigLoadStart {\n  constructor( /** @docsNotRequired */\n  route) {\n    this.route = route;\n    this.type = EventType.RouteConfigLoadStart;\n  }\n  toString() {\n    return `RouteConfigLoadStart(path: ${this.route.path})`;\n  }\n}\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * @see {@link RouteConfigLoadStart}\n *\n * @publicApi\n */\nclass RouteConfigLoadEnd {\n  constructor( /** @docsNotRequired */\n  route) {\n    this.route = route;\n    this.type = EventType.RouteConfigLoadEnd;\n  }\n  toString() {\n    return `RouteConfigLoadEnd(path: ${this.route.path})`;\n  }\n}\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see {@link ChildActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ChildActivationStart {\n  constructor( /** @docsNotRequired */\n  snapshot) {\n    this.snapshot = snapshot;\n    this.type = EventType.ChildActivationStart;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n}\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see {@link ChildActivationStart}\n * @see {@link ResolveStart}\n * @publicApi\n */\nclass ChildActivationEnd {\n  constructor( /** @docsNotRequired */\n  snapshot) {\n    this.snapshot = snapshot;\n    this.type = EventType.ChildActivationEnd;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n}\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ActivationStart {\n  constructor( /** @docsNotRequired */\n  snapshot) {\n    this.snapshot = snapshot;\n    this.type = EventType.ActivationStart;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n}\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationStart}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ActivationEnd {\n  constructor( /** @docsNotRequired */\n  snapshot) {\n    this.snapshot = snapshot;\n    this.type = EventType.ActivationEnd;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n}\n/**\n * An event triggered by scrolling.\n *\n * @publicApi\n */\nclass Scroll {\n  constructor( /** @docsNotRequired */\n  routerEvent, /** @docsNotRequired */\n  position, /** @docsNotRequired */\n  anchor) {\n    this.routerEvent = routerEvent;\n    this.position = position;\n    this.anchor = anchor;\n    this.type = EventType.Scroll;\n  }\n  toString() {\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n}\nclass BeforeActivateRoutes {}\nclass RedirectRequest {\n  constructor(url) {\n    this.url = url;\n  }\n}\nfunction stringifyEvent(routerEvent) {\n  switch (routerEvent.type) {\n    case EventType.ActivationEnd:\n      return `ActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ActivationStart:\n      return `ActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ChildActivationEnd:\n      return `ChildActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ChildActivationStart:\n      return `ChildActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.GuardsCheckEnd:\n      return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;\n    case EventType.GuardsCheckStart:\n      return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.NavigationCancel:\n      return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.NavigationSkipped:\n      return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.NavigationEnd:\n      return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;\n    case EventType.NavigationError:\n      return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;\n    case EventType.NavigationStart:\n      return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.ResolveEnd:\n      return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.ResolveStart:\n      return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.RouteConfigLoadEnd:\n      return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;\n    case EventType.RouteConfigLoadStart:\n      return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;\n    case EventType.RoutesRecognized:\n      return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.Scroll:\n      const pos = routerEvent.position ? `${routerEvent.position[0]}, ${routerEvent.position[1]}` : null;\n      return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;\n  }\n}\n\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * @publicApi\n */\nclass OutletContext {\n  constructor() {\n    this.outlet = null;\n    this.route = null;\n    this.injector = null;\n    this.children = new ChildrenOutletContexts();\n    this.attachRef = null;\n  }\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * @publicApi\n */\nlet ChildrenOutletContexts = /*#__PURE__*/(() => {\n  class ChildrenOutletContexts {\n    constructor() {\n      // contexts for child outlets, by name.\n      this.contexts = new Map();\n    }\n    /** Called when a `RouterOutlet` directive is instantiated */\n    onChildOutletCreated(childName, outlet) {\n      const context = this.getOrCreateContext(childName);\n      context.outlet = outlet;\n      this.contexts.set(childName, context);\n    }\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     */\n    onChildOutletDestroyed(childName) {\n      const context = this.getContext(childName);\n      if (context) {\n        context.outlet = null;\n        context.attachRef = null;\n      }\n    }\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     */\n    onOutletDeactivated() {\n      const contexts = this.contexts;\n      this.contexts = new Map();\n      return contexts;\n    }\n    onOutletReAttached(contexts) {\n      this.contexts = contexts;\n    }\n    getOrCreateContext(childName) {\n      let context = this.getContext(childName);\n      if (!context) {\n        context = new OutletContext();\n        this.contexts.set(childName, context);\n      }\n      return context;\n    }\n    getContext(childName) {\n      return this.contexts.get(childName) || null;\n    }\n    static {\n      this.ɵfac = function ChildrenOutletContexts_Factory(t) {\n        return new (t || ChildrenOutletContexts)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ChildrenOutletContexts,\n        factory: ChildrenOutletContexts.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ChildrenOutletContexts;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass Tree {\n  constructor(root) {\n    this._root = root;\n  }\n  get root() {\n    return this._root.value;\n  }\n  /**\n   * @internal\n   */\n  parent(t) {\n    const p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n  /**\n   * @internal\n   */\n  children(t) {\n    const n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n  /**\n   * @internal\n   */\n  firstChild(t) {\n    const n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n  /**\n   * @internal\n   */\n  siblings(t) {\n    const p = findPath(t, this._root);\n    if (p.length < 2) return [];\n    const c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n  /**\n   * @internal\n   */\n  pathFromRoot(t) {\n    return findPath(t, this._root).map(s => s.value);\n  }\n}\n// DFS for the node matching the value\nfunction findNode(value, node) {\n  if (value === node.value) return node;\n  for (const child of node.children) {\n    const node = findNode(value, child);\n    if (node) return node;\n  }\n  return null;\n}\n// Return the path to the node with the given value using DFS\nfunction findPath(value, node) {\n  if (value === node.value) return [node];\n  for (const child of node.children) {\n    const path = findPath(value, child);\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n  return [];\n}\nclass TreeNode {\n  constructor(value, children) {\n    this.value = value;\n    this.children = children;\n  }\n  toString() {\n    return `TreeNode(${this.value})`;\n  }\n}\n// Return the list of T indexed by outlet name\nfunction nodeChildrenAsMap(node) {\n  const map = {};\n  if (node) {\n    node.children.forEach(child => map[child.value.outlet] = child);\n  }\n  return map;\n}\n\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * @usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * The following fragment shows how a component gets the root node\n * of the current state to establish its own route tree:\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see {@link ActivatedRoute}\n * @see [Getting route information](guide/router#getting-route-information)\n *\n * @publicApi\n */\nclass RouterState extends Tree {\n  /** @internal */\n  constructor(root, /** The current snapshot of the router state */\n  snapshot) {\n    super(root);\n    this.snapshot = snapshot;\n    setRouterState(this, root);\n  }\n  toString() {\n    return this.snapshot.toString();\n  }\n}\nfunction createEmptyState(rootComponent) {\n  const snapshot = createEmptyStateSnapshot(rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode(activated, []), snapshot);\n}\nfunction createEmptyStateSnapshot(rootComponent) {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, {});\n  return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * The following example shows how to construct a component using information from a\n * currently activated route.\n *\n * Note: the observables in this class only emit when the current and previous values differ based\n * on shallow equality. For example, changing deeply nested properties in resolved `data` will not\n * cause the `ActivatedRoute.data` `Observable` to emit a new value.\n *\n * {@example router/activated-route/module.ts region=\"activated-route\"\n *     header=\"activated-route.component.ts\"}\n *\n * @see [Getting route information](guide/router#getting-route-information)\n *\n * @publicApi\n */\nclass ActivatedRoute {\n  /** @internal */\n  constructor( /** @internal */\n  urlSubject, /** @internal */\n  paramsSubject, /** @internal */\n  queryParamsSubject, /** @internal */\n  fragmentSubject, /** @internal */\n  dataSubject, /** The outlet name of the route, a constant. */\n  outlet, /** The component of the route, a constant. */\n  component, futureSnapshot) {\n    this.urlSubject = urlSubject;\n    this.paramsSubject = paramsSubject;\n    this.queryParamsSubject = queryParamsSubject;\n    this.fragmentSubject = fragmentSubject;\n    this.dataSubject = dataSubject;\n    this.outlet = outlet;\n    this.component = component;\n    this._futureSnapshot = futureSnapshot;\n    this.title = this.dataSubject?.pipe(map(d => d[RouteTitleKey])) ?? of(undefined);\n    // TODO(atscott): Verify that these can be changed to `.asObservable()` with TGP.\n    this.url = urlSubject;\n    this.params = paramsSubject;\n    this.queryParams = queryParamsSubject;\n    this.fragment = fragmentSubject;\n    this.data = dataSubject;\n  }\n  /** The configuration used to match this route. */\n  get routeConfig() {\n    return this._futureSnapshot.routeConfig;\n  }\n  /** The root of the router state. */\n  get root() {\n    return this._routerState.root;\n  }\n  /** The parent of this route in the router state tree. */\n  get parent() {\n    return this._routerState.parent(this);\n  }\n  /** The first child of this route in the router state tree. */\n  get firstChild() {\n    return this._routerState.firstChild(this);\n  }\n  /** The children of this route in the router state tree. */\n  get children() {\n    return this._routerState.children(this);\n  }\n  /** The path from the root of the router state tree to this route. */\n  get pathFromRoot() {\n    return this._routerState.pathFromRoot(this);\n  }\n  /**\n   * An Observable that contains a map of the required and optional parameters\n   * specific to the route.\n   * The map supports retrieving single and multiple values from the same parameter.\n   */\n  get paramMap() {\n    this._paramMap ??= this.params.pipe(map(p => convertToParamMap(p)));\n    return this._paramMap;\n  }\n  /**\n   * An Observable that contains a map of the query parameters available to all routes.\n   * The map supports retrieving single and multiple values from the query parameter.\n   */\n  get queryParamMap() {\n    this._queryParamMap ??= this.queryParams.pipe(map(p => convertToParamMap(p)));\n    return this._queryParamMap;\n  }\n  toString() {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n/**\n * Returns the inherited params, data, and resolve for a given route.\n *\n * By default, we do not inherit parent data unless the current route is path-less or the parent\n * route is component-less.\n */\nfunction getInherited(route, parent, paramsInheritanceStrategy = 'emptyOnly') {\n  let inherited;\n  const {\n    routeConfig\n  } = route;\n  if (parent !== null && (paramsInheritanceStrategy === 'always' ||\n  // inherit parent data if route is empty path\n  routeConfig?.path === '' ||\n  // inherit parent data if parent was componentless\n  !parent.component && !parent.routeConfig?.loadComponent)) {\n    inherited = {\n      params: {\n        ...parent.params,\n        ...route.params\n      },\n      data: {\n        ...parent.data,\n        ...route.data\n      },\n      resolve: {\n        // Snapshots are created with data inherited from parent and guards (i.e. canActivate) can\n        // change data because it's not frozen...\n        // This first line could be deleted chose to break/disallow mutating the `data` object in\n        // guards.\n        // Note that data from parents still override this mutated data so anyone relying on this\n        // might be surprised that it doesn't work if parent data is inherited but otherwise does.\n        ...route.data,\n        // Ensure inherited resolved data overrides inherited static data\n        ...parent.data,\n        // static data from the current route overrides any inherited data\n        ...routeConfig?.data,\n        // resolved data from current route overrides everything\n        ...route._resolvedData\n      }\n    };\n  } else {\n    inherited = {\n      params: {\n        ...route.params\n      },\n      data: {\n        ...route.data\n      },\n      resolve: {\n        ...route.data,\n        ...(route._resolvedData ?? {})\n      }\n    };\n  }\n  if (routeConfig && hasStaticTitle(routeConfig)) {\n    inherited.resolve[RouteTitleKey] = routeConfig.title;\n  }\n  return inherited;\n}\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * The following example initializes a component with route information extracted\n * from the snapshot of the root node at the time of creation.\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass ActivatedRouteSnapshot {\n  /** The resolved route title */\n  get title() {\n    // Note: This _must_ be a getter because the data is mutated in the resolvers. Title will not be\n    // available at the time of class instantiation.\n    return this.data?.[RouteTitleKey];\n  }\n  /** @internal */\n  constructor( /** The URL segments matched by this route */\n  url,\n  /**\n   *  The matrix parameters scoped to this route.\n   *\n   *  You can compute all params (or data) in the router state or to get params outside\n   *  of an activated component by traversing the `RouterState` tree as in the following\n   *  example:\n   *  ```\n   *  collectRouteParams(router: Router) {\n   *    let params = {};\n   *    let stack: ActivatedRouteSnapshot[] = [router.routerState.snapshot.root];\n   *    while (stack.length > 0) {\n   *      const route = stack.pop()!;\n   *      params = {...params, ...route.params};\n   *      stack.push(...route.children);\n   *    }\n   *    return params;\n   *  }\n   *  ```\n   */\n  params, /** The query parameters shared by all the routes */\n  queryParams, /** The URL fragment shared by all the routes */\n  fragment, /** The static and resolved data of this route */\n  data, /** The outlet name of the route */\n  outlet, /** The component of the route */\n  component, routeConfig, resolve) {\n    this.url = url;\n    this.params = params;\n    this.queryParams = queryParams;\n    this.fragment = fragment;\n    this.data = data;\n    this.outlet = outlet;\n    this.component = component;\n    this.routeConfig = routeConfig;\n    this._resolve = resolve;\n  }\n  /** The root of the router state */\n  get root() {\n    return this._routerState.root;\n  }\n  /** The parent of this route in the router state tree */\n  get parent() {\n    return this._routerState.parent(this);\n  }\n  /** The first child of this route in the router state tree */\n  get firstChild() {\n    return this._routerState.firstChild(this);\n  }\n  /** The children of this route in the router state tree */\n  get children() {\n    return this._routerState.children(this);\n  }\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot() {\n    return this._routerState.pathFromRoot(this);\n  }\n  get paramMap() {\n    this._paramMap ??= convertToParamMap(this.params);\n    return this._paramMap;\n  }\n  get queryParamMap() {\n    this._queryParamMap ??= convertToParamMap(this.queryParams);\n    return this._queryParamMap;\n  }\n  toString() {\n    const url = this.url.map(segment => segment.toString()).join('/');\n    const matched = this.routeConfig ? this.routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * The following example shows how a component is initialized with information\n * from the snapshot of the root node's state at the time of creation.\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass RouterStateSnapshot extends Tree {\n  /** @internal */\n  constructor( /** The url from which this snapshot was created */\n  url, root) {\n    super(root);\n    this.url = url;\n    setRouterState(this, root);\n  }\n  toString() {\n    return serializeNode(this._root);\n  }\n}\nfunction setRouterState(state, node) {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterState(state, c));\n}\nfunction serializeNode(node) {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n  return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nfunction advanceActivatedRoute(route) {\n  if (route.snapshot) {\n    const currentSnapshot = route.snapshot;\n    const nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      route.queryParamsSubject.next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      route.fragmentSubject.next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      route.paramsSubject.next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      route.urlSubject.next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      route.dataSubject.next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n    // this is for resolved data\n    route.dataSubject.next(route._futureSnapshot.data);\n  }\n}\nfunction equalParamsAndUrlSegments(a, b) {\n  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const parentsMismatch = !a.parent !== !b.parent;\n  return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));\n}\nfunction hasStaticTitle(config) {\n  return typeof config.title === 'string' || config.title === null;\n}\n\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * Named outlets can be the targets of secondary routes.\n * The `Route` object for a secondary route has an `outlet` property to identify the target outlet:\n *\n * `{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`\n *\n * Using named outlets and secondary routes, you can target multiple outlets in\n * the same `RouterLink` directive.\n *\n * The router keeps track of separate branches in a navigation tree for each named outlet and\n * generates a representation of that tree in the URL.\n * The URL for a secondary route uses the following syntax to specify both the primary and secondary\n * routes at the same time:\n *\n * `http://base-path/primary-route-path(outlet-name:route-path)`\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * deactivate event when a component is destroyed.\n * An attached event emits when the `RouteReuseStrategy` instructs the outlet to reattach the\n * subtree, and the detached event emits when the `RouteReuseStrategy` instructs the outlet to\n * detach the subtree.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'\n *   (attach)='onAttach($event)'\n *   (detach)='onDetach($event)'></router-outlet>\n * ```\n *\n * @see [Routing tutorial](guide/router-tutorial-toh#named-outlets \"Example of a named\n * outlet and secondary route configuration\").\n * @see {@link RouterLink}\n * @see {@link Route}\n * @ngModule RouterModule\n *\n * @publicApi\n */\nlet RouterOutlet = /*#__PURE__*/(() => {\n  class RouterOutlet {\n    constructor() {\n      this.activated = null;\n      this._activatedRoute = null;\n      /**\n       * The name of the outlet\n       *\n       * @see [named outlets](guide/router-tutorial-toh#displaying-multiple-routes-in-named-outlets)\n       */\n      this.name = PRIMARY_OUTLET;\n      this.activateEvents = new EventEmitter();\n      this.deactivateEvents = new EventEmitter();\n      /**\n       * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a\n       * previously detached subtree.\n       **/\n      this.attachEvents = new EventEmitter();\n      /**\n       * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the\n       * subtree.\n       */\n      this.detachEvents = new EventEmitter();\n      this.parentContexts = inject(ChildrenOutletContexts);\n      this.location = inject(ViewContainerRef);\n      this.changeDetector = inject(ChangeDetectorRef);\n      this.environmentInjector = inject(EnvironmentInjector);\n      this.inputBinder = inject(INPUT_BINDER, {\n        optional: true\n      });\n      /** @nodoc */\n      this.supportsBindingToComponentInputs = true;\n    }\n    /** @internal */\n    get activatedComponentRef() {\n      return this.activated;\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n      if (changes['name']) {\n        const {\n          firstChange,\n          previousValue\n        } = changes['name'];\n        if (firstChange) {\n          // The first change is handled by ngOnInit. Because ngOnChanges doesn't get called when no\n          // input is set at all, we need to centrally handle the first change there.\n          return;\n        }\n        // unregister with the old name\n        if (this.isTrackedInParentContexts(previousValue)) {\n          this.deactivate();\n          this.parentContexts.onChildOutletDestroyed(previousValue);\n        }\n        // register the new name\n        this.initializeOutletWithName();\n      }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n      // Ensure that the registered outlet is this one before removing it on the context.\n      if (this.isTrackedInParentContexts(this.name)) {\n        this.parentContexts.onChildOutletDestroyed(this.name);\n      }\n      this.inputBinder?.unsubscribeFromRouteData(this);\n    }\n    isTrackedInParentContexts(outletName) {\n      return this.parentContexts.getContext(outletName)?.outlet === this;\n    }\n    /** @nodoc */\n    ngOnInit() {\n      this.initializeOutletWithName();\n    }\n    initializeOutletWithName() {\n      this.parentContexts.onChildOutletCreated(this.name, this);\n      if (this.activated) {\n        return;\n      }\n      // If the outlet was not instantiated at the time the route got activated we need to populate\n      // the outlet when it is initialized (ie inside a NgIf)\n      const context = this.parentContexts.getContext(this.name);\n      if (context?.route) {\n        if (context.attachRef) {\n          // `attachRef` is populated when there is an existing component to mount\n          this.attach(context.attachRef, context.route);\n        } else {\n          // otherwise the component defined in the configuration is created\n          this.activateWith(context.route, context.injector);\n        }\n      }\n    }\n    get isActivated() {\n      return !!this.activated;\n    }\n    /**\n     * @returns The currently activated component instance.\n     * @throws An error if the outlet is not activated.\n     */\n    get component() {\n      if (!this.activated) throw new ɵRuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n      return this.activated.instance;\n    }\n    get activatedRoute() {\n      if (!this.activated) throw new ɵRuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n      return this._activatedRoute;\n    }\n    get activatedRouteData() {\n      if (this._activatedRoute) {\n        return this._activatedRoute.snapshot.data;\n      }\n      return {};\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    detach() {\n      if (!this.activated) throw new ɵRuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n      this.location.detach();\n      const cmp = this.activated;\n      this.activated = null;\n      this._activatedRoute = null;\n      this.detachEvents.emit(cmp.instance);\n      return cmp;\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    attach(ref, activatedRoute) {\n      this.activated = ref;\n      this._activatedRoute = activatedRoute;\n      this.location.insert(ref.hostView);\n      this.inputBinder?.bindActivatedRouteToOutletComponent(this);\n      this.attachEvents.emit(ref.instance);\n    }\n    deactivate() {\n      if (this.activated) {\n        const c = this.component;\n        this.activated.destroy();\n        this.activated = null;\n        this._activatedRoute = null;\n        this.deactivateEvents.emit(c);\n      }\n    }\n    activateWith(activatedRoute, environmentInjector) {\n      if (this.isActivated) {\n        throw new ɵRuntimeError(4013 /* RuntimeErrorCode.OUTLET_ALREADY_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Cannot activate an already activated outlet');\n      }\n      this._activatedRoute = activatedRoute;\n      const location = this.location;\n      const snapshot = activatedRoute.snapshot;\n      const component = snapshot.component;\n      const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n      const injector = new OutletInjector(activatedRoute, childContexts, location.injector);\n      this.activated = location.createComponent(component, {\n        index: location.length,\n        injector,\n        environmentInjector: environmentInjector ?? this.environmentInjector\n      });\n      // Calling `markForCheck` to make sure we will run the change detection when the\n      // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n      this.changeDetector.markForCheck();\n      this.inputBinder?.bindActivatedRouteToOutletComponent(this);\n      this.activateEvents.emit(this.activated.instance);\n    }\n    static {\n      this.ɵfac = function RouterOutlet_Factory(t) {\n        return new (t || RouterOutlet)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: RouterOutlet,\n        selectors: [[\"router-outlet\"]],\n        inputs: {\n          name: \"name\"\n        },\n        outputs: {\n          activateEvents: \"activate\",\n          deactivateEvents: \"deactivate\",\n          attachEvents: \"attach\",\n          detachEvents: \"detach\"\n        },\n        exportAs: [\"outlet\"],\n        standalone: true,\n        features: [i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return RouterOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass OutletInjector {\n  /**\n   * This injector has a special handing for the `ActivatedRoute` and\n   * `ChildrenOutletContexts` tokens: it returns corresponding values for those\n   * tokens dynamically. This behavior is different from the regular injector logic,\n   * when we initialize and store a value, which is later returned for all inject\n   * requests.\n   *\n   * In some cases (e.g. when using `@defer`), this dynamic behavior requires special\n   * handling. This function allows to identify an instance of the `OutletInjector` and\n   * create an instance of it without referring to the class itself (so this logic can\n   * be invoked from the `core` package). This helps to retain dynamic behavior for the\n   * mentioned tokens.\n   *\n   * Note: it's a temporary solution and we should explore how to support this case better.\n   */\n  __ngOutletInjector(parentInjector) {\n    return new OutletInjector(this.route, this.childContexts, parentInjector);\n  }\n  constructor(route, childContexts, parent) {\n    this.route = route;\n    this.childContexts = childContexts;\n    this.parent = parent;\n  }\n  get(token, notFoundValue) {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    }\n    return this.parent.get(token, notFoundValue);\n  }\n}\nconst INPUT_BINDER = /*#__PURE__*/new InjectionToken('');\n/**\n * Injectable used as a tree-shakable provider for opting in to binding router data to component\n * inputs.\n *\n * The RouterOutlet registers itself with this service when an `ActivatedRoute` is attached or\n * activated. When this happens, the service subscribes to the `ActivatedRoute` observables (params,\n * queryParams, data) and sets the inputs of the component using `ComponentRef.setInput`.\n * Importantly, when an input does not have an item in the route data with a matching key, this\n * input is set to `undefined`. If it were not done this way, the previous information would be\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\n *\n * The `RouterOutlet` should unregister itself when destroyed via `unsubscribeFromRouteData` so that\n * the subscriptions are cleaned up.\n */\nlet RoutedComponentInputBinder = /*#__PURE__*/(() => {\n  class RoutedComponentInputBinder {\n    constructor() {\n      this.outletDataSubscriptions = new Map();\n    }\n    bindActivatedRouteToOutletComponent(outlet) {\n      this.unsubscribeFromRouteData(outlet);\n      this.subscribeToRouteData(outlet);\n    }\n    unsubscribeFromRouteData(outlet) {\n      this.outletDataSubscriptions.get(outlet)?.unsubscribe();\n      this.outletDataSubscriptions.delete(outlet);\n    }\n    subscribeToRouteData(outlet) {\n      const {\n        activatedRoute\n      } = outlet;\n      const dataSubscription = combineLatest([activatedRoute.queryParams, activatedRoute.params, activatedRoute.data]).pipe(switchMap(([queryParams, params, data], index) => {\n        data = {\n          ...queryParams,\n          ...params,\n          ...data\n        };\n        // Get the first result from the data subscription synchronously so it's available to\n        // the component as soon as possible (and doesn't require a second change detection).\n        if (index === 0) {\n          return of(data);\n        }\n        // Promise.resolve is used to avoid synchronously writing the wrong data when\n        // two of the Observables in the `combineLatest` stream emit one after\n        // another.\n        return Promise.resolve(data);\n      })).subscribe(data => {\n        // Outlet may have been deactivated or changed names to be associated with a different\n        // route\n        if (!outlet.isActivated || !outlet.activatedComponentRef || outlet.activatedRoute !== activatedRoute || activatedRoute.component === null) {\n          this.unsubscribeFromRouteData(outlet);\n          return;\n        }\n        const mirror = reflectComponentType(activatedRoute.component);\n        if (!mirror) {\n          this.unsubscribeFromRouteData(outlet);\n          return;\n        }\n        for (const {\n          templateName\n        } of mirror.inputs) {\n          outlet.activatedComponentRef.setInput(templateName, data[templateName]);\n        }\n      });\n      this.outletDataSubscriptions.set(outlet, dataSubscription);\n    }\n    static {\n      this.ɵfac = function RoutedComponentInputBinder_Factory(t) {\n        return new (t || RoutedComponentInputBinder)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: RoutedComponentInputBinder,\n        factory: RoutedComponentInputBinder.ɵfac\n      });\n    }\n  }\n  return RoutedComponentInputBinder;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\n  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\nfunction createNode(routeReuseStrategy, curr, prevState) {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode(value, children);\n  } else {\n    if (routeReuseStrategy.shouldAttach(curr.value)) {\n      // retrieve an activated route that is used to be displayed, but is not currently displayed\n      const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);\n      if (detachedRouteHandle !== null) {\n        const tree = detachedRouteHandle.route;\n        tree.value._futureSnapshot = curr.value;\n        tree.children = curr.children.map(c => createNode(routeReuseStrategy, c));\n        return tree;\n      }\n    }\n    const value = createActivatedRoute(curr.value);\n    const children = curr.children.map(c => createNode(routeReuseStrategy, c));\n    return new TreeNode(value, children);\n  }\n}\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n  return curr.children.map(child => {\n    for (const p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\nfunction createActivatedRoute(c) {\n  return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\nfunction redirectingNavigationError(urlSerializer, redirect) {\n  const {\n    redirectTo,\n    navigationBehaviorOptions\n  } = isUrlTree(redirect) ? {\n    redirectTo: redirect,\n    navigationBehaviorOptions: undefined\n  } : redirect;\n  const error = navigationCancelingError(ngDevMode && `Redirecting to \"${urlSerializer.serialize(redirectTo)}\"`, NavigationCancellationCode.Redirect);\n  error.url = redirectTo;\n  error.navigationBehaviorOptions = navigationBehaviorOptions;\n  return error;\n}\nfunction navigationCancelingError(message, code) {\n  const error = new Error(`NavigationCancelingError: ${message || ''}`);\n  error[NAVIGATION_CANCELING_ERROR] = true;\n  error.cancellationCode = code;\n  return error;\n}\nfunction isRedirectingNavigationCancelingError(error) {\n  return isNavigationCancelingError(error) && isUrlTree(error.url);\n}\nfunction isNavigationCancelingError(error) {\n  return !!error && error[NAVIGATION_CANCELING_ERROR];\n}\n\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\nlet ɵEmptyOutletComponent = /*#__PURE__*/(() => {\n  class ɵEmptyOutletComponent {\n    static {\n      this.ɵfac = function ɵEmptyOutletComponent_Factory(t) {\n        return new (t || ɵEmptyOutletComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: ɵEmptyOutletComponent,\n        selectors: [[\"ng-component\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 1,\n        vars: 0,\n        template: function _EmptyOutletComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelement(0, \"router-outlet\");\n          }\n        },\n        dependencies: [RouterOutlet],\n        encapsulation: 2\n      });\n    }\n  }\n  return ɵEmptyOutletComponent;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Creates an `EnvironmentInjector` if the `Route` has providers and one does not already exist\n * and returns the injector. Otherwise, if the `Route` does not have `providers`, returns the\n * `currentInjector`.\n *\n * @param route The route that might have providers\n * @param currentInjector The parent injector of the `Route`\n */\nfunction getOrCreateRouteInjectorIfNeeded(route, currentInjector) {\n  if (route.providers && !route._injector) {\n    route._injector = createEnvironmentInjector(route.providers, currentInjector, `Route: ${route.path}`);\n  }\n  return route._injector ?? currentInjector;\n}\nfunction getLoadedRoutes(route) {\n  return route._loadedRoutes;\n}\nfunction getLoadedInjector(route) {\n  return route._loadedInjector;\n}\nfunction getLoadedComponent(route) {\n  return route._loadedComponent;\n}\nfunction getProvidersInjector(route) {\n  return route._injector;\n}\nfunction validateConfig(config, parentPath = '', requireStandaloneComponents = false) {\n  // forEach doesn't iterate undefined values\n  for (let i = 0; i < config.length; i++) {\n    const route = config[i];\n    const fullPath = getFullPath(parentPath, route);\n    validateNode(route, fullPath, requireStandaloneComponents);\n  }\n}\nfunction assertStandalone(fullPath, component) {\n  if (component && ɵisNgModule(component)) {\n    throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. You are using 'loadComponent' with a module, ` + `but it must be used with standalone components. Use 'loadChildren' instead.`);\n  } else if (component && !isStandalone(component)) {\n    throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. The component must be standalone.`);\n  }\n}\nfunction validateNode(route, fullPath, requireStandaloneComponents) {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (!route) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n    }\n    if (Array.isArray(route)) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': Array cannot be specified`);\n    }\n    if (!route.redirectTo && !route.component && !route.loadComponent && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n    }\n    if (route.redirectTo && route.children) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n    }\n    if (route.redirectTo && route.loadChildren) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n    }\n    if (route.children && route.loadChildren) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n    }\n    if (route.redirectTo && (route.component || route.loadComponent)) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and component/loadComponent cannot be used together`);\n    }\n    if (route.component && route.loadComponent) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': component and loadComponent cannot be used together`);\n    }\n    if (route.redirectTo && route.canActivate) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation ` + `so canActivate will never be executed.`);\n    }\n    if (route.path && route.matcher) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.loadComponent && !route.children && !route.loadChildren) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, loadComponent, redirectTo, children or loadChildren`);\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n      const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n      throw new ɵRuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n    }\n    if (requireStandaloneComponents) {\n      assertStandalone(fullPath, route.component);\n    }\n  }\n  if (route.children) {\n    validateConfig(route.children, fullPath, requireStandaloneComponents);\n  }\n}\nfunction getFullPath(parentPath, currentRoute) {\n  if (!currentRoute) {\n    return parentPath;\n  }\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nfunction standardizeConfig(r) {\n  const children = r.children && r.children.map(standardizeConfig);\n  const c = children ? {\n    ...r,\n    children\n  } : {\n    ...r\n  };\n  if (!c.component && !c.loadComponent && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {\n    c.component = ɵEmptyOutletComponent;\n  }\n  return c;\n}\n/** Returns the `route.outlet` or PRIMARY_OUTLET if none exists. */\nfunction getOutlet(route) {\n  return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * Sorts the `routes` such that the ones with an outlet matching `outletName` come first.\n * The order of the configs is otherwise preserved.\n */\nfunction sortByMatchingOutlets(routes, outletName) {\n  const sortedConfig = routes.filter(r => getOutlet(r) === outletName);\n  sortedConfig.push(...routes.filter(r => getOutlet(r) !== outletName));\n  return sortedConfig;\n}\n/**\n * Gets the first injector in the snapshot's parent tree.\n *\n * If the `Route` has a static list of providers, the returned injector will be the one created from\n * those. If it does not exist, the returned injector may come from the parents, which may be from a\n * loaded config or their static providers.\n *\n * Returns `null` if there is neither this nor any parents have a stored injector.\n *\n * Generally used for retrieving the injector to use for getting tokens for guards/resolvers and\n * also used for getting the correct injector to use for creating components.\n */\nfunction getClosestRouteInjector(snapshot) {\n  if (!snapshot) return null;\n  // If the current route has its own injector, which is created from the static providers on the\n  // route itself, we should use that. Otherwise, we start at the parent since we do not want to\n  // include the lazy loaded injector from this route.\n  if (snapshot.routeConfig?._injector) {\n    return snapshot.routeConfig._injector;\n  }\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    // Note that the order here is important. `_loadedInjector` stored on the route with\n    // `loadChildren: () => NgModule` so it applies to child routes with priority. The `_injector`\n    // is created from the static providers on that parent route, so it applies to the children as\n    // well, but only if there is no lazy loaded NgModuleRef injector.\n    if (route?._loadedInjector) return route._loadedInjector;\n    if (route?._injector) return route._injector;\n  }\n  return null;\n}\nlet warnedAboutUnsupportedInputBinding = false;\nconst activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent, inputBindingEnabled) => map(t => {\n  new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent, inputBindingEnabled).activate(rootContexts);\n  return t;\n});\nclass ActivateRoutes {\n  constructor(routeReuseStrategy, futureState, currState, forwardEvent, inputBindingEnabled) {\n    this.routeReuseStrategy = routeReuseStrategy;\n    this.futureState = futureState;\n    this.currState = currState;\n    this.forwardEvent = forwardEvent;\n    this.inputBindingEnabled = inputBindingEnabled;\n  }\n  activate(parentContexts) {\n    const futureRoot = this.futureState._root;\n    const currRoot = this.currState ? this.currState._root : null;\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  }\n  // De-activate the child route that are not re-used for the future state\n  deactivateChildRoutes(futureNode, currNode, contexts) {\n    const children = nodeChildrenAsMap(currNode);\n    // Recurse on the routes active in the future state to de-activate deeper children\n    futureNode.children.forEach(futureChild => {\n      const childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    });\n    // De-activate the routes that will not be re-used\n    Object.values(children).forEach(v => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n  deactivateRoutes(futureNode, currNode, parentContext) {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContext.getContext(future.outlet);\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n  deactivateRouteAndItsChildren(route, parentContexts) {\n    // If there is no component, the Route is never attached to an outlet (because there is no\n    // component to attach).\n    if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n  detachAndStoreRouteSubtree(route, parentContexts) {\n    const context = parentContexts.getContext(route.value.outlet);\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children = nodeChildrenAsMap(route);\n    for (const treeNode of Object.values(children)) {\n      this.deactivateRouteAndItsChildren(treeNode, contexts);\n    }\n    if (context && context.outlet) {\n      const componentRef = context.outlet.detach();\n      const contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {\n        componentRef,\n        route,\n        contexts\n      });\n    }\n  }\n  deactivateRouteAndOutlet(route, parentContexts) {\n    const context = parentContexts.getContext(route.value.outlet);\n    // The context could be `null` if we are on a componentless route but there may still be\n    // children that need deactivating.\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children = nodeChildrenAsMap(route);\n    for (const treeNode of Object.values(children)) {\n      this.deactivateRouteAndItsChildren(treeNode, contexts);\n    }\n    if (context) {\n      if (context.outlet) {\n        // Destroy the component\n        context.outlet.deactivate();\n        // Destroy the contexts for all the outlets that were in the component\n        context.children.onOutletDeactivated();\n      }\n      // Clear the information about the attached component on the context but keep the reference to\n      // the outlet. Clear even if outlet was not yet activated to avoid activating later with old\n      // info\n      context.attachRef = null;\n      context.route = null;\n    }\n  }\n  activateChildRoutes(futureNode, currNode, contexts) {\n    const children = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.activateRoutes(c, children[c.value.outlet], contexts);\n      this.forwardEvent(new ActivationEnd(c.value.snapshot));\n    });\n    if (futureNode.children.length) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n    }\n  }\n  activateRoutes(futureNode, currNode, parentContexts) {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n    advanceActivatedRoute(future);\n    // reusing the node\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const stored = this.routeReuseStrategy.retrieve(future.snapshot);\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n          advanceActivatedRoute(stored.route.value);\n          this.activateChildRoutes(futureNode, null, context.children);\n        } else {\n          const injector = getClosestRouteInjector(future.snapshot);\n          context.attachRef = null;\n          context.route = future;\n          context.injector = injector;\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, context.injector);\n          }\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const context = parentContexts.getOrCreateContext(future.outlet);\n      const outlet = context.outlet;\n      if (outlet && this.inputBindingEnabled && !outlet.supportsBindingToComponentInputs && !warnedAboutUnsupportedInputBinding) {\n        console.warn(`'withComponentInputBinding' feature is enabled but ` + `this application is using an outlet that may not support binding to component inputs.`);\n        warnedAboutUnsupportedInputBinding = true;\n      }\n    }\n  }\n}\nclass CanActivate {\n  constructor(path) {\n    this.path = path;\n    this.route = this.path[this.path.length - 1];\n  }\n}\nclass CanDeactivate {\n  constructor(component, route) {\n    this.component = component;\n    this.route = route;\n  }\n}\nfunction getAllRouteGuards(future, curr, parentContexts) {\n  const futureRoot = future._root;\n  const currRoot = curr ? curr._root : null;\n  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\nfunction getCanActivateChild(p) {\n  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n  if (!canActivateChild || canActivateChild.length === 0) return null;\n  return {\n    node: p,\n    guards: canActivateChild\n  };\n}\nfunction getTokenOrFunctionIdentity(tokenOrFunction, injector) {\n  const NOT_FOUND = Symbol();\n  const result = injector.get(tokenOrFunction, NOT_FOUND);\n  if (result === NOT_FOUND) {\n    if (typeof tokenOrFunction === 'function' && !ɵisInjectable(tokenOrFunction)) {\n      // We think the token is just a function so return it as-is\n      return tokenOrFunction;\n    } else {\n      // This will throw the not found error\n      return injector.get(tokenOrFunction);\n    }\n  }\n  return result;\n}\nfunction getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {\n  canDeactivateChecks: [],\n  canActivateChecks: []\n}) {\n  const prevChildren = nodeChildrenAsMap(currNode);\n  // Process the children of the future route\n  futureNode.children.forEach(c => {\n    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n    delete prevChildren[c.value.outlet];\n  });\n  // Process any children left from the current route (not active for the future route)\n  Object.entries(prevChildren).forEach(([k, v]) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));\n  return checks;\n}\nfunction getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {\n  canDeactivateChecks: [],\n  canActivateChecks: []\n}) {\n  const future = futureNode.value;\n  const curr = currNode ? currNode.value : null;\n  const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n  // reusing the node\n  if (curr && future.routeConfig === curr.routeConfig) {\n    const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);\n    if (shouldRun) {\n      checks.canActivateChecks.push(new CanActivate(futurePath));\n    } else {\n      // we need to set the data\n      future.data = curr.data;\n      future._resolvedData = curr._resolvedData;\n    }\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n    }\n    if (shouldRun && context && context.outlet && context.outlet.isActivated) {\n      checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));\n    }\n  } else {\n    if (curr) {\n      deactivateRouteAndItsChildren(currNode, context, checks);\n    }\n    checks.canActivateChecks.push(new CanActivate(futurePath));\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n    }\n  }\n  return checks;\n}\nfunction shouldRunGuardsAndResolvers(curr, future, mode) {\n  if (typeof mode === 'function') {\n    return mode(curr, future);\n  }\n  switch (mode) {\n    case 'pathParamsChange':\n      return !equalPath(curr.url, future.url);\n    case 'pathParamsOrQueryParamsChange':\n      return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);\n    case 'always':\n      return true;\n    case 'paramsOrQueryParamsChange':\n      return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);\n    case 'paramsChange':\n    default:\n      return !equalParamsAndUrlSegments(curr, future);\n  }\n}\nfunction deactivateRouteAndItsChildren(route, context, checks) {\n  const children = nodeChildrenAsMap(route);\n  const r = route.value;\n  Object.entries(children).forEach(([childName, node]) => {\n    if (!r.component) {\n      deactivateRouteAndItsChildren(node, context, checks);\n    } else if (context) {\n      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n    } else {\n      deactivateRouteAndItsChildren(node, null, checks);\n    }\n  });\n  if (!r.component) {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  } else if (context && context.outlet && context.outlet.isActivated) {\n    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n  } else {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  }\n}\n\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nfunction isFunction(v) {\n  return typeof v === 'function';\n}\nfunction isBoolean(v) {\n  return typeof v === 'boolean';\n}\nfunction isCanLoad(guard) {\n  return guard && isFunction(guard.canLoad);\n}\nfunction isCanActivate(guard) {\n  return guard && isFunction(guard.canActivate);\n}\nfunction isCanActivateChild(guard) {\n  return guard && isFunction(guard.canActivateChild);\n}\nfunction isCanDeactivate(guard) {\n  return guard && isFunction(guard.canDeactivate);\n}\nfunction isCanMatch(guard) {\n  return guard && isFunction(guard.canMatch);\n}\nfunction isEmptyError(e) {\n  return e instanceof EmptyError || e?.name === 'EmptyError';\n}\nconst INITIAL_VALUE = /* @__PURE__ */Symbol('INITIAL_VALUE');\nfunction prioritizedGuardValue() {\n  return switchMap(obs => {\n    return combineLatest(obs.map(o => o.pipe(take(1), startWith(INITIAL_VALUE)))).pipe(map(results => {\n      for (const result of results) {\n        if (result === true) {\n          // If result is true, check the next one\n          continue;\n        } else if (result === INITIAL_VALUE) {\n          // If guard has not finished, we need to stop processing.\n          return INITIAL_VALUE;\n        } else if (result === false || result instanceof UrlTree) {\n          // Result finished and was not true. Return the result.\n          // Note that we only allow false/UrlTree. Other values are considered invalid and\n          // ignored.\n          return result;\n        }\n      }\n      // Everything resolved to true. Return true.\n      return true;\n    }), filter(item => item !== INITIAL_VALUE), take(1));\n  });\n}\nfunction checkGuards(injector, forwardEvent) {\n  return mergeMap(t => {\n    const {\n      targetSnapshot,\n      currentSnapshot,\n      guards: {\n        canActivateChecks,\n        canDeactivateChecks\n      }\n    } = t;\n    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n      return of({\n        ...t,\n        guardsResult: true\n      });\n    }\n    return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, injector).pipe(mergeMap(canDeactivate => {\n      return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, injector, forwardEvent) : of(canDeactivate);\n    }), map(guardsResult => ({\n      ...t,\n      guardsResult\n    })));\n  });\n}\nfunction runCanDeactivateChecks(checks, futureRSS, currRSS, injector) {\n  return from(checks).pipe(mergeMap(check => runCanDeactivate(check.component, check.route, currRSS, futureRSS, injector)), first(result => {\n    return result !== true;\n  }, true));\n}\nfunction runCanActivateChecks(futureSnapshot, checks, injector, forwardEvent) {\n  return from(checks).pipe(concatMap(check => {\n    return concat(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, injector), runCanActivate(futureSnapshot, check.route, injector));\n  }), first(result => {\n    return result !== true;\n  }, true));\n}\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireActivationStart(snapshot, forwardEvent) {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ActivationStart(snapshot));\n  }\n  return of(true);\n}\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireChildActivationStart(snapshot, forwardEvent) {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ChildActivationStart(snapshot));\n  }\n  return of(true);\n}\nfunction runCanActivate(futureRSS, futureARS, injector) {\n  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n  if (!canActivate || canActivate.length === 0) return of(true);\n  const canActivateObservables = canActivate.map(canActivate => {\n    return defer(() => {\n      const closestInjector = getClosestRouteInjector(futureARS) ?? injector;\n      const guard = getTokenOrFunctionIdentity(canActivate, closestInjector);\n      const guardVal = isCanActivate(guard) ? guard.canActivate(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));\n      return wrapIntoObservable(guardVal).pipe(first());\n    });\n  });\n  return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\nfunction runCanActivateChild(futureRSS, path, injector) {\n  const futureARS = path[path.length - 1];\n  const canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(p => getCanActivateChild(p)).filter(_ => _ !== null);\n  const canActivateChildGuardsMapped = canActivateChildGuards.map(d => {\n    return defer(() => {\n      const guardsMapped = d.guards.map(canActivateChild => {\n        const closestInjector = getClosestRouteInjector(d.node) ?? injector;\n        const guard = getTokenOrFunctionIdentity(canActivateChild, closestInjector);\n        const guardVal = isCanActivateChild(guard) ? guard.canActivateChild(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));\n        return wrapIntoObservable(guardVal).pipe(first());\n      });\n      return of(guardsMapped).pipe(prioritizedGuardValue());\n    });\n  });\n  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\nfunction runCanDeactivate(component, currARS, currRSS, futureRSS, injector) {\n  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n  if (!canDeactivate || canDeactivate.length === 0) return of(true);\n  const canDeactivateObservables = canDeactivate.map(c => {\n    const closestInjector = getClosestRouteInjector(currARS) ?? injector;\n    const guard = getTokenOrFunctionIdentity(c, closestInjector);\n    const guardVal = isCanDeactivate(guard) ? guard.canDeactivate(component, currARS, currRSS, futureRSS) : runInInjectionContext(closestInjector, () => guard(component, currARS, currRSS, futureRSS));\n    return wrapIntoObservable(guardVal).pipe(first());\n  });\n  return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\nfunction runCanLoadGuards(injector, route, segments, urlSerializer) {\n  const canLoad = route.canLoad;\n  if (canLoad === undefined || canLoad.length === 0) {\n    return of(true);\n  }\n  const canLoadObservables = canLoad.map(injectionToken => {\n    const guard = getTokenOrFunctionIdentity(injectionToken, injector);\n    const guardVal = isCanLoad(guard) ? guard.canLoad(route, segments) : runInInjectionContext(injector, () => guard(route, segments));\n    return wrapIntoObservable(guardVal);\n  });\n  return of(canLoadObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));\n}\nfunction redirectIfUrlTree(urlSerializer) {\n  return pipe(tap(result => {\n    if (!isUrlTree(result)) return;\n    throw redirectingNavigationError(urlSerializer, result);\n  }), map(result => result === true));\n}\nfunction runCanMatchGuards(injector, route, segments, urlSerializer) {\n  const canMatch = route.canMatch;\n  if (!canMatch || canMatch.length === 0) return of(true);\n  const canMatchObservables = canMatch.map(injectionToken => {\n    const guard = getTokenOrFunctionIdentity(injectionToken, injector);\n    const guardVal = isCanMatch(guard) ? guard.canMatch(route, segments) : runInInjectionContext(injector, () => guard(route, segments));\n    return wrapIntoObservable(guardVal);\n  });\n  return of(canMatchObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));\n}\nclass NoMatch {\n  constructor(segmentGroup) {\n    this.segmentGroup = segmentGroup || null;\n  }\n}\nclass AbsoluteRedirect extends Error {\n  constructor(urlTree) {\n    super();\n    this.urlTree = urlTree;\n  }\n}\nfunction noMatch$1(segmentGroup) {\n  return throwError(new NoMatch(segmentGroup));\n}\nfunction absoluteRedirect(newTree) {\n  return throwError(new AbsoluteRedirect(newTree));\n}\nfunction namedOutletsRedirect(redirectTo) {\n  return throwError(new ɵRuntimeError(4000 /* RuntimeErrorCode.NAMED_OUTLET_REDIRECT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`));\n}\nfunction canLoadFails(route) {\n  return throwError(navigationCancelingError((typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`, NavigationCancellationCode.GuardRejected));\n}\nclass ApplyRedirects {\n  constructor(urlSerializer, urlTree) {\n    this.urlSerializer = urlSerializer;\n    this.urlTree = urlTree;\n  }\n  lineralizeSegments(route, urlTree) {\n    let res = [];\n    let c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of(res);\n      }\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(route.redirectTo);\n      }\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n  applyRedirectCommands(segments, redirectTo, posParams) {\n    const newTree = this.applyRedirectCreateUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n    if (redirectTo.startsWith('/')) {\n      throw new AbsoluteRedirect(newTree);\n    }\n    return newTree;\n  }\n  applyRedirectCreateUrlTree(redirectTo, urlTree, segments, posParams) {\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n  }\n  createQueryParams(redirectToParams, actualParams) {\n    const res = {};\n    Object.entries(redirectToParams).forEach(([k, v]) => {\n      const copySourceValue = typeof v === 'string' && v.startsWith(':');\n      if (copySourceValue) {\n        const sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n  createSegmentGroup(redirectTo, group, segments, posParams) {\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n    let children = {};\n    Object.entries(group.children).forEach(([name, child]) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n  createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {\n    return redirectToSegments.map(s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) : this.findOrReturn(s, actualSegments));\n  }\n  findPosParam(redirectTo, redirectToUrlSegment, posParams) {\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos) throw new ɵRuntimeError(4001 /* RuntimeErrorCode.MISSING_REDIRECT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n  findOrReturn(redirectToUrlSegment, actualSegments) {\n    let idx = 0;\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\nconst noMatch = {\n  matched: false,\n  consumedSegments: [],\n  remainingSegments: [],\n  parameters: {},\n  positionalParamSegments: {}\n};\nfunction matchWithChecks(segmentGroup, route, segments, injector, urlSerializer) {\n  const result = match(segmentGroup, route, segments);\n  if (!result.matched) {\n    return of(result);\n  }\n  // Only create the Route's `EnvironmentInjector` if it matches the attempted\n  // navigation\n  injector = getOrCreateRouteInjectorIfNeeded(route, injector);\n  return runCanMatchGuards(injector, route, segments, urlSerializer).pipe(map(v => v === true ? result : {\n    ...noMatch\n  }));\n}\nfunction match(segmentGroup, route, segments) {\n  if (route.path === '**') {\n    return createWildcardMatchResult(segments);\n  }\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {\n        ...noMatch\n      };\n    }\n    return {\n      matched: true,\n      consumedSegments: [],\n      remainingSegments: segments,\n      parameters: {},\n      positionalParamSegments: {}\n    };\n  }\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n  if (!res) return {\n    ...noMatch\n  };\n  const posParams = {};\n  Object.entries(res.posParams ?? {}).forEach(([k, v]) => {\n    posParams[k] = v.path;\n  });\n  const parameters = res.consumed.length > 0 ? {\n    ...posParams,\n    ...res.consumed[res.consumed.length - 1].parameters\n  } : posParams;\n  return {\n    matched: true,\n    consumedSegments: res.consumed,\n    remainingSegments: segments.slice(res.consumed.length),\n    // TODO(atscott): investigate combining parameters and positionalParamSegments\n    parameters,\n    positionalParamSegments: res.posParams ?? {}\n  };\n}\nfunction createWildcardMatchResult(segments) {\n  return {\n    matched: true,\n    parameters: segments.length > 0 ? last(segments).parameters : {},\n    consumedSegments: segments,\n    remainingSegments: [],\n    positionalParamSegments: {}\n  };\n}\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n  if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {\n      segmentGroup: s,\n      slicedSegments: []\n    };\n  }\n  if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {\n      segmentGroup: s,\n      slicedSegments\n    };\n  }\n  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  return {\n    segmentGroup: s,\n    slicedSegments\n  };\n}\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n  const res = {};\n  for (const r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const s = new UrlSegmentGroup([], {});\n      res[getOutlet(r)] = s;\n    }\n  }\n  return {\n    ...children,\n    ...res\n  };\n}\nfunction createChildrenForEmptyPaths(routes, primarySegment) {\n  const res = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const s = new UrlSegmentGroup([], {});\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n  return r.path === '';\n}\n/**\n * Determines if `route` is a path match for the `rawSegment`, `segments`, and `outlet` without\n * verifying that its children are a full match for the remainder of the `rawSegment` children as\n * well.\n */\nfunction isImmediateMatch(route, rawSegment, segments, outlet) {\n  // We allow matches to empty paths when the outlets differ so we can match a url like `/(b:b)` to\n  // a config like\n  // * `{path: '', children: [{path: 'b', outlet: 'b'}]}`\n  // or even\n  // * `{path: '', outlet: 'a', children: [{path: 'b', outlet: 'b'}]`\n  //\n  // The exception here is when the segment outlet is for the primary outlet. This would\n  // result in a match inside the named outlet because all children there are written as primary\n  // outlets. So we need to prevent child named outlet matches in a url like `/b` in a config like\n  // * `{path: '', outlet: 'x' children: [{path: 'b'}]}`\n  // This should only match if the url is `/(x:b)`.\n  if (getOutlet(route) !== outlet && (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {\n    return false;\n  }\n  return match(rawSegment, route, segments).matched;\n}\nfunction noLeftoversInUrl(segmentGroup, segments, outlet) {\n  return segments.length === 0 && !segmentGroup.children[outlet];\n}\n\n/**\n * Class used to indicate there were no additional route config matches but that all segments of\n * the URL were consumed during matching so the route was URL matched. When this happens, we still\n * try to match child configs in case there are empty path children.\n */\nclass NoLeftoversInUrl {}\nfunction recognize$1(injector, configLoader, rootComponentType, config, urlTree, urlSerializer, paramsInheritanceStrategy = 'emptyOnly') {\n  return new Recognizer(injector, configLoader, rootComponentType, config, urlTree, paramsInheritanceStrategy, urlSerializer).recognize();\n}\nconst MAX_ALLOWED_REDIRECTS = 31;\nclass Recognizer {\n  constructor(injector, configLoader, rootComponentType, config, urlTree, paramsInheritanceStrategy, urlSerializer) {\n    this.injector = injector;\n    this.configLoader = configLoader;\n    this.rootComponentType = rootComponentType;\n    this.config = config;\n    this.urlTree = urlTree;\n    this.paramsInheritanceStrategy = paramsInheritanceStrategy;\n    this.urlSerializer = urlSerializer;\n    this.applyRedirects = new ApplyRedirects(this.urlSerializer, this.urlTree);\n    this.absoluteRedirectCount = 0;\n    this.allowRedirects = true;\n  }\n  noMatchError(e) {\n    return new ɵRuntimeError(4002 /* RuntimeErrorCode.NO_MATCH */, typeof ngDevMode === 'undefined' || ngDevMode ? `Cannot match any routes. URL Segment: '${e.segmentGroup}'` : `'${e.segmentGroup}'`);\n  }\n  recognize() {\n    const rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n    return this.match(rootSegmentGroup).pipe(map(children => {\n      // Use Object.freeze to prevent readers of the Router state from modifying it outside\n      // of a navigation, resulting in the router being out of sync with the browser.\n      const root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze({\n        ...this.urlTree.queryParams\n      }), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, {});\n      const rootNode = new TreeNode(root, children);\n      const routeState = new RouterStateSnapshot('', rootNode);\n      const tree = createUrlTreeFromSnapshot(root, [], this.urlTree.queryParams, this.urlTree.fragment);\n      // https://github.com/angular/angular/issues/47307\n      // Creating the tree stringifies the query params\n      // We don't want to do this here so reassign them to the original.\n      tree.queryParams = this.urlTree.queryParams;\n      routeState.url = this.urlSerializer.serialize(tree);\n      this.inheritParamsAndData(routeState._root, null);\n      return {\n        state: routeState,\n        tree\n      };\n    }));\n  }\n  match(rootSegmentGroup) {\n    const expanded$ = this.processSegmentGroup(this.injector, this.config, rootSegmentGroup, PRIMARY_OUTLET);\n    return expanded$.pipe(catchError(e => {\n      if (e instanceof AbsoluteRedirect) {\n        this.urlTree = e.urlTree;\n        return this.match(e.urlTree.root);\n      }\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n      throw e;\n    }));\n  }\n  inheritParamsAndData(routeNode, parent) {\n    const route = routeNode.value;\n    const i = getInherited(route, parent, this.paramsInheritanceStrategy);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n    routeNode.children.forEach(n => this.inheritParamsAndData(n, route));\n  }\n  processSegmentGroup(injector, config, segmentGroup, outlet) {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(injector, config, segmentGroup);\n    }\n    return this.processSegment(injector, config, segmentGroup, segmentGroup.segments, outlet, true).pipe(map(child => child instanceof TreeNode ? [child] : []));\n  }\n  /**\n   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if\n   * we cannot find a match for _any_ of the children.\n   *\n   * @param config - The `Routes` to match against\n   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the\n   *     config.\n   */\n  processChildren(injector, config, segmentGroup) {\n    // Expand outlets one at a time, starting with the primary outlet. We need to do it this way\n    // because an absolute redirect from the primary outlet takes precedence.\n    const childOutlets = [];\n    for (const child of Object.keys(segmentGroup.children)) {\n      if (child === 'primary') {\n        childOutlets.unshift(child);\n      } else {\n        childOutlets.push(child);\n      }\n    }\n    return from(childOutlets).pipe(concatMap(childOutlet => {\n      const child = segmentGroup.children[childOutlet];\n      // Sort the config so that routes with outlets that match the one being activated\n      // appear first, followed by routes for other outlets, which might match if they have\n      // an empty path.\n      const sortedConfig = sortByMatchingOutlets(config, childOutlet);\n      return this.processSegmentGroup(injector, sortedConfig, child, childOutlet);\n    }), scan((children, outletChildren) => {\n      children.push(...outletChildren);\n      return children;\n    }), defaultIfEmpty(null), last$1(), mergeMap(children => {\n      if (children === null) return noMatch$1(segmentGroup);\n      // Because we may have matched two outlets to the same empty path segment, we can have\n      // multiple activated results for the same outlet. We should merge the children of\n      // these results so the final return value is only one `TreeNode` per outlet.\n      const mergedChildren = mergeEmptyPathMatches(children);\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // This should really never happen - we are only taking the first match for each\n        // outlet and merge the empty path matches.\n        checkOutletNameUniqueness(mergedChildren);\n      }\n      sortActivatedRouteSnapshots(mergedChildren);\n      return of(mergedChildren);\n    }));\n  }\n  processSegment(injector, routes, segmentGroup, segments, outlet, allowRedirects) {\n    return from(routes).pipe(concatMap(r => {\n      return this.processSegmentAgainstRoute(r._injector ?? injector, routes, r, segmentGroup, segments, outlet, allowRedirects).pipe(catchError(e => {\n        if (e instanceof NoMatch) {\n          return of(null);\n        }\n        throw e;\n      }));\n    }), first(x => !!x), catchError(e => {\n      if (isEmptyError(e)) {\n        if (noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of(new NoLeftoversInUrl());\n        }\n        return noMatch$1(segmentGroup);\n      }\n      throw e;\n    }));\n  }\n  processSegmentAgainstRoute(injector, routes, route, rawSegment, segments, outlet, allowRedirects) {\n    if (!isImmediateMatch(route, rawSegment, segments, outlet)) return noMatch$1(rawSegment);\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet);\n    }\n    if (this.allowRedirects && allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(injector, rawSegment, routes, route, segments, outlet);\n    }\n    return noMatch$1(rawSegment);\n  }\n  expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet) {\n    const {\n      matched,\n      consumedSegments,\n      positionalParamSegments,\n      remainingSegments\n    } = match(segmentGroup, route, segments);\n    if (!matched) return noMatch$1(segmentGroup);\n    // TODO(atscott): Move all of this under an if(ngDevMode) as a breaking change and allow stack\n    // size exceeded in production\n    if (route.redirectTo.startsWith('/')) {\n      this.absoluteRedirectCount++;\n      if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {\n        if (ngDevMode) {\n          throw new ɵRuntimeError(4016 /* RuntimeErrorCode.INFINITE_REDIRECT */, `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.\\n` + `This is currently a dev mode only error but will become a` + ` call stack size exceeded error in production in a future major version.`);\n        }\n        this.allowRedirects = false;\n      }\n    }\n    const newTree = this.applyRedirects.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);\n    return this.applyRedirects.lineralizeSegments(route, newTree).pipe(mergeMap(newSegments => {\n      return this.processSegment(injector, routes, segmentGroup, newSegments.concat(remainingSegments), outlet, false);\n    }));\n  }\n  matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet) {\n    const matchResult = matchWithChecks(rawSegment, route, segments, injector, this.urlSerializer);\n    if (route.path === '**') {\n      // Prior versions of the route matching algorithm would stop matching at the wildcard route.\n      // We should investigate a better strategy for any existing children. Otherwise, these\n      // child segments are silently dropped from the navigation.\n      // https://github.com/angular/angular/issues/40089\n      rawSegment.children = {};\n    }\n    return matchResult.pipe(switchMap(result => {\n      if (!result.matched) {\n        return noMatch$1(rawSegment);\n      }\n      // If the route has an injector created from providers, we should start using that.\n      injector = route._injector ?? injector;\n      return this.getChildConfig(injector, route, segments).pipe(switchMap(({\n        routes: childConfig\n      }) => {\n        const childInjector = route._loadedInjector ?? injector;\n        const {\n          consumedSegments,\n          remainingSegments,\n          parameters\n        } = result;\n        const snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze({\n          ...this.urlTree.queryParams\n        }), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));\n        const {\n          segmentGroup,\n          slicedSegments\n        } = split(rawSegment, consumedSegments, remainingSegments, childConfig);\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n          return this.processChildren(childInjector, childConfig, segmentGroup).pipe(map(children => {\n            if (children === null) {\n              return null;\n            }\n            return new TreeNode(snapshot, children);\n          }));\n        }\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\n          return of(new TreeNode(snapshot, []));\n        }\n        const matchedOnOutlet = getOutlet(route) === outlet;\n        // If we matched a config due to empty path match on a different outlet, we need to\n        // continue passing the current outlet for the segment rather than switch to PRIMARY.\n        // Note that we switch to primary when we have a match because outlet configs look like\n        // this: {path: 'a', outlet: 'a', children: [\n        //  {path: 'b', component: B},\n        //  {path: 'c', component: C},\n        // ]}\n        // Notice that the children of the named outlet are configured with the primary outlet\n        return this.processSegment(childInjector, childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true).pipe(map(child => {\n          return new TreeNode(snapshot, child instanceof TreeNode ? [child] : []);\n        }));\n      }));\n    }));\n  }\n  getChildConfig(injector, route, segments) {\n    if (route.children) {\n      // The children belong to the same module\n      return of({\n        routes: route.children,\n        injector\n      });\n    }\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedRoutes !== undefined) {\n        return of({\n          routes: route._loadedRoutes,\n          injector: route._loadedInjector\n        });\n      }\n      return runCanLoadGuards(injector, route, segments, this.urlSerializer).pipe(mergeMap(shouldLoadResult => {\n        if (shouldLoadResult) {\n          return this.configLoader.loadChildren(injector, route).pipe(tap(cfg => {\n            route._loadedRoutes = cfg.routes;\n            route._loadedInjector = cfg.injector;\n          }));\n        }\n        return canLoadFails(route);\n      }));\n    }\n    return of({\n      routes: [],\n      injector\n    });\n  }\n}\nfunction sortActivatedRouteSnapshots(nodes) {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\nfunction hasEmptyPathConfig(node) {\n  const config = node.value.routeConfig;\n  return config && config.path === '';\n}\n/**\n * Finds `TreeNode`s with matching empty path route configs and merges them into `TreeNode` with\n * the children from each duplicate. This is necessary because different outlets can match a\n * single empty path route config and the results need to then be merged.\n */\nfunction mergeEmptyPathMatches(nodes) {\n  const result = [];\n  // The set of nodes which contain children that were merged from two duplicate empty path nodes.\n  const mergedNodes = new Set();\n  for (const node of nodes) {\n    if (!hasEmptyPathConfig(node)) {\n      result.push(node);\n      continue;\n    }\n    const duplicateEmptyPathNode = result.find(resultNode => node.value.routeConfig === resultNode.value.routeConfig);\n    if (duplicateEmptyPathNode !== undefined) {\n      duplicateEmptyPathNode.children.push(...node.children);\n      mergedNodes.add(duplicateEmptyPathNode);\n    } else {\n      result.push(node);\n    }\n  }\n  // For each node which has children from multiple sources, we need to recompute a new `TreeNode`\n  // by also merging those children. This is necessary when there are multiple empty path configs\n  // in a row. Put another way: whenever we combine children of two nodes, we need to also check\n  // if any of those children can be combined into a single node as well.\n  for (const mergedNode of mergedNodes) {\n    const mergedChildren = mergeEmptyPathMatches(mergedNode.children);\n    result.push(new TreeNode(mergedNode.value, mergedChildren));\n  }\n  return result.filter(n => !mergedNodes.has(n));\n}\nfunction checkOutletNameUniqueness(nodes) {\n  const names = {};\n  nodes.forEach(n => {\n    const routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const c = n.value.url.map(s => s.toString()).join('/');\n      throw new ɵRuntimeError(4006 /* RuntimeErrorCode.TWO_SEGMENTS_WITH_SAME_OUTLET */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\nfunction getData(route) {\n  return route.data || {};\n}\nfunction getResolve(route) {\n  return route.resolve || {};\n}\nfunction recognize(injector, configLoader, rootComponentType, config, serializer, paramsInheritanceStrategy) {\n  return mergeMap(t => recognize$1(injector, configLoader, rootComponentType, config, t.extractedUrl, serializer, paramsInheritanceStrategy).pipe(map(({\n    state: targetSnapshot,\n    tree: urlAfterRedirects\n  }) => {\n    return {\n      ...t,\n      targetSnapshot,\n      urlAfterRedirects\n    };\n  })));\n}\nfunction resolveData(paramsInheritanceStrategy, injector) {\n  return mergeMap(t => {\n    const {\n      targetSnapshot,\n      guards: {\n        canActivateChecks\n      }\n    } = t;\n    if (!canActivateChecks.length) {\n      return of(t);\n    }\n    // Iterating a Set in javascript  happens in insertion order so it is safe to use a `Set` to\n    // preserve the correct order that the resolvers should run in.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#description\n    const routesWithResolversToRun = new Set(canActivateChecks.map(check => check.route));\n    const routesNeedingDataUpdates = new Set();\n    for (const route of routesWithResolversToRun) {\n      if (routesNeedingDataUpdates.has(route)) {\n        continue;\n      }\n      // All children under the route with a resolver to run need to recompute inherited data.\n      for (const newRoute of flattenRouteTree(route)) {\n        routesNeedingDataUpdates.add(newRoute);\n      }\n    }\n    let routesProcessed = 0;\n    return from(routesNeedingDataUpdates).pipe(concatMap(route => {\n      if (routesWithResolversToRun.has(route)) {\n        return runResolve(route, targetSnapshot, paramsInheritanceStrategy, injector);\n      } else {\n        route.data = getInherited(route, route.parent, paramsInheritanceStrategy).resolve;\n        return of(void 0);\n      }\n    }), tap(() => routesProcessed++), takeLast(1), mergeMap(_ => routesProcessed === routesNeedingDataUpdates.size ? of(t) : EMPTY));\n  });\n}\n/**\n *  Returns the `ActivatedRouteSnapshot` tree as an array, using DFS to traverse the route tree.\n */\nfunction flattenRouteTree(route) {\n  const descendants = route.children.map(child => flattenRouteTree(child)).flat();\n  return [route, ...descendants];\n}\nfunction runResolve(futureARS, futureRSS, paramsInheritanceStrategy, injector) {\n  const config = futureARS.routeConfig;\n  const resolve = futureARS._resolve;\n  if (config?.title !== undefined && !hasStaticTitle(config)) {\n    resolve[RouteTitleKey] = config.title;\n  }\n  return resolveNode(resolve, futureARS, futureRSS, injector).pipe(map(resolvedData => {\n    futureARS._resolvedData = resolvedData;\n    futureARS.data = getInherited(futureARS, futureARS.parent, paramsInheritanceStrategy).resolve;\n    return null;\n  }));\n}\nfunction resolveNode(resolve, futureARS, futureRSS, injector) {\n  const keys = getDataKeys(resolve);\n  if (keys.length === 0) {\n    return of({});\n  }\n  const data = {};\n  return from(keys).pipe(mergeMap(key => getResolver(resolve[key], futureARS, futureRSS, injector).pipe(first(), tap(value => {\n    data[key] = value;\n  }))), takeLast(1), mapTo(data), catchError(e => isEmptyError(e) ? EMPTY : throwError(e)));\n}\nfunction getResolver(injectionToken, futureARS, futureRSS, injector) {\n  const closestInjector = getClosestRouteInjector(futureARS) ?? injector;\n  const resolver = getTokenOrFunctionIdentity(injectionToken, closestInjector);\n  const resolverValue = resolver.resolve ? resolver.resolve(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => resolver(futureARS, futureRSS));\n  return wrapIntoObservable(resolverValue);\n}\n\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n */\nfunction switchTap(next) {\n  return switchMap(v => {\n    const nextResult = next(v);\n    if (nextResult) {\n      return from(nextResult).pipe(map(() => v));\n    }\n    return of(v);\n  });\n}\n\n/**\n * Provides a strategy for setting the page title after a router navigation.\n *\n * The built-in implementation traverses the router state snapshot and finds the deepest primary\n * outlet with `title` property. Given the `Routes` below, navigating to\n * `/base/child(popup:aux)` would result in the document title being set to \"child\".\n * ```\n * [\n *   {path: 'base', title: 'base', children: [\n *     {path: 'child', title: 'child'},\n *   ],\n *   {path: 'aux', outlet: 'popup', title: 'popupTitle'}\n * ]\n * ```\n *\n * This class can be used as a base class for custom title strategies. That is, you can create your\n * own class that extends the `TitleStrategy`. Note that in the above example, the `title`\n * from the named outlet is never used. However, a custom strategy might be implemented to\n * incorporate titles in named outlets.\n *\n * @publicApi\n * @see [Page title guide](guide/router#setting-the-page-title)\n */\nlet TitleStrategy = /*#__PURE__*/(() => {\n  class TitleStrategy {\n    /**\n     * @returns The `title` of the deepest primary route.\n     */\n    buildTitle(snapshot) {\n      let pageTitle;\n      let route = snapshot.root;\n      while (route !== undefined) {\n        pageTitle = this.getResolvedTitleForRoute(route) ?? pageTitle;\n        route = route.children.find(child => child.outlet === PRIMARY_OUTLET);\n      }\n      return pageTitle;\n    }\n    /**\n     * Given an `ActivatedRouteSnapshot`, returns the final value of the\n     * `Route.title` property, which can either be a static string or a resolved value.\n     */\n    getResolvedTitleForRoute(snapshot) {\n      return snapshot.data[RouteTitleKey];\n    }\n    static {\n      this.ɵfac = function TitleStrategy_Factory(t) {\n        return new (t || TitleStrategy)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: TitleStrategy,\n        factory: () => (() => inject(DefaultTitleStrategy))(),\n        providedIn: 'root'\n      });\n    }\n  }\n  return TitleStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The default `TitleStrategy` used by the router that updates the title using the `Title` service.\n */\nlet DefaultTitleStrategy = /*#__PURE__*/(() => {\n  class DefaultTitleStrategy extends TitleStrategy {\n    constructor(title) {\n      super();\n      this.title = title;\n    }\n    /**\n     * Sets the title of the browser to the given value.\n     *\n     * @param title The `pageTitle` from the deepest primary route.\n     */\n    updateTitle(snapshot) {\n      const title = this.buildTitle(snapshot);\n      if (title !== undefined) {\n        this.title.setTitle(title);\n      }\n    }\n    static {\n      this.ɵfac = function DefaultTitleStrategy_Factory(t) {\n        return new (t || DefaultTitleStrategy)(i0.ɵɵinject(i1.Title));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: DefaultTitleStrategy,\n        factory: DefaultTitleStrategy.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DefaultTitleStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * A [DI token](guide/glossary/#di-token) for the router service.\n *\n * @publicApi\n */\nconst ROUTER_CONFIGURATION = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router config' : '', {\n  providedIn: 'root',\n  factory: () => ({})\n});\n\n/**\n * The [DI token](guide/glossary/#di-token) for a router configuration.\n *\n * `ROUTES` is a low level API for router configuration via dependency injection.\n *\n * We recommend that in almost all cases to use higher level APIs such as `RouterModule.forRoot()`,\n * `provideRouter`, or `Router.resetConfig()`.\n *\n * @publicApi\n */\nconst ROUTES = /*#__PURE__*/new InjectionToken(ngDevMode ? 'ROUTES' : '');\nlet RouterConfigLoader = /*#__PURE__*/(() => {\n  class RouterConfigLoader {\n    constructor() {\n      this.componentLoaders = new WeakMap();\n      this.childrenLoaders = new WeakMap();\n      this.compiler = inject(Compiler);\n    }\n    loadComponent(route) {\n      if (this.componentLoaders.get(route)) {\n        return this.componentLoaders.get(route);\n      } else if (route._loadedComponent) {\n        return of(route._loadedComponent);\n      }\n      if (this.onLoadStartListener) {\n        this.onLoadStartListener(route);\n      }\n      const loadRunner = wrapIntoObservable(route.loadComponent()).pipe(map(maybeUnwrapDefaultExport), tap(component => {\n        if (this.onLoadEndListener) {\n          this.onLoadEndListener(route);\n        }\n        (typeof ngDevMode === 'undefined' || ngDevMode) && assertStandalone(route.path ?? '', component);\n        route._loadedComponent = component;\n      }), finalize(() => {\n        this.componentLoaders.delete(route);\n      }));\n      // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n      const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());\n      this.componentLoaders.set(route, loader);\n      return loader;\n    }\n    loadChildren(parentInjector, route) {\n      if (this.childrenLoaders.get(route)) {\n        return this.childrenLoaders.get(route);\n      } else if (route._loadedRoutes) {\n        return of({\n          routes: route._loadedRoutes,\n          injector: route._loadedInjector\n        });\n      }\n      if (this.onLoadStartListener) {\n        this.onLoadStartListener(route);\n      }\n      const moduleFactoryOrRoutes$ = loadChildren(route, this.compiler, parentInjector, this.onLoadEndListener);\n      const loadRunner = moduleFactoryOrRoutes$.pipe(finalize(() => {\n        this.childrenLoaders.delete(route);\n      }));\n      // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n      const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());\n      this.childrenLoaders.set(route, loader);\n      return loader;\n    }\n    static {\n      this.ɵfac = function RouterConfigLoader_Factory(t) {\n        return new (t || RouterConfigLoader)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: RouterConfigLoader,\n        factory: RouterConfigLoader.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return RouterConfigLoader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Executes a `route.loadChildren` callback and converts the result to an array of child routes and\n * an injector if that callback returned a module.\n *\n * This function is used for the route discovery during prerendering\n * in @angular-devkit/build-angular. If there are any updates to the contract here, it will require\n * an update to the extractor.\n */\nfunction loadChildren(route, compiler, parentInjector, onLoadEndListener) {\n  return wrapIntoObservable(route.loadChildren()).pipe(map(maybeUnwrapDefaultExport), mergeMap(t => {\n    if (t instanceof NgModuleFactory || Array.isArray(t)) {\n      return of(t);\n    } else {\n      return from(compiler.compileModuleAsync(t));\n    }\n  }), map(factoryOrRoutes => {\n    if (onLoadEndListener) {\n      onLoadEndListener(route);\n    }\n    // This injector comes from the `NgModuleRef` when lazy loading an `NgModule`. There is\n    // no injector associated with lazy loading a `Route` array.\n    let injector;\n    let rawRoutes;\n    let requireStandaloneComponents = false;\n    if (Array.isArray(factoryOrRoutes)) {\n      rawRoutes = factoryOrRoutes;\n      requireStandaloneComponents = true;\n    } else {\n      injector = factoryOrRoutes.create(parentInjector).injector;\n      // When loading a module that doesn't provide `RouterModule.forChild()` preloader\n      // will get stuck in an infinite loop. The child module's Injector will look to\n      // its parent `Injector` when it doesn't find any ROUTES so it will return routes\n      // for it's parent module instead.\n      rawRoutes = injector.get(ROUTES, [], {\n        optional: true,\n        self: true\n      }).flat();\n    }\n    const routes = rawRoutes.map(standardizeConfig);\n    (typeof ngDevMode === 'undefined' || ngDevMode) && validateConfig(routes, route.path, requireStandaloneComponents);\n    return {\n      routes,\n      injector\n    };\n  }));\n}\nfunction isWrappedDefaultExport(value) {\n  // We use `in` here with a string key `'default'`, because we expect `DefaultExport` objects to be\n  // dynamically imported ES modules with a spec-mandated `default` key. Thus we don't expect that\n  // `default` will be a renamed property.\n  return value && typeof value === 'object' && 'default' in value;\n}\nfunction maybeUnwrapDefaultExport(input) {\n  // As per `isWrappedDefaultExport`, the `default` key here is generated by the browser and not\n  // subject to property renaming, so we reference it with bracket access.\n  return isWrappedDefaultExport(input) ? input['default'] : input;\n}\n\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @publicApi\n */\nlet UrlHandlingStrategy = /*#__PURE__*/(() => {\n  class UrlHandlingStrategy {\n    static {\n      this.ɵfac = function UrlHandlingStrategy_Factory(t) {\n        return new (t || UrlHandlingStrategy)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: UrlHandlingStrategy,\n        factory: () => (() => inject(DefaultUrlHandlingStrategy))(),\n        providedIn: 'root'\n      });\n    }\n  }\n  return UrlHandlingStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @publicApi\n */\nlet DefaultUrlHandlingStrategy = /*#__PURE__*/(() => {\n  class DefaultUrlHandlingStrategy {\n    shouldProcessUrl(url) {\n      return true;\n    }\n    extract(url) {\n      return url;\n    }\n    merge(newUrlPart, wholeUrl) {\n      return newUrlPart;\n    }\n    static {\n      this.ɵfac = function DefaultUrlHandlingStrategy_Factory(t) {\n        return new (t || DefaultUrlHandlingStrategy)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: DefaultUrlHandlingStrategy,\n        factory: DefaultUrlHandlingStrategy.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DefaultUrlHandlingStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/// <reference types=\"dom-view-transitions\" />\nconst CREATE_VIEW_TRANSITION = /*#__PURE__*/new InjectionToken(ngDevMode ? 'view transition helper' : '');\nconst VIEW_TRANSITION_OPTIONS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'view transition options' : '');\n/**\n * A helper function for using browser view transitions. This function skips the call to\n * `startViewTransition` if the browser does not support it.\n *\n * @returns A Promise that resolves when the view transition callback begins.\n */\nfunction createViewTransition(injector, from, to) {\n  const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);\n  const document = injector.get(DOCUMENT);\n  // Create promises outside the Angular zone to avoid causing extra change detections\n  return injector.get(NgZone).runOutsideAngular(() => {\n    if (!document.startViewTransition || transitionOptions.skipNextTransition) {\n      transitionOptions.skipNextTransition = false;\n      // The timing of `startViewTransition` is closer to a macrotask. It won't be called\n      // until the current event loop exits so we use a promise resolved in a timeout instead\n      // of Promise.resolve().\n      return new Promise(resolve => setTimeout(resolve));\n    }\n    let resolveViewTransitionStarted;\n    const viewTransitionStarted = new Promise(resolve => {\n      resolveViewTransitionStarted = resolve;\n    });\n    const transition = document.startViewTransition(() => {\n      resolveViewTransitionStarted();\n      // We don't actually update dom within the transition callback. The resolving of the above\n      // promise unblocks the Router navigation, which synchronously activates and deactivates\n      // routes (the DOM update). This view transition waits for the next change detection to\n      // complete (below), which includes the update phase of the routed components.\n      return createRenderPromise(injector);\n    });\n    const {\n      onViewTransitionCreated\n    } = transitionOptions;\n    if (onViewTransitionCreated) {\n      runInInjectionContext(injector, () => onViewTransitionCreated({\n        transition,\n        from,\n        to\n      }));\n    }\n    return viewTransitionStarted;\n  });\n}\n/**\n * Creates a promise that resolves after next render.\n */\nfunction createRenderPromise(injector) {\n  return new Promise(resolve => {\n    afterNextRender(resolve, {\n      injector\n    });\n  });\n}\nlet NavigationTransitions = /*#__PURE__*/(() => {\n  class NavigationTransitions {\n    get hasRequestedNavigation() {\n      return this.navigationId !== 0;\n    }\n    constructor() {\n      this.currentNavigation = null;\n      this.currentTransition = null;\n      this.lastSuccessfulNavigation = null;\n      /**\n       * These events are used to communicate back to the Router about the state of the transition. The\n       * Router wants to respond to these events in various ways. Because the `NavigationTransition`\n       * class is not public, this event subject is not publicly exposed.\n       */\n      this.events = new Subject();\n      /**\n       * Used to abort the current transition with an error.\n       */\n      this.transitionAbortSubject = new Subject();\n      this.configLoader = inject(RouterConfigLoader);\n      this.environmentInjector = inject(EnvironmentInjector);\n      this.urlSerializer = inject(UrlSerializer);\n      this.rootContexts = inject(ChildrenOutletContexts);\n      this.location = inject(Location);\n      this.inputBindingEnabled = inject(INPUT_BINDER, {\n        optional: true\n      }) !== null;\n      this.titleStrategy = inject(TitleStrategy);\n      this.options = inject(ROUTER_CONFIGURATION, {\n        optional: true\n      }) || {};\n      this.paramsInheritanceStrategy = this.options.paramsInheritanceStrategy || 'emptyOnly';\n      this.urlHandlingStrategy = inject(UrlHandlingStrategy);\n      this.createViewTransition = inject(CREATE_VIEW_TRANSITION, {\n        optional: true\n      });\n      this.navigationId = 0;\n      /**\n       * Hook that enables you to pause navigation after the preactivation phase.\n       * Used by `RouterModule`.\n       *\n       * @internal\n       */\n      this.afterPreactivation = () => of(void 0);\n      /** @internal */\n      this.rootComponentType = null;\n      const onLoadStart = r => this.events.next(new RouteConfigLoadStart(r));\n      const onLoadEnd = r => this.events.next(new RouteConfigLoadEnd(r));\n      this.configLoader.onLoadEndListener = onLoadEnd;\n      this.configLoader.onLoadStartListener = onLoadStart;\n    }\n    complete() {\n      this.transitions?.complete();\n    }\n    handleNavigationRequest(request) {\n      const id = ++this.navigationId;\n      this.transitions?.next({\n        ...this.transitions.value,\n        ...request,\n        id\n      });\n    }\n    setupNavigations(router, initialUrlTree, initialRouterState) {\n      this.transitions = new BehaviorSubject({\n        id: 0,\n        currentUrlTree: initialUrlTree,\n        currentRawUrl: initialUrlTree,\n        extractedUrl: this.urlHandlingStrategy.extract(initialUrlTree),\n        urlAfterRedirects: this.urlHandlingStrategy.extract(initialUrlTree),\n        rawUrl: initialUrlTree,\n        extras: {},\n        resolve: null,\n        reject: null,\n        promise: Promise.resolve(true),\n        source: IMPERATIVE_NAVIGATION,\n        restoredState: null,\n        currentSnapshot: initialRouterState.snapshot,\n        targetSnapshot: null,\n        currentRouterState: initialRouterState,\n        targetRouterState: null,\n        guards: {\n          canActivateChecks: [],\n          canDeactivateChecks: []\n        },\n        guardsResult: null\n      });\n      return this.transitions.pipe(filter(t => t.id !== 0),\n      // Extract URL\n      map(t => ({\n        ...t,\n        extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl)\n      })),\n      // Using switchMap so we cancel executing navigations when a new one comes in\n      switchMap(overallTransitionState => {\n        let completed = false;\n        let errored = false;\n        return of(overallTransitionState).pipe(switchMap(t => {\n          // It is possible that `switchMap` fails to cancel previous navigations if a new one happens synchronously while the operator\n          // is processing the `next` notification of that previous navigation. This can happen when a new navigation (say 2) cancels a\n          // previous one (1) and yet another navigation (3) happens synchronously in response to the `NavigationCancel` event for (1).\n          // https://github.com/ReactiveX/rxjs/issues/7455\n          if (this.navigationId > overallTransitionState.id) {\n            const cancellationReason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : '';\n            this.cancelNavigationTransition(overallTransitionState, cancellationReason, NavigationCancellationCode.SupersededByNewNavigation);\n            return EMPTY;\n          }\n          this.currentTransition = overallTransitionState;\n          // Store the Navigation object\n          this.currentNavigation = {\n            id: t.id,\n            initialUrl: t.rawUrl,\n            extractedUrl: t.extractedUrl,\n            trigger: t.source,\n            extras: t.extras,\n            previousNavigation: !this.lastSuccessfulNavigation ? null : {\n              ...this.lastSuccessfulNavigation,\n              previousNavigation: null\n            }\n          };\n          const urlTransition = !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();\n          const onSameUrlNavigation = t.extras.onSameUrlNavigation ?? router.onSameUrlNavigation;\n          if (!urlTransition && onSameUrlNavigation !== 'reload') {\n            const reason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.` : '';\n            this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.rawUrl), reason, NavigationSkippedCode.IgnoredSameUrlNavigation));\n            t.resolve(null);\n            return EMPTY;\n          }\n          if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {\n            return of(t).pipe(\n            // Fire NavigationStart event\n            switchMap(t => {\n              const transition = this.transitions?.getValue();\n              this.events.next(new NavigationStart(t.id, this.urlSerializer.serialize(t.extractedUrl), t.source, t.restoredState));\n              if (transition !== this.transitions?.getValue()) {\n                return EMPTY;\n              }\n              // This delay is required to match old behavior that forced\n              // navigation to always be async\n              return Promise.resolve(t);\n            }),\n            // Recognize\n            recognize(this.environmentInjector, this.configLoader, this.rootComponentType, router.config, this.urlSerializer, this.paramsInheritanceStrategy),\n            // Update URL if in `eager` update mode\n            tap(t => {\n              overallTransitionState.targetSnapshot = t.targetSnapshot;\n              overallTransitionState.urlAfterRedirects = t.urlAfterRedirects;\n              this.currentNavigation = {\n                ...this.currentNavigation,\n                finalUrl: t.urlAfterRedirects\n              };\n              // Fire RoutesRecognized\n              const routesRecognized = new RoutesRecognized(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n              this.events.next(routesRecognized);\n            }));\n          } else if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)) {\n            /* When the current URL shouldn't be processed, but the previous one\n             * was, we handle this \"error condition\" by navigating to the\n             * previously successful URL, but leaving the URL intact.*/\n            const {\n              id,\n              extractedUrl,\n              source,\n              restoredState,\n              extras\n            } = t;\n            const navStart = new NavigationStart(id, this.urlSerializer.serialize(extractedUrl), source, restoredState);\n            this.events.next(navStart);\n            const targetSnapshot = createEmptyState(this.rootComponentType).snapshot;\n            this.currentTransition = overallTransitionState = {\n              ...t,\n              targetSnapshot,\n              urlAfterRedirects: extractedUrl,\n              extras: {\n                ...extras,\n                skipLocationChange: false,\n                replaceUrl: false\n              }\n            };\n            this.currentNavigation.finalUrl = extractedUrl;\n            return of(overallTransitionState);\n          } else {\n            /* When neither the current or previous URL can be processed, do\n             * nothing other than update router's internal reference to the\n             * current \"settled\" URL. This way the next navigation will be coming\n             * from the current URL in the browser.\n             */\n            const reason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation was ignored because the UrlHandlingStrategy` + ` indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.` : '';\n            this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, NavigationSkippedCode.IgnoredByUrlHandlingStrategy));\n            t.resolve(null);\n            return EMPTY;\n          }\n        }),\n        // --- GUARDS ---\n        tap(t => {\n          const guardsStart = new GuardsCheckStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n          this.events.next(guardsStart);\n        }), map(t => {\n          this.currentTransition = overallTransitionState = {\n            ...t,\n            guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts)\n          };\n          return overallTransitionState;\n        }), checkGuards(this.environmentInjector, evt => this.events.next(evt)), tap(t => {\n          overallTransitionState.guardsResult = t.guardsResult;\n          if (isUrlTree(t.guardsResult)) {\n            throw redirectingNavigationError(this.urlSerializer, t.guardsResult);\n          }\n          const guardsEnd = new GuardsCheckEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);\n          this.events.next(guardsEnd);\n        }), filter(t => {\n          if (!t.guardsResult) {\n            this.cancelNavigationTransition(t, '', NavigationCancellationCode.GuardRejected);\n            return false;\n          }\n          return true;\n        }),\n        // --- RESOLVE ---\n        switchTap(t => {\n          if (t.guards.canActivateChecks.length) {\n            return of(t).pipe(tap(t => {\n              const resolveStart = new ResolveStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n              this.events.next(resolveStart);\n            }), switchMap(t => {\n              let dataResolved = false;\n              return of(t).pipe(resolveData(this.paramsInheritanceStrategy, this.environmentInjector), tap({\n                next: () => dataResolved = true,\n                complete: () => {\n                  if (!dataResolved) {\n                    this.cancelNavigationTransition(t, typeof ngDevMode === 'undefined' || ngDevMode ? `At least one route resolver didn't emit any value.` : '', NavigationCancellationCode.NoDataFromResolver);\n                  }\n                }\n              }));\n            }), tap(t => {\n              const resolveEnd = new ResolveEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n              this.events.next(resolveEnd);\n            }));\n          }\n          return undefined;\n        }),\n        // --- LOAD COMPONENTS ---\n        switchTap(t => {\n          const loadComponents = route => {\n            const loaders = [];\n            if (route.routeConfig?.loadComponent && !route.routeConfig._loadedComponent) {\n              loaders.push(this.configLoader.loadComponent(route.routeConfig).pipe(tap(loadedComponent => {\n                route.component = loadedComponent;\n              }), map(() => void 0)));\n            }\n            for (const child of route.children) {\n              loaders.push(...loadComponents(child));\n            }\n            return loaders;\n          };\n          return combineLatest(loadComponents(t.targetSnapshot.root)).pipe(defaultIfEmpty(null), take(1));\n        }), switchTap(() => this.afterPreactivation()), switchMap(() => {\n          const {\n            currentSnapshot,\n            targetSnapshot\n          } = overallTransitionState;\n          const viewTransitionStarted = this.createViewTransition?.(this.environmentInjector, currentSnapshot.root, targetSnapshot.root);\n          // If view transitions are enabled, block the navigation until the view\n          // transition callback starts. Otherwise, continue immediately.\n          return viewTransitionStarted ? from(viewTransitionStarted).pipe(map(() => overallTransitionState)) : of(overallTransitionState);\n        }), map(t => {\n          const targetRouterState = createRouterState(router.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);\n          this.currentTransition = overallTransitionState = {\n            ...t,\n            targetRouterState\n          };\n          this.currentNavigation.targetRouterState = targetRouterState;\n          return overallTransitionState;\n        }), tap(() => {\n          this.events.next(new BeforeActivateRoutes());\n        }), activateRoutes(this.rootContexts, router.routeReuseStrategy, evt => this.events.next(evt), this.inputBindingEnabled),\n        // Ensure that if some observable used to drive the transition doesn't\n        // complete, the navigation still finalizes This should never happen, but\n        // this is done as a safety measure to avoid surfacing this error (#49567).\n        take(1), tap({\n          next: t => {\n            completed = true;\n            this.lastSuccessfulNavigation = this.currentNavigation;\n            this.events.next(new NavigationEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects)));\n            this.titleStrategy?.updateTitle(t.targetRouterState.snapshot);\n            t.resolve(true);\n          },\n          complete: () => {\n            completed = true;\n          }\n        }),\n        // There used to be a lot more logic happening directly within the\n        // transition Observable. Some of this logic has been refactored out to\n        // other places but there may still be errors that happen there. This gives\n        // us a way to cancel the transition from the outside. This may also be\n        // required in the future to support something like the abort signal of the\n        // Navigation API where the navigation gets aborted from outside the\n        // transition.\n        takeUntil(this.transitionAbortSubject.pipe(tap(err => {\n          throw err;\n        }))), finalize(() => {\n          /* When the navigation stream finishes either through error or success,\n           * we set the `completed` or `errored` flag. However, there are some\n           * situations where we could get here without either of those being set.\n           * For instance, a redirect during NavigationStart. Therefore, this is a\n           * catch-all to make sure the NavigationCancel event is fired when a\n           * navigation gets cancelled but not caught by other means. */\n          if (!completed && !errored) {\n            const cancelationReason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : '';\n            this.cancelNavigationTransition(overallTransitionState, cancelationReason, NavigationCancellationCode.SupersededByNewNavigation);\n          }\n          // Only clear current navigation if it is still set to the one that\n          // finalized.\n          if (this.currentTransition?.id === overallTransitionState.id) {\n            this.currentNavigation = null;\n            this.currentTransition = null;\n          }\n        }), catchError(e => {\n          errored = true;\n          /* This error type is issued during Redirect, and is handled as a\n           * cancellation rather than an error. */\n          if (isNavigationCancelingError(e)) {\n            this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e.message, e.cancellationCode));\n            // When redirecting, we need to delay resolving the navigation\n            // promise and push it to the redirect navigation\n            if (!isRedirectingNavigationCancelingError(e)) {\n              overallTransitionState.resolve(false);\n            } else {\n              this.events.next(new RedirectRequest(e.url));\n            }\n            /* All other errors should reset to the router's internal URL reference\n             * to the pre-error state. */\n          } else {\n            this.events.next(new NavigationError(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e, overallTransitionState.targetSnapshot ?? undefined));\n            try {\n              overallTransitionState.resolve(router.errorHandler(e));\n            } catch (ee) {\n              // TODO(atscott): consider flipping the default behavior of\n              // resolveNavigationPromiseOnError to be `resolve(false)` when\n              // undefined. This is the most sane thing to do given that\n              // applications very rarely handle the promise rejection and, as a\n              // result, would get \"unhandled promise rejection\" console logs.\n              // The vast majority of applications would not be affected by this\n              // change so omitting a migration seems reasonable. Instead,\n              // applications that rely on rejection can specifically opt-in to the\n              // old behavior.\n              if (this.options.resolveNavigationPromiseOnError) {\n                overallTransitionState.resolve(false);\n              } else {\n                overallTransitionState.reject(ee);\n              }\n            }\n          }\n          return EMPTY;\n        }));\n        // casting because `pipe` returns observable({}) when called with 8+ arguments\n      }));\n    }\n    cancelNavigationTransition(t, reason, code) {\n      const navCancel = new NavigationCancel(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, code);\n      this.events.next(navCancel);\n      t.resolve(false);\n    }\n    /**\n     * @returns Whether we're navigating to somewhere that is not what the Router is\n     * currently set to.\n     */\n    isUpdatingInternalState() {\n      // TODO(atscott): The serializer should likely be used instead of\n      // `UrlTree.toString()`. Custom serializers are often written to handle\n      // things better than the default one (objects, for example will be\n      // [Object object] with the custom serializer and be \"the same\" when they\n      // aren't).\n      // (Same for isUpdatedBrowserUrl)\n      return this.currentTransition?.extractedUrl.toString() !== this.currentTransition?.currentUrlTree.toString();\n    }\n    /**\n     * @returns Whether we're updating the browser URL to something new (navigation is going\n     * to somewhere not displayed in the URL bar and we will update the URL\n     * bar if navigation succeeds).\n     */\n    isUpdatedBrowserUrl() {\n      // The extracted URL is the part of the URL that this application cares about. `extract` may\n      // return only part of the browser URL and that part may have not changed even if some other\n      // portion of the URL did.\n      const extractedBrowserUrl = this.urlHandlingStrategy.extract(this.urlSerializer.parse(this.location.path(true)));\n      return extractedBrowserUrl.toString() !== this.currentTransition?.extractedUrl.toString() && !this.currentTransition?.extras.skipLocationChange;\n    }\n    static {\n      this.ɵfac = function NavigationTransitions_Factory(t) {\n        return new (t || NavigationTransitions)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: NavigationTransitions,\n        factory: NavigationTransitions.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return NavigationTransitions;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction isBrowserTriggeredNavigation(source) {\n  return source !== IMPERATIVE_NAVIGATION;\n}\n\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @publicApi\n */\nlet RouteReuseStrategy = /*#__PURE__*/(() => {\n  class RouteReuseStrategy {\n    static {\n      this.ɵfac = function RouteReuseStrategy_Factory(t) {\n        return new (t || RouteReuseStrategy)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: RouteReuseStrategy,\n        factory: () => (() => inject(DefaultRouteReuseStrategy))(),\n        providedIn: 'root'\n      });\n    }\n  }\n  return RouteReuseStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n *\n * This base route reuse strategy only reuses routes when the matched router configs are\n * identical. This prevents components from being destroyed and recreated\n * when just the route parameters, query parameters or fragment change\n * (that is, the existing component is _reused_).\n *\n * This strategy does not store any routes for later reuse.\n *\n * Angular uses this strategy by default.\n *\n *\n * It can be used as a base class for custom route reuse strategies, i.e. you can create your own\n * class that extends the `BaseRouteReuseStrategy` one.\n * @publicApi\n */\nclass BaseRouteReuseStrategy {\n  /**\n   * Whether the given route should detach for later reuse.\n   * Always returns false for `BaseRouteReuseStrategy`.\n   * */\n  shouldDetach(route) {\n    return false;\n  }\n  /**\n   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.\n   */\n  store(route, detachedTree) {}\n  /** Returns `false`, meaning the route (and its subtree) is never reattached */\n  shouldAttach(route) {\n    return false;\n  }\n  /** Returns `null` because this strategy does not store routes for later re-use. */\n  retrieve(route) {\n    return null;\n  }\n  /**\n   * Determines if a route should be reused.\n   * This strategy returns `true` when the future route config and current route config are\n   * identical.\n   */\n  shouldReuseRoute(future, curr) {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\nlet DefaultRouteReuseStrategy = /*#__PURE__*/(() => {\n  class DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵDefaultRouteReuseStrategy_BaseFactory;\n        return function DefaultRouteReuseStrategy_Factory(t) {\n          return (ɵDefaultRouteReuseStrategy_BaseFactory || (ɵDefaultRouteReuseStrategy_BaseFactory = i0.ɵɵgetInheritedFactory(DefaultRouteReuseStrategy)))(t || DefaultRouteReuseStrategy);\n        };\n      })();\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: DefaultRouteReuseStrategy,\n        factory: DefaultRouteReuseStrategy.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DefaultRouteReuseStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StateManager = /*#__PURE__*/(() => {\n  class StateManager {\n    static {\n      this.ɵfac = function StateManager_Factory(t) {\n        return new (t || StateManager)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: StateManager,\n        factory: () => (() => inject(HistoryStateManager))(),\n        providedIn: 'root'\n      });\n    }\n  }\n  return StateManager;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet HistoryStateManager = /*#__PURE__*/(() => {\n  class HistoryStateManager extends StateManager {\n    constructor() {\n      super(...arguments);\n      this.location = inject(Location);\n      this.urlSerializer = inject(UrlSerializer);\n      this.options = inject(ROUTER_CONFIGURATION, {\n        optional: true\n      }) || {};\n      this.canceledNavigationResolution = this.options.canceledNavigationResolution || 'replace';\n      this.urlHandlingStrategy = inject(UrlHandlingStrategy);\n      this.urlUpdateStrategy = this.options.urlUpdateStrategy || 'deferred';\n      this.currentUrlTree = new UrlTree();\n      this.rawUrlTree = this.currentUrlTree;\n      /**\n       * The id of the currently active page in the router.\n       * Updated to the transition's target id on a successful navigation.\n       *\n       * This is used to track what page the router last activated. When an attempted navigation fails,\n       * the router can then use this to compute how to restore the state back to the previously active\n       * page.\n       */\n      this.currentPageId = 0;\n      this.lastSuccessfulId = -1;\n      this.routerState = createEmptyState(null);\n      this.stateMemento = this.createStateMemento();\n    }\n    getCurrentUrlTree() {\n      return this.currentUrlTree;\n    }\n    getRawUrlTree() {\n      return this.rawUrlTree;\n    }\n    restoredState() {\n      return this.location.getState();\n    }\n    /**\n     * The ɵrouterPageId of whatever page is currently active in the browser history. This is\n     * important for computing the target page id for new navigations because we need to ensure each\n     * page id in the browser history is 1 more than the previous entry.\n     */\n    get browserPageId() {\n      if (this.canceledNavigationResolution !== 'computed') {\n        return this.currentPageId;\n      }\n      return this.restoredState()?.ɵrouterPageId ?? this.currentPageId;\n    }\n    getRouterState() {\n      return this.routerState;\n    }\n    createStateMemento() {\n      return {\n        rawUrlTree: this.rawUrlTree,\n        currentUrlTree: this.currentUrlTree,\n        routerState: this.routerState\n      };\n    }\n    registerNonRouterCurrentEntryChangeListener(listener) {\n      return this.location.subscribe(event => {\n        if (event['type'] === 'popstate') {\n          listener(event['url'], event.state);\n        }\n      });\n    }\n    handleRouterEvent(e, currentTransition) {\n      if (e instanceof NavigationStart) {\n        this.stateMemento = this.createStateMemento();\n      } else if (e instanceof NavigationSkipped) {\n        this.rawUrlTree = currentTransition.initialUrl;\n      } else if (e instanceof RoutesRecognized) {\n        if (this.urlUpdateStrategy === 'eager') {\n          if (!currentTransition.extras.skipLocationChange) {\n            const rawUrl = this.urlHandlingStrategy.merge(currentTransition.finalUrl, currentTransition.initialUrl);\n            this.setBrowserUrl(rawUrl, currentTransition);\n          }\n        }\n      } else if (e instanceof BeforeActivateRoutes) {\n        this.currentUrlTree = currentTransition.finalUrl;\n        this.rawUrlTree = this.urlHandlingStrategy.merge(currentTransition.finalUrl, currentTransition.initialUrl);\n        this.routerState = currentTransition.targetRouterState;\n        if (this.urlUpdateStrategy === 'deferred') {\n          if (!currentTransition.extras.skipLocationChange) {\n            this.setBrowserUrl(this.rawUrlTree, currentTransition);\n          }\n        }\n      } else if (e instanceof NavigationCancel && (e.code === NavigationCancellationCode.GuardRejected || e.code === NavigationCancellationCode.NoDataFromResolver)) {\n        this.restoreHistory(currentTransition);\n      } else if (e instanceof NavigationError) {\n        this.restoreHistory(currentTransition, true);\n      } else if (e instanceof NavigationEnd) {\n        this.lastSuccessfulId = e.id;\n        this.currentPageId = this.browserPageId;\n      }\n    }\n    setBrowserUrl(url, transition) {\n      const path = this.urlSerializer.serialize(url);\n      if (this.location.isCurrentPathEqualTo(path) || !!transition.extras.replaceUrl) {\n        // replacements do not update the target page\n        const currentBrowserPageId = this.browserPageId;\n        const state = {\n          ...transition.extras.state,\n          ...this.generateNgRouterState(transition.id, currentBrowserPageId)\n        };\n        this.location.replaceState(path, '', state);\n      } else {\n        const state = {\n          ...transition.extras.state,\n          ...this.generateNgRouterState(transition.id, this.browserPageId + 1)\n        };\n        this.location.go(path, '', state);\n      }\n    }\n    /**\n     * Performs the necessary rollback action to restore the browser URL to the\n     * state before the transition.\n     */\n    restoreHistory(navigation, restoringFromCaughtError = false) {\n      if (this.canceledNavigationResolution === 'computed') {\n        const currentBrowserPageId = this.browserPageId;\n        const targetPagePosition = this.currentPageId - currentBrowserPageId;\n        if (targetPagePosition !== 0) {\n          this.location.historyGo(targetPagePosition);\n        } else if (this.currentUrlTree === navigation.finalUrl && targetPagePosition === 0) {\n          // We got to the activation stage (where currentUrlTree is set to the navigation's\n          // finalUrl), but we weren't moving anywhere in history (skipLocationChange or replaceUrl).\n          // We still need to reset the router state back to what it was when the navigation started.\n          this.resetState(navigation);\n          this.resetUrlToCurrentUrlTree();\n        } else {\n          // The browser URL and router state was not updated before the navigation cancelled so\n          // there's no restoration needed.\n        }\n      } else if (this.canceledNavigationResolution === 'replace') {\n        // TODO(atscott): It seems like we should _always_ reset the state here. It would be a no-op\n        // for `deferred` navigations that haven't change the internal state yet because guards\n        // reject. For 'eager' navigations, it seems like we also really should reset the state\n        // because the navigation was cancelled. Investigate if this can be done by running TGP.\n        if (restoringFromCaughtError) {\n          this.resetState(navigation);\n        }\n        this.resetUrlToCurrentUrlTree();\n      }\n    }\n    resetState(navigation) {\n      this.routerState = this.stateMemento.routerState;\n      this.currentUrlTree = this.stateMemento.currentUrlTree;\n      // Note here that we use the urlHandlingStrategy to get the reset `rawUrlTree` because it may be\n      // configured to handle only part of the navigation URL. This means we would only want to reset\n      // the part of the navigation handled by the Angular router rather than the whole URL. In\n      // addition, the URLHandlingStrategy may be configured to specifically preserve parts of the URL\n      // when merging, such as the query params so they are not lost on a refresh.\n      this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, navigation.finalUrl ?? this.rawUrlTree);\n    }\n    resetUrlToCurrentUrlTree() {\n      this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));\n    }\n    generateNgRouterState(navigationId, routerPageId) {\n      if (this.canceledNavigationResolution === 'computed') {\n        return {\n          navigationId,\n          ɵrouterPageId: routerPageId\n        };\n      }\n      return {\n        navigationId\n      };\n    }\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵHistoryStateManager_BaseFactory;\n        return function HistoryStateManager_Factory(t) {\n          return (ɵHistoryStateManager_BaseFactory || (ɵHistoryStateManager_BaseFactory = i0.ɵɵgetInheritedFactory(HistoryStateManager)))(t || HistoryStateManager);\n        };\n      })();\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: HistoryStateManager,\n        factory: HistoryStateManager.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return HistoryStateManager;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar NavigationResult = /*#__PURE__*/function (NavigationResult) {\n  NavigationResult[NavigationResult[\"COMPLETE\"] = 0] = \"COMPLETE\";\n  NavigationResult[NavigationResult[\"FAILED\"] = 1] = \"FAILED\";\n  NavigationResult[NavigationResult[\"REDIRECTING\"] = 2] = \"REDIRECTING\";\n  return NavigationResult;\n}(NavigationResult || {});\n/**\n * Performs the given action once the router finishes its next/current navigation.\n *\n * The navigation is considered complete under the following conditions:\n * - `NavigationCancel` event emits and the code is not `NavigationCancellationCode.Redirect` or\n * `NavigationCancellationCode.SupersededByNewNavigation`. In these cases, the\n * redirecting/superseding navigation must finish.\n * - `NavigationError`, `NavigationEnd`, or `NavigationSkipped` event emits\n */\nfunction afterNextNavigation(router, action) {\n  router.events.pipe(filter(e => e instanceof NavigationEnd || e instanceof NavigationCancel || e instanceof NavigationError || e instanceof NavigationSkipped), map(e => {\n    if (e instanceof NavigationEnd || e instanceof NavigationSkipped) {\n      return NavigationResult.COMPLETE;\n    }\n    const redirecting = e instanceof NavigationCancel ? e.code === NavigationCancellationCode.Redirect || e.code === NavigationCancellationCode.SupersededByNewNavigation : false;\n    return redirecting ? NavigationResult.REDIRECTING : NavigationResult.FAILED;\n  }), filter(result => result !== NavigationResult.REDIRECTING), take(1)).subscribe(() => {\n    action();\n  });\n}\nfunction defaultErrorHandler(error) {\n  throw error;\n}\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `true`\n * (exact = true).\n */\nconst exactMatchOptions = {\n  paths: 'exact',\n  fragment: 'ignored',\n  matrixParams: 'ignored',\n  queryParams: 'exact'\n};\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `false`\n * (exact = false).\n */\nconst subsetMatchOptions = {\n  paths: 'subset',\n  fragment: 'ignored',\n  matrixParams: 'ignored',\n  queryParams: 'subset'\n};\n/**\n * @description\n *\n * A service that provides navigation among views and URL manipulation capabilities.\n *\n * @see {@link Route}\n * @see [Routing and Navigation Guide](guide/router).\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nlet Router = /*#__PURE__*/(() => {\n  class Router {\n    get currentUrlTree() {\n      return this.stateManager.getCurrentUrlTree();\n    }\n    get rawUrlTree() {\n      return this.stateManager.getRawUrlTree();\n    }\n    /**\n     * An event stream for routing events.\n     */\n    get events() {\n      // TODO(atscott): This _should_ be events.asObservable(). However, this change requires internal\n      // cleanup: tests are doing `(route.events as Subject<Event>).next(...)`. This isn't\n      // allowed/supported but we still have to fix these or file bugs against the teams before making\n      // the change.\n      return this._events;\n    }\n    /**\n     * The current state of routing in this NgModule.\n     */\n    get routerState() {\n      return this.stateManager.getRouterState();\n    }\n    constructor() {\n      this.disposed = false;\n      this.isNgZoneEnabled = false;\n      this.console = inject(ɵConsole);\n      this.stateManager = inject(StateManager);\n      this.options = inject(ROUTER_CONFIGURATION, {\n        optional: true\n      }) || {};\n      this.pendingTasks = inject(ɵPendingTasks);\n      this.urlUpdateStrategy = this.options.urlUpdateStrategy || 'deferred';\n      this.navigationTransitions = inject(NavigationTransitions);\n      this.urlSerializer = inject(UrlSerializer);\n      this.location = inject(Location);\n      this.urlHandlingStrategy = inject(UrlHandlingStrategy);\n      /**\n       * The private `Subject` type for the public events exposed in the getter. This is used internally\n       * to push events to. The separate field allows us to expose separate types in the public API\n       * (i.e., an Observable rather than the Subject).\n       */\n      this._events = new Subject();\n      /**\n       * A handler for navigation errors in this NgModule.\n       *\n       * @deprecated Subscribe to the `Router` events and watch for `NavigationError` instead.\n       *   `provideRouter` has the `withNavigationErrorHandler` feature to make this easier.\n       * @see {@link withNavigationErrorHandler}\n       */\n      this.errorHandler = this.options.errorHandler || defaultErrorHandler;\n      /**\n       * True if at least one navigation event has occurred,\n       * false otherwise.\n       */\n      this.navigated = false;\n      /**\n       * A strategy for re-using routes.\n       *\n       * @deprecated Configure using `providers` instead:\n       *   `{provide: RouteReuseStrategy, useClass: MyStrategy}`.\n       */\n      this.routeReuseStrategy = inject(RouteReuseStrategy);\n      /**\n       * How to handle a navigation request to the current URL.\n       *\n       *\n       * @deprecated Configure this through `provideRouter` or `RouterModule.forRoot` instead.\n       * @see {@link withRouterConfig}\n       * @see {@link provideRouter}\n       * @see {@link RouterModule}\n       */\n      this.onSameUrlNavigation = this.options.onSameUrlNavigation || 'ignore';\n      this.config = inject(ROUTES, {\n        optional: true\n      })?.flat() ?? [];\n      /**\n       * Indicates whether the application has opted in to binding Router data to component inputs.\n       *\n       * This option is enabled by the `withComponentInputBinding` feature of `provideRouter` or\n       * `bindToComponentInputs` in the `ExtraOptions` of `RouterModule.forRoot`.\n       */\n      this.componentInputBindingEnabled = !!inject(INPUT_BINDER, {\n        optional: true\n      });\n      this.eventsSubscription = new Subscription();\n      this.isNgZoneEnabled = inject(NgZone) instanceof NgZone && NgZone.isInAngularZone();\n      this.resetConfig(this.config);\n      this.navigationTransitions.setupNavigations(this, this.currentUrlTree, this.routerState).subscribe({\n        error: e => {\n          this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e}` : e);\n        }\n      });\n      this.subscribeToNavigationEvents();\n    }\n    subscribeToNavigationEvents() {\n      const subscription = this.navigationTransitions.events.subscribe(e => {\n        try {\n          const currentTransition = this.navigationTransitions.currentTransition;\n          const currentNavigation = this.navigationTransitions.currentNavigation;\n          if (currentTransition !== null && currentNavigation !== null) {\n            this.stateManager.handleRouterEvent(e, currentNavigation);\n            if (e instanceof NavigationCancel && e.code !== NavigationCancellationCode.Redirect && e.code !== NavigationCancellationCode.SupersededByNewNavigation) {\n              // It seems weird that `navigated` is set to `true` when the navigation is rejected,\n              // however it's how things were written initially. Investigation would need to be done\n              // to determine if this can be removed.\n              this.navigated = true;\n            } else if (e instanceof NavigationEnd) {\n              this.navigated = true;\n            } else if (e instanceof RedirectRequest) {\n              const mergedTree = this.urlHandlingStrategy.merge(e.url, currentTransition.currentRawUrl);\n              const extras = {\n                // Persist transient navigation info from the original navigation request.\n                info: currentTransition.extras.info,\n                skipLocationChange: currentTransition.extras.skipLocationChange,\n                // The URL is already updated at this point if we have 'eager' URL\n                // updates or if the navigation was triggered by the browser (back\n                // button, URL bar, etc). We want to replace that item in history\n                // if the navigation is rejected.\n                replaceUrl: this.urlUpdateStrategy === 'eager' || isBrowserTriggeredNavigation(currentTransition.source)\n              };\n              this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras, {\n                resolve: currentTransition.resolve,\n                reject: currentTransition.reject,\n                promise: currentTransition.promise\n              });\n            }\n          }\n          // Note that it's important to have the Router process the events _before_ the event is\n          // pushed through the public observable. This ensures the correct router state is in place\n          // before applications observe the events.\n          if (isPublicRouterEvent(e)) {\n            this._events.next(e);\n          }\n        } catch (e) {\n          this.navigationTransitions.transitionAbortSubject.next(e);\n        }\n      });\n      this.eventsSubscription.add(subscription);\n    }\n    /** @internal */\n    resetRootComponentType(rootComponentType) {\n      // TODO: vsavkin router 4.0 should make the root component set to null\n      // this will simplify the lifecycle of the router.\n      this.routerState.root.component = rootComponentType;\n      this.navigationTransitions.rootComponentType = rootComponentType;\n    }\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     */\n    initialNavigation() {\n      this.setUpLocationChangeListener();\n      if (!this.navigationTransitions.hasRequestedNavigation) {\n        this.navigateToSyncWithBrowser(this.location.path(true), IMPERATIVE_NAVIGATION, this.stateManager.restoredState());\n      }\n    }\n    /**\n     * Sets up the location change listener. This listener detects navigations triggered from outside\n     * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router\n     * navigation so that the correct events, guards, etc. are triggered.\n     */\n    setUpLocationChangeListener() {\n      // Don't need to use Zone.wrap any more, because zone.js\n      // already patch onPopState, so location change callback will\n      // run into ngZone\n      this.nonRouterCurrentEntryChangeSubscription ??= this.stateManager.registerNonRouterCurrentEntryChangeListener((url, state) => {\n        // The `setTimeout` was added in #12160 and is likely to support Angular/AngularJS\n        // hybrid apps.\n        setTimeout(() => {\n          this.navigateToSyncWithBrowser(url, 'popstate', state);\n        }, 0);\n      });\n    }\n    /**\n     * Schedules a router navigation to synchronize Router state with the browser state.\n     *\n     * This is done as a response to a popstate event and the initial navigation. These\n     * two scenarios represent times when the browser URL/state has been updated and\n     * the Router needs to respond to ensure its internal state matches.\n     */\n    navigateToSyncWithBrowser(url, source, state) {\n      const extras = {\n        replaceUrl: true\n      };\n      // TODO: restoredState should always include the entire state, regardless\n      // of navigationId. This requires a breaking change to update the type on\n      // NavigationStart’s restoredState, which currently requires navigationId\n      // to always be present. The Router used to only restore history state if\n      // a navigationId was present.\n      // The stored navigationId is used by the RouterScroller to retrieve the scroll\n      // position for the page.\n      const restoredState = state?.navigationId ? state : null;\n      // Separate to NavigationStart.restoredState, we must also restore the state to\n      // history.state and generate a new navigationId, since it will be overwritten\n      if (state) {\n        const stateCopy = {\n          ...state\n        };\n        delete stateCopy.navigationId;\n        delete stateCopy.ɵrouterPageId;\n        if (Object.keys(stateCopy).length !== 0) {\n          extras.state = stateCopy;\n        }\n      }\n      const urlTree = this.parseUrl(url);\n      this.scheduleNavigation(urlTree, source, restoredState, extras);\n    }\n    /** The current URL. */\n    get url() {\n      return this.serializeUrl(this.currentUrlTree);\n    }\n    /**\n     * Returns the current `Navigation` object when the router is navigating,\n     * and `null` when idle.\n     */\n    getCurrentNavigation() {\n      return this.navigationTransitions.currentNavigation;\n    }\n    /**\n     * The `Navigation` object of the most recent navigation to succeed and `null` if there\n     *     has not been a successful navigation yet.\n     */\n    get lastSuccessfulNavigation() {\n      return this.navigationTransitions.lastSuccessfulNavigation;\n    }\n    /**\n     * Resets the route configuration used for navigation and generating links.\n     *\n     * @param config The route array for the new configuration.\n     *\n     * @usageNotes\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     */\n    resetConfig(config) {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && validateConfig(config);\n      this.config = config.map(standardizeConfig);\n      this.navigated = false;\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n      this.dispose();\n    }\n    /** Disposes of the router. */\n    dispose() {\n      this.navigationTransitions.complete();\n      if (this.nonRouterCurrentEntryChangeSubscription) {\n        this.nonRouterCurrentEntryChangeSubscription.unsubscribe();\n        this.nonRouterCurrentEntryChangeSubscription = undefined;\n      }\n      this.disposed = true;\n      this.eventsSubscription.unsubscribe();\n    }\n    /**\n     * Appends URL segments to the current URL tree to create a new URL tree.\n     *\n     * @param commands An array of URL fragments with which to construct the new URL tree.\n     * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n     * segments, followed by the parameters for each segment.\n     * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`\n     * property of the options object, if supplied.\n     * @param navigationExtras Options that control the navigation strategy.\n     * @returns The new URL tree.\n     *\n     * @usageNotes\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it,\n     * // you can do the following:\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     *\n     * Note that a value of `null` or `undefined` for `relativeTo` indicates that the\n     * tree should be created relative to the root.\n     * ```\n     */\n    createUrlTree(commands, navigationExtras = {}) {\n      const {\n        relativeTo,\n        queryParams,\n        fragment,\n        queryParamsHandling,\n        preserveFragment\n      } = navigationExtras;\n      const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n      let q = null;\n      switch (queryParamsHandling) {\n        case 'merge':\n          q = {\n            ...this.currentUrlTree.queryParams,\n            ...queryParams\n          };\n          break;\n        case 'preserve':\n          q = this.currentUrlTree.queryParams;\n          break;\n        default:\n          q = queryParams || null;\n      }\n      if (q !== null) {\n        q = this.removeEmptyProps(q);\n      }\n      let relativeToUrlSegmentGroup;\n      try {\n        const relativeToSnapshot = relativeTo ? relativeTo.snapshot : this.routerState.snapshot.root;\n        relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeToSnapshot);\n      } catch (e) {\n        // This is strictly for backwards compatibility with tests that create\n        // invalid `ActivatedRoute` mocks.\n        // Note: the difference between having this fallback for invalid `ActivatedRoute` setups and\n        // just throwing is ~500 test failures. Fixing all of those tests by hand is not feasible at\n        // the moment.\n        if (typeof commands[0] !== 'string' || !commands[0].startsWith('/')) {\n          // Navigations that were absolute in the old way of creating UrlTrees\n          // would still work because they wouldn't attempt to match the\n          // segments in the `ActivatedRoute` to the `currentUrlTree` but\n          // instead just replace the root segment with the navigation result.\n          // Non-absolute navigations would fail to apply the commands because\n          // the logic could not find the segment to replace (so they'd act like there were no\n          // commands).\n          commands = [];\n        }\n        relativeToUrlSegmentGroup = this.currentUrlTree.root;\n      }\n      return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, q, f ?? null);\n    }\n    /**\n     * Navigates to a view using an absolute route path.\n     *\n     * @param url An absolute path for a defined route. The function does not apply any delta to the\n     *     current URL.\n     * @param extras An object containing properties that modify the navigation strategy.\n     *\n     * @returns A Promise that resolves to 'true' when navigation succeeds,\n     * to 'false' when navigation fails, or is rejected on error.\n     *\n     * @usageNotes\n     *\n     * The following calls request navigation to an absolute path.\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * @see [Routing and Navigation guide](guide/router)\n     *\n     */\n    navigateByUrl(url, extras = {\n      skipLocationChange: false\n    }) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (this.isNgZoneEnabled && !NgZone.isInAngularZone()) {\n          this.console.warn(`Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);\n        }\n      }\n      const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n      const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n      return this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras);\n    }\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * @param commands An array of URL fragments with which to construct the target URL.\n     * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n     * segments, followed by the parameters for each segment.\n     * The fragments are applied to the current URL or the one provided  in the `relativeTo` property\n     * of the options object, if supplied.\n     * @param extras An options object that determines how the URL should be constructed or\n     *     interpreted.\n     *\n     * @returns A Promise that resolves to `true` when navigation succeeds, or `false` when navigation\n     *     fails. The Promise is rejected when an error occurs if `resolveNavigationPromiseOnError` is\n     * not `true`.\n     *\n     * @usageNotes\n     *\n     * The following calls request navigation to a dynamic route path relative to the current URL.\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL, overriding the default behavior\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * @see [Routing and Navigation guide](guide/router)\n     *\n     */\n    navigate(commands, extras = {\n      skipLocationChange: false\n    }) {\n      validateCommands(commands);\n      return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n    }\n    /** Serializes a `UrlTree` into a string */\n    serializeUrl(url) {\n      return this.urlSerializer.serialize(url);\n    }\n    /** Parses a string into a `UrlTree` */\n    parseUrl(url) {\n      try {\n        return this.urlSerializer.parse(url);\n      } catch {\n        return this.urlSerializer.parse('/');\n      }\n    }\n    isActive(url, matchOptions) {\n      let options;\n      if (matchOptions === true) {\n        options = {\n          ...exactMatchOptions\n        };\n      } else if (matchOptions === false) {\n        options = {\n          ...subsetMatchOptions\n        };\n      } else {\n        options = matchOptions;\n      }\n      if (isUrlTree(url)) {\n        return containsTree(this.currentUrlTree, url, options);\n      }\n      const urlTree = this.parseUrl(url);\n      return containsTree(this.currentUrlTree, urlTree, options);\n    }\n    removeEmptyProps(params) {\n      return Object.entries(params).reduce((result, [key, value]) => {\n        if (value !== null && value !== undefined) {\n          result[key] = value;\n        }\n        return result;\n      }, {});\n    }\n    scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {\n      if (this.disposed) {\n        return Promise.resolve(false);\n      }\n      let resolve;\n      let reject;\n      let promise;\n      if (priorPromise) {\n        resolve = priorPromise.resolve;\n        reject = priorPromise.reject;\n        promise = priorPromise.promise;\n      } else {\n        promise = new Promise((res, rej) => {\n          resolve = res;\n          reject = rej;\n        });\n      }\n      // Indicate that the navigation is happening.\n      const taskId = this.pendingTasks.add();\n      afterNextNavigation(this, () => {\n        // Remove pending task in a microtask to allow for cancelled\n        // initial navigations and redirects within the same task.\n        queueMicrotask(() => this.pendingTasks.remove(taskId));\n      });\n      this.navigationTransitions.handleNavigationRequest({\n        source,\n        restoredState,\n        currentUrlTree: this.currentUrlTree,\n        currentRawUrl: this.currentUrlTree,\n        rawUrl,\n        extras,\n        resolve,\n        reject,\n        promise,\n        currentSnapshot: this.routerState.snapshot,\n        currentRouterState: this.routerState\n      });\n      // Make sure that the error is propagated even though `processNavigations` catch\n      // handler does not rethrow\n      return promise.catch(e => {\n        return Promise.reject(e);\n      });\n    }\n    static {\n      this.ɵfac = function Router_Factory(t) {\n        return new (t || Router)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: Router,\n        factory: Router.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return Router;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction validateCommands(commands) {\n  for (let i = 0; i < commands.length; i++) {\n    const cmd = commands[i];\n    if (cmd == null) {\n      throw new ɵRuntimeError(4008 /* RuntimeErrorCode.NULLISH_COMMAND */, (typeof ngDevMode === 'undefined' || ngDevMode) && `The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\nfunction isPublicRouterEvent(e) {\n  return !(e instanceof BeforeActivateRoutes) && !(e instanceof RedirectRequest);\n}\n\n/**\n * @description\n *\n * When applied to an element in a template, makes that element a link\n * that initiates navigation to a route. Navigation opens one or more routed components\n * in one or more `<router-outlet>` locations on the page.\n *\n * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,\n * the following creates a static link to the route:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * You can use dynamic values to generate the link.\n * For a dynamic link, pass an array of path segments,\n * followed by the params for each segment.\n * For example, `['/team', teamId, 'user', userName, {details: true}]`\n * generates a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one term and combined with dynamic segments.\n * For example, `['/team/11/user', userName, {details: true}]`\n *\n * The input that you provide to the link is treated as a delta to the current URL.\n * For instance, suppose the current URL is `/user/(box//aux:team)`.\n * The link `<a [routerLink]=\"['/user/jim']\">Jim</a>` creates the URL\n * `/user/(jim//aux:team)`.\n * See {@link Router#createUrlTree} for more information.\n *\n * @usageNotes\n *\n * You can use absolute or relative paths in a link, set query parameters,\n * control how parameters are handled, and keep a history of navigation states.\n *\n * ### Relative link paths\n *\n * The first segment name can be prepended with `/`, `./`, or `../`.\n * * If the first segment begins with `/`, the router looks up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router\n *   looks in the children of the current activated route.\n * * If the first segment begins with `../`, the router goes up one level in the route tree.\n *\n * ### Setting and handling query params and fragments\n *\n * The following link adds a query parameter and a fragment to the generated URL:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * By default, the directive constructs the new URL using the given query parameters.\n * The example generates the link: `/user/bob?debug=true#education`.\n *\n * You can instruct the directive to handle query parameters differently\n * by specifying the `queryParamsHandling` option in the link.\n * Allowed values are:\n *\n *  - `'merge'`: Merge the given `queryParams` into the current query params.\n *  - `'preserve'`: Preserve the current query params.\n *\n * For example:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * See {@link UrlCreationOptions#queryParamsHandling}.\n *\n * ### Preserving navigation history\n *\n * You can provide a `state` value to be persisted to the browser's\n * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).\n * For example:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * Use {@link Router#getCurrentNavigation} to retrieve a saved\n * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`\n * event:\n *\n * ```\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nlet RouterLink = /*#__PURE__*/(() => {\n  class RouterLink {\n    constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {\n      this.router = router;\n      this.route = route;\n      this.tabIndexAttribute = tabIndexAttribute;\n      this.renderer = renderer;\n      this.el = el;\n      this.locationStrategy = locationStrategy;\n      /**\n       * Represents an `href` attribute value applied to a host element,\n       * when a host element is `<a>`. For other tags, the value is `null`.\n       */\n      this.href = null;\n      this.commands = null;\n      /** @internal */\n      this.onChanges = new Subject();\n      /**\n       * Passed to {@link Router#createUrlTree} as part of the\n       * `UrlCreationOptions`.\n       * @see {@link UrlCreationOptions#preserveFragment}\n       * @see {@link Router#createUrlTree}\n       */\n      this.preserveFragment = false;\n      /**\n       * Passed to {@link Router#navigateByUrl} as part of the\n       * `NavigationBehaviorOptions`.\n       * @see {@link NavigationBehaviorOptions#skipLocationChange}\n       * @see {@link Router#navigateByUrl}\n       */\n      this.skipLocationChange = false;\n      /**\n       * Passed to {@link Router#navigateByUrl} as part of the\n       * `NavigationBehaviorOptions`.\n       * @see {@link NavigationBehaviorOptions#replaceUrl}\n       * @see {@link Router#navigateByUrl}\n       */\n      this.replaceUrl = false;\n      const tagName = el.nativeElement.tagName?.toLowerCase();\n      this.isAnchorElement = tagName === 'a' || tagName === 'area';\n      if (this.isAnchorElement) {\n        this.subscription = router.events.subscribe(s => {\n          if (s instanceof NavigationEnd) {\n            this.updateHref();\n          }\n        });\n      } else {\n        this.setTabIndexIfNotOnNativeEl('0');\n      }\n    }\n    /**\n     * Modifies the tab index if there was not a tabindex attribute on the element during\n     * instantiation.\n     */\n    setTabIndexIfNotOnNativeEl(newTabIndex) {\n      if (this.tabIndexAttribute != null /* both `null` and `undefined` */ || this.isAnchorElement) {\n        return;\n      }\n      this.applyAttributeValue('tabindex', newTabIndex);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n      if (this.isAnchorElement) {\n        this.updateHref();\n      }\n      // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes\n      // to the RouterLinks it's tracking.\n      this.onChanges.next(this);\n    }\n    /**\n     * Commands to pass to {@link Router#createUrlTree}.\n     *   - **array**: commands to pass to {@link Router#createUrlTree}.\n     *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\n     *   - **null|undefined**: effectively disables the `routerLink`\n     * @see {@link Router#createUrlTree}\n     */\n    set routerLink(commands) {\n      if (commands != null) {\n        this.commands = Array.isArray(commands) ? commands : [commands];\n        this.setTabIndexIfNotOnNativeEl('0');\n      } else {\n        this.commands = null;\n        this.setTabIndexIfNotOnNativeEl(null);\n      }\n    }\n    /** @nodoc */\n    onClick(button, ctrlKey, shiftKey, altKey, metaKey) {\n      const urlTree = this.urlTree;\n      if (urlTree === null) {\n        return true;\n      }\n      if (this.isAnchorElement) {\n        if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n          return true;\n        }\n        if (typeof this.target === 'string' && this.target != '_self') {\n          return true;\n        }\n      }\n      const extras = {\n        skipLocationChange: this.skipLocationChange,\n        replaceUrl: this.replaceUrl,\n        state: this.state,\n        info: this.info\n      };\n      this.router.navigateByUrl(urlTree, extras);\n      // Return `false` for `<a>` elements to prevent default action\n      // and cancel the native behavior, since the navigation is handled\n      // by the Router.\n      return !this.isAnchorElement;\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n      this.subscription?.unsubscribe();\n    }\n    updateHref() {\n      const urlTree = this.urlTree;\n      this.href = urlTree !== null && this.locationStrategy ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree)) : null;\n      const sanitizedValue = this.href === null ? null :\n      // This class represents a directive that can be added to both `<a>` elements,\n      // as well as other elements. As a result, we can't define security context at\n      // compile time. So the security context is deferred to runtime.\n      // The `ɵɵsanitizeUrlOrResourceUrl` selects the necessary sanitizer function\n      // based on the tag and property names. The logic mimics the one from\n      // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.\n      //\n      // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`\n      // instead of applying a value via a renderer, after a final merge of the\n      // `RouterLinkWithHref` directive.\n      ɵɵsanitizeUrlOrResourceUrl(this.href, this.el.nativeElement.tagName.toLowerCase(), 'href');\n      this.applyAttributeValue('href', sanitizedValue);\n    }\n    applyAttributeValue(attrName, attrValue) {\n      const renderer = this.renderer;\n      const nativeElement = this.el.nativeElement;\n      if (attrValue !== null) {\n        renderer.setAttribute(nativeElement, attrName, attrValue);\n      } else {\n        renderer.removeAttribute(nativeElement, attrName);\n      }\n    }\n    get urlTree() {\n      if (this.commands === null) {\n        return null;\n      }\n      return this.router.createUrlTree(this.commands, {\n        // If the `relativeTo` input is not defined, we want to use `this.route` by default.\n        // Otherwise, we should use the value provided by the user in the input.\n        relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,\n        queryParams: this.queryParams,\n        fragment: this.fragment,\n        queryParamsHandling: this.queryParamsHandling,\n        preserveFragment: this.preserveFragment\n      });\n    }\n    static {\n      this.ɵfac = function RouterLink_Factory(t) {\n        return new (t || RouterLink)(i0.ɵɵdirectiveInject(Router), i0.ɵɵdirectiveInject(ActivatedRoute), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.LocationStrategy));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: RouterLink,\n        selectors: [[\"\", \"routerLink\", \"\"]],\n        hostVars: 1,\n        hostBindings: function RouterLink_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function RouterLink_click_HostBindingHandler($event) {\n              return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"target\", ctx.target);\n          }\n        },\n        inputs: {\n          target: \"target\",\n          queryParams: \"queryParams\",\n          fragment: \"fragment\",\n          queryParamsHandling: \"queryParamsHandling\",\n          state: \"state\",\n          info: \"info\",\n          relativeTo: \"relativeTo\",\n          preserveFragment: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"preserveFragment\", \"preserveFragment\", booleanAttribute],\n          skipLocationChange: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"skipLocationChange\", \"skipLocationChange\", booleanAttribute],\n          replaceUrl: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"replaceUrl\", \"replaceUrl\", booleanAttribute],\n          routerLink: \"routerLink\"\n        },\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return RouterLink;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n *\n * @description\n *\n * Tracks whether the linked route of an element is currently active, and allows you\n * to specify one or more CSS classes to add to the element when the linked route\n * is active.\n *\n * Use this directive to create a visual distinction for elements associated with an active route.\n * For example, the following code highlights the word \"Bob\" when the router\n * activates the associated route:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * Whenever the URL is either '/user' or '/user/bob', the \"active-link\" class is\n * added to the anchor tag. If the URL changes, the class is removed.\n *\n * You can set more than one class using a space-separated string or an array.\n * For example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * To add the classes only when the URL matches the link exactly, add the option `exact: true`:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * To directly check the `isActive` status of the link, assign the `RouterLinkActive`\n * instance to a template variable.\n * For example, the following checks the status without assigning any CSS classes:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.\n * For example, the following sets the active-link class on the `<div>`  parent tag\n * when the URL is either '/user/jim' or '/user/bob'.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * The `RouterLinkActive` directive can also be used to set the aria-current attribute\n * to provide an alternative distinction for active elements to visually impaired users.\n *\n * For example, the following code adds the 'active' class to the Home Page link when it is\n * indeed active and in such case also sets its aria-current attribute to 'page':\n *\n * ```\n * <a routerLink=\"/\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Home Page</a>\n * ```\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nlet RouterLinkActive = /*#__PURE__*/(() => {\n  class RouterLinkActive {\n    get isActive() {\n      return this._isActive;\n    }\n    constructor(router, element, renderer, cdr, link) {\n      this.router = router;\n      this.element = element;\n      this.renderer = renderer;\n      this.cdr = cdr;\n      this.link = link;\n      this.classes = [];\n      this._isActive = false;\n      /**\n       * Options to configure how to determine if the router link is active.\n       *\n       * These options are passed to the `Router.isActive()` function.\n       *\n       * @see {@link Router#isActive}\n       */\n      this.routerLinkActiveOptions = {\n        exact: false\n      };\n      /**\n       *\n       * You can use the output `isActiveChange` to get notified each time the link becomes\n       * active or inactive.\n       *\n       * Emits:\n       * true  -> Route is active\n       * false -> Route is inactive\n       *\n       * ```\n       * <a\n       *  routerLink=\"/user/bob\"\n       *  routerLinkActive=\"active-link\"\n       *  (isActiveChange)=\"this.onRouterLinkActive($event)\">Bob</a>\n       * ```\n       */\n      this.isActiveChange = new EventEmitter();\n      this.routerEventsSubscription = router.events.subscribe(s => {\n        if (s instanceof NavigationEnd) {\n          this.update();\n        }\n      });\n    }\n    /** @nodoc */\n    ngAfterContentInit() {\n      // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).\n      of(this.links.changes, of(null)).pipe(mergeAll()).subscribe(_ => {\n        this.update();\n        this.subscribeToEachLinkOnChanges();\n      });\n    }\n    subscribeToEachLinkOnChanges() {\n      this.linkInputChangesSubscription?.unsubscribe();\n      const allLinkChanges = [...this.links.toArray(), this.link].filter(link => !!link).map(link => link.onChanges);\n      this.linkInputChangesSubscription = from(allLinkChanges).pipe(mergeAll()).subscribe(link => {\n        if (this._isActive !== this.isLinkActive(this.router)(link)) {\n          this.update();\n        }\n      });\n    }\n    set routerLinkActive(data) {\n      const classes = Array.isArray(data) ? data : data.split(' ');\n      this.classes = classes.filter(c => !!c);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n      this.update();\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n      this.routerEventsSubscription.unsubscribe();\n      this.linkInputChangesSubscription?.unsubscribe();\n    }\n    update() {\n      if (!this.links || !this.router.navigated) return;\n      queueMicrotask(() => {\n        const hasActiveLinks = this.hasActiveLinks();\n        this.classes.forEach(c => {\n          if (hasActiveLinks) {\n            this.renderer.addClass(this.element.nativeElement, c);\n          } else {\n            this.renderer.removeClass(this.element.nativeElement, c);\n          }\n        });\n        if (hasActiveLinks && this.ariaCurrentWhenActive !== undefined) {\n          this.renderer.setAttribute(this.element.nativeElement, 'aria-current', this.ariaCurrentWhenActive.toString());\n        } else {\n          this.renderer.removeAttribute(this.element.nativeElement, 'aria-current');\n        }\n        // Only emit change if the active state changed.\n        if (this._isActive !== hasActiveLinks) {\n          this._isActive = hasActiveLinks;\n          this.cdr.markForCheck();\n          // Emit on isActiveChange after classes are updated\n          this.isActiveChange.emit(hasActiveLinks);\n        }\n      });\n    }\n    isLinkActive(router) {\n      const options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions :\n      // While the types should disallow `undefined` here, it's possible without strict inputs\n      this.routerLinkActiveOptions.exact || false;\n      return link => {\n        const urlTree = link.urlTree;\n        return urlTree ? router.isActive(urlTree, options) : false;\n      };\n    }\n    hasActiveLinks() {\n      const isActiveCheckFn = this.isLinkActive(this.router);\n      return this.link && isActiveCheckFn(this.link) || this.links.some(isActiveCheckFn);\n    }\n    static {\n      this.ɵfac = function RouterLinkActive_Factory(t) {\n        return new (t || RouterLinkActive)(i0.ɵɵdirectiveInject(Router), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(RouterLink, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: RouterLinkActive,\n        selectors: [[\"\", \"routerLinkActive\", \"\"]],\n        contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ɵɵcontentQuery(dirIndex, RouterLink, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n          }\n        },\n        inputs: {\n          routerLinkActiveOptions: \"routerLinkActiveOptions\",\n          ariaCurrentWhenActive: \"ariaCurrentWhenActive\",\n          routerLinkActive: \"routerLinkActive\"\n        },\n        outputs: {\n          isActiveChange: \"isActiveChange\"\n        },\n        exportAs: [\"routerLinkActive\"],\n        standalone: true,\n        features: [i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return RouterLinkActive;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use instead of `'paths' in options` to be compatible with property renaming\n */\nfunction isActiveMatchOptions(options) {\n  return !!options.paths;\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nclass PreloadingStrategy {}\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\nlet PreloadAllModules = /*#__PURE__*/(() => {\n  class PreloadAllModules {\n    preload(route, fn) {\n      return fn().pipe(catchError(() => of(null)));\n    }\n    static {\n      this.ɵfac = function PreloadAllModules_Factory(t) {\n        return new (t || PreloadAllModules)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: PreloadAllModules,\n        factory: PreloadAllModules.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return PreloadAllModules;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\nlet NoPreloading = /*#__PURE__*/(() => {\n  class NoPreloading {\n    preload(route, fn) {\n      return of(null);\n    }\n    static {\n      this.ɵfac = function NoPreloading_Factory(t) {\n        return new (t || NoPreloading)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: NoPreloading,\n        factory: NoPreloading.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return NoPreloading;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\nlet RouterPreloader = /*#__PURE__*/(() => {\n  class RouterPreloader {\n    constructor(router, compiler, injector, preloadingStrategy, loader) {\n      this.router = router;\n      this.injector = injector;\n      this.preloadingStrategy = preloadingStrategy;\n      this.loader = loader;\n    }\n    setUpPreloading() {\n      this.subscription = this.router.events.pipe(filter(e => e instanceof NavigationEnd), concatMap(() => this.preload())).subscribe(() => {});\n    }\n    preload() {\n      return this.processRoutes(this.injector, this.router.config);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n    processRoutes(injector, routes) {\n      const res = [];\n      for (const route of routes) {\n        if (route.providers && !route._injector) {\n          route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);\n        }\n        const injectorForCurrentRoute = route._injector ?? injector;\n        const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;\n        // Note that `canLoad` is only checked as a condition that prevents `loadChildren` and not\n        // `loadComponent`. `canLoad` guards only block loading of child routes by design. This\n        // happens as a consequence of needing to descend into children for route matching immediately\n        // while component loading is deferred until route activation. Because `canLoad` guards can\n        // have side effects, we cannot execute them here so we instead skip preloading altogether\n        // when present. Lastly, it remains to be decided whether `canLoad` should behave this way\n        // at all. Code splitting and lazy loading is separate from client-side authorization checks\n        // and should not be used as a security measure to prevent loading of code.\n        if (route.loadChildren && !route._loadedRoutes && route.canLoad === undefined || route.loadComponent && !route._loadedComponent) {\n          res.push(this.preloadConfig(injectorForCurrentRoute, route));\n        }\n        if (route.children || route._loadedRoutes) {\n          res.push(this.processRoutes(injectorForChildren, route.children ?? route._loadedRoutes));\n        }\n      }\n      return from(res).pipe(mergeAll());\n    }\n    preloadConfig(injector, route) {\n      return this.preloadingStrategy.preload(route, () => {\n        let loadedChildren$;\n        if (route.loadChildren && route.canLoad === undefined) {\n          loadedChildren$ = this.loader.loadChildren(injector, route);\n        } else {\n          loadedChildren$ = of(null);\n        }\n        const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap(config => {\n          if (config === null) {\n            return of(void 0);\n          }\n          route._loadedRoutes = config.routes;\n          route._loadedInjector = config.injector;\n          // If the loaded config was a module, use that as the module/module injector going\n          // forward. Otherwise, continue using the current module/module injector.\n          return this.processRoutes(config.injector ?? injector, config.routes);\n        }));\n        if (route.loadComponent && !route._loadedComponent) {\n          const loadComponent$ = this.loader.loadComponent(route);\n          return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());\n        } else {\n          return recursiveLoadChildren$;\n        }\n      });\n    }\n    static {\n      this.ɵfac = function RouterPreloader_Factory(t) {\n        return new (t || RouterPreloader)(i0.ɵɵinject(Router), i0.ɵɵinject(i0.Compiler), i0.ɵɵinject(i0.EnvironmentInjector), i0.ɵɵinject(PreloadingStrategy), i0.ɵɵinject(RouterConfigLoader));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: RouterPreloader,\n        factory: RouterPreloader.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return RouterPreloader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst ROUTER_SCROLLER = /*#__PURE__*/new InjectionToken('');\nlet RouterScroller = /*#__PURE__*/(() => {\n  class RouterScroller {\n    /** @nodoc */\n    constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {\n      this.urlSerializer = urlSerializer;\n      this.transitions = transitions;\n      this.viewportScroller = viewportScroller;\n      this.zone = zone;\n      this.options = options;\n      this.lastId = 0;\n      this.lastSource = 'imperative';\n      this.restoredId = 0;\n      this.store = {};\n      this.environmentInjector = inject(EnvironmentInjector);\n      // Default both options to 'disabled'\n      options.scrollPositionRestoration ||= 'disabled';\n      options.anchorScrolling ||= 'disabled';\n    }\n    init() {\n      // we want to disable the automatic scrolling because having two places\n      // responsible for scrolling results race conditions, especially given\n      // that browser don't implement this behavior consistently\n      if (this.options.scrollPositionRestoration !== 'disabled') {\n        this.viewportScroller.setHistoryScrollRestoration('manual');\n      }\n      this.routerEventsSubscription = this.createScrollEvents();\n      this.scrollEventsSubscription = this.consumeScrollEvents();\n    }\n    createScrollEvents() {\n      return this.transitions.events.subscribe(e => {\n        if (e instanceof NavigationStart) {\n          // store the scroll position of the current stable navigations.\n          this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n          this.lastSource = e.navigationTrigger;\n          this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n        } else if (e instanceof NavigationEnd) {\n          this.lastId = e.id;\n          this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);\n        } else if (e instanceof NavigationSkipped && e.code === NavigationSkippedCode.IgnoredSameUrlNavigation) {\n          this.lastSource = undefined;\n          this.restoredId = 0;\n          this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);\n        }\n      });\n    }\n    consumeScrollEvents() {\n      return this.transitions.events.subscribe(e => {\n        if (!(e instanceof Scroll)) return;\n        // a popstate event. The pop state event will always ignore anchor scrolling.\n        if (e.position) {\n          if (this.options.scrollPositionRestoration === 'top') {\n            this.viewportScroller.scrollToPosition([0, 0]);\n          } else if (this.options.scrollPositionRestoration === 'enabled') {\n            this.viewportScroller.scrollToPosition(e.position);\n          }\n          // imperative navigation \"forward\"\n        } else {\n          if (e.anchor && this.options.anchorScrolling === 'enabled') {\n            this.viewportScroller.scrollToAnchor(e.anchor);\n          } else if (this.options.scrollPositionRestoration !== 'disabled') {\n            this.viewportScroller.scrollToPosition([0, 0]);\n          }\n        }\n      });\n    }\n    scheduleScrollEvent(routerEvent, anchor) {\n      this.zone.runOutsideAngular(async () => {\n        // The scroll event needs to be delayed until after change detection. Otherwise we may\n        // attempt to restore the scroll position before the router outlet has fully rendered the\n        // component by executing its update block of the template function.\n        await new Promise(resolve => {\n          // TODO(atscott): Attempt to remove the setTimeout in a future PR.\n          setTimeout(() => {\n            resolve();\n          });\n          afterNextRender(() => {\n            resolve();\n          }, {\n            injector: this.environmentInjector\n          });\n        });\n        this.zone.run(() => {\n          this.transitions.events.next(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n        });\n      });\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n      this.routerEventsSubscription?.unsubscribe();\n      this.scrollEventsSubscription?.unsubscribe();\n    }\n    static {\n      this.ɵfac = function RouterScroller_Factory(t) {\n        i0.ɵɵinvalidFactory();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: RouterScroller,\n        factory: RouterScroller.ɵfac\n      });\n    }\n  }\n  return RouterScroller;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Sets up providers necessary to enable `Router` functionality for the application.\n * Allows to configure a set of routes as well as extra features that should be enabled.\n *\n * @usageNotes\n *\n * Basic example of how you can add a Router to your application:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent, {\n *   providers: [provideRouter(appRoutes)]\n * });\n * ```\n *\n * You can also enable optional features in the Router by adding functions from the `RouterFeatures`\n * type:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes,\n *         withDebugTracing(),\n *         withRouterConfig({paramsInheritanceStrategy: 'always'}))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link RouterFeatures}\n *\n * @publicApi\n * @param routes A set of `Route`s to use for the application routing table.\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to setup a Router.\n */\nfunction provideRouter(routes, ...features) {\n  return makeEnvironmentProviders([{\n    provide: ROUTES,\n    multi: true,\n    useValue: routes\n  }, typeof ngDevMode === 'undefined' || ngDevMode ? {\n    provide: ROUTER_IS_PROVIDED,\n    useValue: true\n  } : [], {\n    provide: ActivatedRoute,\n    useFactory: rootRoute,\n    deps: [Router]\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: getBootstrapListener\n  }, features.map(feature => feature.ɵproviders)]);\n}\nfunction rootRoute(router) {\n  return router.routerState.root;\n}\n/**\n * Helper function to create an object that represents a Router feature.\n */\nfunction routerFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\n/**\n * An Injection token used to indicate whether `provideRouter` or `RouterModule.forRoot` was ever\n * called.\n */\nconst ROUTER_IS_PROVIDED = /*#__PURE__*/new InjectionToken('', {\n  providedIn: 'root',\n  factory: () => false\n});\nconst routerIsProvidedDevModeCheck = {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useFactory() {\n    return () => {\n      if (!inject(ROUTER_IS_PROVIDED)) {\n        console.warn('`provideRoutes` was called without `provideRouter` or `RouterModule.forRoot`. ' + 'This is likely a mistake.');\n      }\n    };\n  }\n};\n/**\n * Registers a [DI provider](guide/glossary#provider) for a set of routes.\n * @param routes The route configuration to provide.\n *\n * @usageNotes\n *\n * ```\n * @NgModule({\n *   providers: [provideRoutes(ROUTES)]\n * })\n * class LazyLoadedChildModule {}\n * ```\n *\n * @deprecated If necessary, provide routes using the `ROUTES` `InjectionToken`.\n * @see {@link ROUTES}\n * @publicApi\n */\nfunction provideRoutes(routes) {\n  return [{\n    provide: ROUTES,\n    multi: true,\n    useValue: routes\n  }, typeof ngDevMode === 'undefined' || ngDevMode ? routerIsProvidedDevModeCheck : []];\n}\n/**\n * Enables customizable scrolling behavior for router navigations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable scrolling feature:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withInMemoryScrolling())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link ViewportScroller}\n *\n * @publicApi\n * @param options Set of configuration parameters to customize scrolling behavior, see\n *     `InMemoryScrollingOptions` for additional information.\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withInMemoryScrolling(options = {}) {\n  const providers = [{\n    provide: ROUTER_SCROLLER,\n    useFactory: () => {\n      const viewportScroller = inject(ViewportScroller);\n      const zone = inject(NgZone);\n      const transitions = inject(NavigationTransitions);\n      const urlSerializer = inject(UrlSerializer);\n      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, options);\n    }\n  }];\n  return routerFeature(4 /* RouterFeatureKind.InMemoryScrollingFeature */, providers);\n}\nfunction getBootstrapListener() {\n  const injector = inject(Injector);\n  return bootstrappedComponentRef => {\n    const ref = injector.get(ApplicationRef);\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n    const router = injector.get(Router);\n    const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n    if (injector.get(INITIAL_NAVIGATION) === 1 /* InitialNavigation.EnabledNonBlocking */) {\n      router.initialNavigation();\n    }\n    injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();\n    injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    if (!bootstrapDone.closed) {\n      bootstrapDone.next();\n      bootstrapDone.complete();\n      bootstrapDone.unsubscribe();\n    }\n  };\n}\n/**\n * A subject used to indicate that the bootstrapping phase is done. When initial navigation is\n * `enabledBlocking`, the first navigation waits until bootstrapping is finished before continuing\n * to the activation phase.\n */\nconst BOOTSTRAP_DONE = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'bootstrap done indicator' : '', {\n  factory: () => {\n    return new Subject();\n  }\n});\nconst INITIAL_NAVIGATION = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'initial navigation' : '', {\n  providedIn: 'root',\n  factory: () => 1 /* InitialNavigation.EnabledNonBlocking */\n});\n/**\n * Configures initial navigation to start before the root component is created.\n *\n * The bootstrap is blocked until the initial navigation is complete. This value is required for\n * [server-side rendering](guide/ssr) to work.\n *\n * @usageNotes\n *\n * Basic example of how you can enable this navigation behavior:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withEnabledBlockingInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @publicApi\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withEnabledBlockingInitialNavigation() {\n  const providers = [{\n    provide: INITIAL_NAVIGATION,\n    useValue: 0 /* InitialNavigation.EnabledBlocking */\n  }, {\n    provide: APP_INITIALIZER,\n    multi: true,\n    deps: [Injector],\n    useFactory: injector => {\n      const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());\n      return () => {\n        return locationInitialized.then(() => {\n          return new Promise(resolve => {\n            const router = injector.get(Router);\n            const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n            afterNextNavigation(router, () => {\n              // Unblock APP_INITIALIZER in case the initial navigation was canceled or errored\n              // without a redirect.\n              resolve(true);\n            });\n            injector.get(NavigationTransitions).afterPreactivation = () => {\n              // Unblock APP_INITIALIZER once we get to `afterPreactivation`. At this point, we\n              // assume activation will complete successfully (even though this is not\n              // guaranteed).\n              resolve(true);\n              return bootstrapDone.closed ? of(void 0) : bootstrapDone;\n            };\n            router.initialNavigation();\n          });\n        });\n      };\n    }\n  }];\n  return routerFeature(2 /* RouterFeatureKind.EnabledBlockingInitialNavigationFeature */, providers);\n}\n/**\n * Disables initial navigation.\n *\n * Use if there is a reason to have more control over when the router starts its initial navigation\n * due to some complex initialization logic.\n *\n * @usageNotes\n *\n * Basic example of how you can disable initial navigation:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDisabledInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withDisabledInitialNavigation() {\n  const providers = [{\n    provide: APP_INITIALIZER,\n    multi: true,\n    useFactory: () => {\n      const router = inject(Router);\n      return () => {\n        router.setUpLocationChangeListener();\n      };\n    }\n  }, {\n    provide: INITIAL_NAVIGATION,\n    useValue: 2 /* InitialNavigation.Disabled */\n  }];\n  return routerFeature(3 /* RouterFeatureKind.DisabledInitialNavigationFeature */, providers);\n}\n/**\n * Enables logging of all internal navigation events to the console.\n * Extra logging might be useful for debugging purposes to inspect Router event sequence.\n *\n * @usageNotes\n *\n * Basic example of how you can enable debug tracing:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDebugTracing())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withDebugTracing() {\n  let providers = [];\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    providers = [{\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useFactory: () => {\n        const router = inject(Router);\n        return () => router.events.subscribe(e => {\n          // tslint:disable:no-console\n          console.group?.(`Router Event: ${e.constructor.name}`);\n          console.log(stringifyEvent(e));\n          console.log(e);\n          console.groupEnd?.();\n          // tslint:enable:no-console\n        });\n      }\n    }];\n  } else {\n    providers = [];\n  }\n  return routerFeature(1 /* RouterFeatureKind.DebugTracingFeature */, providers);\n}\nconst ROUTER_PRELOADER = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router preloader' : '');\n/**\n * Allows to configure a preloading strategy to use. The strategy is configured by providing a\n * reference to a class that implements a `PreloadingStrategy`.\n *\n * @usageNotes\n *\n * Basic example of how you can configure preloading:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withPreloading(PreloadAllModules))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param preloadingStrategy A reference to a class that implements a `PreloadingStrategy` that\n *     should be used.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withPreloading(preloadingStrategy) {\n  const providers = [{\n    provide: ROUTER_PRELOADER,\n    useExisting: RouterPreloader\n  }, {\n    provide: PreloadingStrategy,\n    useExisting: preloadingStrategy\n  }];\n  return routerFeature(0 /* RouterFeatureKind.PreloadingFeature */, providers);\n}\n/**\n * Allows to provide extra parameters to configure Router.\n *\n * @usageNotes\n *\n * Basic example of how you can provide extra configuration options:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withRouterConfig({\n *          onSameUrlNavigation: 'reload'\n *       }))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param options A set of parameters to configure Router, see `RouterConfigOptions` for\n *     additional information.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withRouterConfig(options) {\n  const providers = [{\n    provide: ROUTER_CONFIGURATION,\n    useValue: options\n  }];\n  return routerFeature(5 /* RouterFeatureKind.RouterConfigurationFeature */, providers);\n}\n/**\n * Provides the location strategy that uses the URL fragment instead of the history API.\n *\n * @usageNotes\n *\n * Basic example of how you can use the hash location option:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withHashLocation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link HashLocationStrategy}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withHashLocation() {\n  const providers = [{\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  }];\n  return routerFeature(6 /* RouterFeatureKind.RouterHashLocationFeature */, providers);\n}\n/**\n * Subscribes to the Router's navigation events and calls the given function when a\n * `NavigationError` happens.\n *\n * This function is run inside application's [injection context](guide/dependency-injection-context)\n * so you can use the [`inject`](api/core/inject) function.\n *\n * @usageNotes\n *\n * Basic example of how you can use the error handler option:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withNavigationErrorHandler((e: NavigationError) =>\n * inject(MyErrorTracker).trackError(e)))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link NavigationError}\n * @see {@link core/inject}\n * @see {@link runInInjectionContext}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withNavigationErrorHandler(fn) {\n  const providers = [{\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useValue: () => {\n      const injector = inject(EnvironmentInjector);\n      inject(Router).events.subscribe(e => {\n        if (e instanceof NavigationError) {\n          runInInjectionContext(injector, () => fn(e));\n        }\n      });\n    }\n  }];\n  return routerFeature(7 /* RouterFeatureKind.NavigationErrorHandlerFeature */, providers);\n}\n/**\n * Enables binding information from the `Router` state directly to the inputs of the component in\n * `Route` configurations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withComponentInputBinding())\n *     ]\n *   }\n * );\n * ```\n *\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withComponentInputBinding() {\n  const providers = [RoutedComponentInputBinder, {\n    provide: INPUT_BINDER,\n    useExisting: RoutedComponentInputBinder\n  }];\n  return routerFeature(8 /* RouterFeatureKind.ComponentInputBindingFeature */, providers);\n}\n/**\n * Enables view transitions in the Router by running the route activation and deactivation inside of\n * `document.startViewTransition`.\n *\n * Note: The View Transitions API is not available in all browsers. If the browser does not support\n * view transitions, the Router will not attempt to start a view transition and continue processing\n * the navigation as usual.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withViewTransitions())\n *     ]\n *   }\n * );\n * ```\n *\n * @returns A set of providers for use with `provideRouter`.\n * @see https://developer.chrome.com/docs/web-platform/view-transitions/\n * @see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\n * @experimental\n */\nfunction withViewTransitions(options) {\n  const providers = [{\n    provide: CREATE_VIEW_TRANSITION,\n    useValue: createViewTransition\n  }, {\n    provide: VIEW_TRANSITION_OPTIONS,\n    useValue: {\n      skipNextTransition: !!options?.skipInitialTransition,\n      ...options\n    }\n  }];\n  return routerFeature(9 /* RouterFeatureKind.ViewTransitionsFeature */, providers);\n}\n\n/**\n * The directives defined in the `RouterModule`.\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, ɵEmptyOutletComponent];\n/**\n * @docsNotRequired\n */\nconst ROUTER_FORROOT_GUARD = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router duplicate forRoot guard' : 'ROUTER_FORROOT_GUARD');\n// TODO(atscott): All of these except `ActivatedRoute` are `providedIn: 'root'`. They are only kept\n// here to avoid a breaking change whereby the provider order matters based on where the\n// `RouterModule`/`RouterTestingModule` is imported. These can/should be removed as a \"breaking\"\n// change in a major version.\nconst ROUTER_PROVIDERS = [Location, {\n  provide: UrlSerializer,\n  useClass: DefaultUrlSerializer\n}, Router, ChildrenOutletContexts, {\n  provide: ActivatedRoute,\n  useFactory: rootRoute,\n  deps: [Router]\n}, RouterConfigLoader,\n// Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can\n// be removed when `provideRoutes` is removed.\ntypeof ngDevMode === 'undefined' || ngDevMode ? {\n  provide: ROUTER_IS_PROVIDED,\n  useValue: true\n} : []];\n/**\n * @description\n *\n * Adds directives and providers for in-app navigation among views defined in an application.\n * Use the Angular `Router` service to declaratively specify application states and manage state\n * transitions.\n *\n * You can import this NgModule multiple times, once for each lazy-loaded bundle.\n * However, only one `Router` service can be active.\n * To ensure this, there are two ways to register routes when importing this module:\n *\n * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given\n * routes, and the `Router` service itself.\n * * The `forChild()` method creates an `NgModule` that contains all the directives and the given\n * routes, but does not include the `Router` service.\n *\n * @see [Routing and Navigation guide](guide/router) for an\n * overview of how the `Router` service should be used.\n *\n * @publicApi\n */\nlet RouterModule = /*#__PURE__*/(() => {\n  class RouterModule {\n    constructor(guard) {}\n    /**\n     * Creates and configures a module with all the router providers and directives.\n     * Optionally sets up an application listener to perform an initial navigation.\n     *\n     * When registering the NgModule at the root, import as follows:\n     *\n     * ```\n     * @NgModule({\n     *   imports: [RouterModule.forRoot(ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * @param routes An array of `Route` objects that define the navigation paths for the application.\n     * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\n     * @return The new `NgModule`.\n     *\n     */\n    static forRoot(routes, config) {\n      return {\n        ngModule: RouterModule,\n        providers: [ROUTER_PROVIDERS, typeof ngDevMode === 'undefined' || ngDevMode ? config?.enableTracing ? withDebugTracing().ɵproviders : [] : [], {\n          provide: ROUTES,\n          multi: true,\n          useValue: routes\n        }, {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]]\n        }, {\n          provide: ROUTER_CONFIGURATION,\n          useValue: config ? config : {}\n        }, config?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(), provideRouterScroller(), config?.preloadingStrategy ? withPreloading(config.preloadingStrategy).ɵproviders : [], config?.initialNavigation ? provideInitialNavigation(config) : [], config?.bindToComponentInputs ? withComponentInputBinding().ɵproviders : [], config?.enableViewTransitions ? withViewTransitions().ɵproviders : [], provideRouterInitializer()]\n      };\n    }\n    /**\n     * Creates a module with all the router directives and a provider registering routes,\n     * without creating a new Router service.\n     * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:\n     *\n     * ```\n     * @NgModule({\n     *   imports: [RouterModule.forChild(ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * @param routes An array of `Route` objects that define the navigation paths for the submodule.\n     * @return The new NgModule.\n     *\n     */\n    static forChild(routes) {\n      return {\n        ngModule: RouterModule,\n        providers: [{\n          provide: ROUTES,\n          multi: true,\n          useValue: routes\n        }]\n      };\n    }\n    static {\n      this.ɵfac = function RouterModule_Factory(t) {\n        return new (t || RouterModule)(i0.ɵɵinject(ROUTER_FORROOT_GUARD, 8));\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: RouterModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return RouterModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * For internal use by `RouterModule` only. Note that this differs from `withInMemoryRouterScroller`\n * because it reads from the `ExtraOptions` which should not be used in the standalone world.\n */\nfunction provideRouterScroller() {\n  return {\n    provide: ROUTER_SCROLLER,\n    useFactory: () => {\n      const viewportScroller = inject(ViewportScroller);\n      const zone = inject(NgZone);\n      const config = inject(ROUTER_CONFIGURATION);\n      const transitions = inject(NavigationTransitions);\n      const urlSerializer = inject(UrlSerializer);\n      if (config.scrollOffset) {\n        viewportScroller.setOffset(config.scrollOffset);\n      }\n      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config);\n    }\n  };\n}\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` should\n// provide hash location directly via `{provide: LocationStrategy, useClass: HashLocationStrategy}`.\nfunction provideHashLocationStrategy() {\n  return {\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  };\n}\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` does not\n// need this at all because `PathLocationStrategy` is the default factory for `LocationStrategy`.\nfunction providePathLocationStrategy() {\n  return {\n    provide: LocationStrategy,\n    useClass: PathLocationStrategy\n  };\n}\nfunction provideForRootGuard(router) {\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && router) {\n    throw new ɵRuntimeError(4007 /* RuntimeErrorCode.FOR_ROOT_CALLED_TWICE */, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector.` + ` Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n// Note: For internal use only with `RouterModule`. Standalone router setup with `provideRouter`\n// users call `withXInitialNavigation` directly.\nfunction provideInitialNavigation(config) {\n  return [config.initialNavigation === 'disabled' ? withDisabledInitialNavigation().ɵproviders : [], config.initialNavigation === 'enabledBlocking' ? withEnabledBlockingInitialNavigation().ɵproviders : []];\n}\n// TODO(atscott): This should not be in the public API\n/**\n * A [DI token](guide/glossary/#di-token) for the router initializer that\n * is called after the app is bootstrapped.\n *\n * @publicApi\n */\nconst ROUTER_INITIALIZER = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Router Initializer' : '');\nfunction provideRouterInitializer() {\n  return [\n  // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just\n  // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.\n  {\n    provide: ROUTER_INITIALIZER,\n    useFactory: getBootstrapListener\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useExisting: ROUTER_INITIALIZER\n  }];\n}\n\n/**\n * Maps an array of injectable classes with canMatch functions to an array of equivalent\n * `CanMatchFn` for use in a `Route` definition.\n *\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\n *\n * @publicApi\n * @see {@link Route}\n */\nfunction mapToCanMatch(providers) {\n  return providers.map(provider => (...params) => inject(provider).canMatch(...params));\n}\n/**\n * Maps an array of injectable classes with canActivate functions to an array of equivalent\n * `CanActivateFn` for use in a `Route` definition.\n *\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\n *\n * @publicApi\n * @see {@link Route}\n */\nfunction mapToCanActivate(providers) {\n  return providers.map(provider => (...params) => inject(provider).canActivate(...params));\n}\n/**\n * Maps an array of injectable classes with canActivateChild functions to an array of equivalent\n * `CanActivateChildFn` for use in a `Route` definition.\n *\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\n *\n * @publicApi\n * @see {@link Route}\n */\nfunction mapToCanActivateChild(providers) {\n  return providers.map(provider => (...params) => inject(provider).canActivateChild(...params));\n}\n/**\n * Maps an array of injectable classes with canDeactivate functions to an array of equivalent\n * `CanDeactivateFn` for use in a `Route` definition.\n *\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\n *\n * @publicApi\n * @see {@link Route}\n */\nfunction mapToCanDeactivate(providers) {\n  return providers.map(provider => (...params) => inject(provider).canDeactivate(...params));\n}\n/**\n * Maps an injectable class with a resolve function to an equivalent `ResolveFn`\n * for use in a `Route` definition.\n *\n * Usage {@example router/utils/functional_guards.ts region='Resolve'}\n *\n * @publicApi\n * @see {@link Route}\n */\nfunction mapToResolve(provider) {\n  return (...params) => inject(provider).resolve(...params);\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the router package.\n */\n/**\n * @publicApi\n */\nconst VERSION = /*#__PURE__*/new Version('17.3.12');\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ActivatedRoute, ActivatedRouteSnapshot, ActivationEnd, ActivationStart, BaseRouteReuseStrategy, ChildActivationEnd, ChildActivationStart, ChildrenOutletContexts, DefaultTitleStrategy, DefaultUrlSerializer, EventType, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationCancellationCode, NavigationEnd, NavigationError, NavigationSkipped, NavigationSkippedCode, NavigationStart, NoPreloading, OutletContext, PRIMARY_OUTLET, PreloadAllModules, PreloadingStrategy, ROUTER_CONFIGURATION, ROUTER_INITIALIZER, ROUTES, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteReuseStrategy, Router, RouterEvent, RouterLink, RouterLinkActive, RouterLink as RouterLinkWithHref, RouterModule, RouterOutlet, RouterPreloader, RouterState, RouterStateSnapshot, RoutesRecognized, Scroll, TitleStrategy, UrlHandlingStrategy, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, VERSION, convertToParamMap, createUrlTreeFromSnapshot, defaultUrlMatcher, mapToCanActivate, mapToCanActivateChild, mapToCanDeactivate, mapToCanMatch, mapToResolve, provideRouter, provideRoutes, withComponentInputBinding, withDebugTracing, withDisabledInitialNavigation, withEnabledBlockingInitialNavigation, withHashLocation, withInMemoryScrolling, withNavigationErrorHandler, withPreloading, withRouterConfig, withViewTransitions, ɵEmptyOutletComponent, ROUTER_PROVIDERS as ɵROUTER_PROVIDERS, afterNextNavigation as ɵafterNextNavigation, loadChildren as ɵloadChildren };\n","/**\n * Stellt den Typ vom Zeitslot dar\n */\nexport enum TimeSliceType\n{\n    /**\n     * Der Zeitslot stellt Fahrzeit dar\n     */\n    Transfer = 1,\n\n    /**\n     * Der Zeitslot stellt Arbeitszeit dar\n     */\n    Work = 2,\n\n    /**\n     * Der Zeitslot stellt Pausenzeit dar\n     */\n    Pause = 3\n}","import { TimeSlice } from '../entities/TimeSlice';\nimport { TimeSliceType } from '../entities/TimeSliceType';\nimport { WorkDay } from '../entities/WorkDay';\n\n/**\n * Der Startwert vom X-Wert der ViewBox von der SVG\n */\nconst viewBoxXMin = 0;\n/**\n * Der Startwert vom Y-Wert der ViewBox von der SVG\n */\nconst viewBoxYMin = 0;\n/**\n * Der Endwert vom X-Wert der ViewBox von der SVG\n */\nconst viewBoxXMax = 1000;\n/**\n * Der Endwert vom Y-Wert der ViewBox von der SVG\n */\nconst viewBoxYMax = 1000;\n\n/**\n * Die Höhe vom Header in der Grafik (in ViewBox-Einheit)\n */\nconst headerHeight = 40;\n/**\n * Die Höhe von einem Balken der einen Tag darstellt in der Grafik\n */\nconst timeBarHeight = 60;\n/**\n * Die Höhe vom Zeitstrahl, der unter den Tag-Balken angezeigt wird.\n */\nconst bottomAxisHeight = 30;\n/**\n * Der Abstand vom Zeitstrahl nach oben zum Tag-Balken.\n */\nconst bottomAxisTopMargin = 5;\n/**\n * Der linke Seitenabstand von der Grafik.\n */\nconst leftPadding = 10;\n/**\n * Der rechte Seitenabstand von der Grafik.\n */\nconst rightPadding = 10;\n\n/**\n * Der Abstand vom Tag-Balken nach untern zum Zeitstrahl\n */\nconst timeBarPadding = 5;\n\n/**\n * Die Länge von einem vertikalen Stich im Zeitstrahl\n */\nconst scalarTickLength = 5;\n\n/**\n * Die Höhe vom Text im Zeitstrahl\n */\nconst scalarTextHeight = bottomAxisHeight - scalarTickLength;\n\n/**\n * Die Anzahl der Millisekunden in einem Tag\n */\nconst millisecondsInDay = 24 * 60 * 60 * 1000;\n\n/**\n * Hashtable mit den Stunden pro Time-Slice-Typ\n */\ninterface HoursByTypeHashTable {\n    [key: number]: number\n}\n\n/**\n * Beinhaltet Funktionen zum Erstellen eines SVG-Diagramms\n */\nexport class StateDiagramm\n{\n    // #region Create\n    /**\n     * Erstellt ein State-Diagramm-SVG\n     * \n     * @param workDays Die Arbeitstage, die im Diagramm angezeigt werden soll\n     * @returns Gibt die Grafik als SVG zurück\n     */\n    public static Create(workDays: Array<WorkDay>): SVGSVGElement\n    {\n        let timeSliceTypeColorHashTable: { [key: number ]: string } = {};\n        timeSliceTypeColorHashTable[TimeSliceType.Transfer] = \"#00FF00\";\n        timeSliceTypeColorHashTable[TimeSliceType.Work] = \"#FF0000\";\n\n        let svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svgElement.setAttribute(\"viewBox\", `${viewBoxXMin} ${viewBoxYMin} ${viewBoxXMax} ${viewBoxYMax}`);\n\n        for (let workDayIndex = 0; workDayIndex < workDays.length; workDayIndex++)\n        {\n            let currentWorkDay = workDays[workDayIndex];\n\n            let viewBoxSliceYMin = viewBoxYMin + (headerHeight + timeBarHeight + bottomAxisHeight) * workDayIndex;\n\n            let headerText = StateDiagramm.CreateHeaderTextElement(\n                viewBoxSliceYMin,\n                currentWorkDay.Date,\n                StateDiagramm.SummericeHoursInTimeSlicesByType(currentWorkDay.TimeSlots)\n            );\n            svgElement.appendChild(headerText);\n\n            let minMintuesOfDay = 5 * 60 + 30;\n            let maxMinutesOfDay = 18 * 60 + 30;\n\n            let scalePath = StateDiagramm.CreateScalarPathElement(\n                viewBoxXMin + leftPadding,\n                viewBoxSliceYMin + headerHeight + timeBarHeight,\n                viewBoxYMax - (leftPadding + rightPadding),\n                minMintuesOfDay,\n                maxMinutesOfDay\n            );\n            svgElement.appendChild(scalePath);\n\n            let scalarTextElements = StateDiagramm.CreateBottomLegend(\n                viewBoxXMin + leftPadding,\n                viewBoxSliceYMin + headerHeight + timeBarHeight,\n                minMintuesOfDay,\n                maxMinutesOfDay\n            );\n            for(let scalarText of scalarTextElements)\n            {\n                svgElement.appendChild(scalarText);\n            }\n\n            for (let timeSlice of currentWorkDay.TimeSlots)\n            {\n                let sliceRect = StateDiagramm.CreateTimeSlice(\n                    timeSliceTypeColorHashTable,\n                    timeSlice,\n                    viewBoxSliceYMin + headerHeight,\n                    minMintuesOfDay,\n                    maxMinutesOfDay\n                );\n\n                if (sliceRect != null)\n                {\n                    svgElement.appendChild(sliceRect);\n                }\n            }\n\n        }              \n\n        return svgElement;\n    }\n    // #endregion\n\n    // #region CreateHeaderTextElement\n    /**\n     * Erstellt das SVG-Text-Element für einen Tag-Balken in der Grafik\n     * \n     * @param yStart Der Y-Startwert von dem aus der Text nach unten positioniert weren soll\n     * @param date Das Datum vom Tag, der im Header dargestellt werden soll\n     * @param hoursByType Die Stunden vom Tag summiert pro Slice-Typ\n     * \n     * @returns Gibt das SVGTextElement für den Header zurück.\n     */\n    private static CreateHeaderTextElement(yStart: number, date: Date, hoursByType: HoursByTypeHashTable): SVGTextElement\n    {\n        let headerMiddle = (viewBoxXMax - (leftPadding + rightPadding)) / 2 + leftPadding;\n\n        let haederText = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        haederText.setAttribute(\"x\", headerMiddle.toString());\n        haederText.setAttribute(\"y\", (yStart + headerHeight - 5).toString());\n        haederText.setAttribute(\"text-anchor\", \"middle\");\n\n        let dateString = `${date.getDate().toString().padStart(2, \"0\")}.${(date.getMonth() + 1).toString().padStart(2, \"0\")}.${date.getFullYear()}`;\n\n        let workHours = 0;\n        let transferHours = 0;\n\n        if (typeof hoursByType[TimeSliceType.Work] === \"number\")\n        {\n            workHours = hoursByType[TimeSliceType.Work];\n        }\n        if (typeof hoursByType[TimeSliceType.Transfer] === \"number\")\n        {\n            transferHours = hoursByType[TimeSliceType.Transfer];\n        }\n\n        haederText.innerHTML = `${dateString} - ${StateDiagramm.HourNumberToHourMinuteString(workHours + transferHours)}`;\n\n        if (transferHours > 0)\n        {\n            haederText.innerHTML += ` (davon ${StateDiagramm.HourNumberToHourMinuteString(transferHours)} Fahrzeit)`\n        }\n\n        return haederText;\n    }\n    // #endregion\n\n    // #region HourNumberToHourMinuteString\n    /**\n     * Erstellt anhand von einer Stundenanzahl (mit Komma) eines String im Format HH:MM\n     * \n     * @param number Die Anzahl der Stunden (kann Kommawerte für Minuten beinhalten)\n     * @returns Gibt den String zurück\n     */\n    private static HourNumberToHourMinuteString(number: number): string\n    {\n        let fullHours = Math.floor(number);\n        let minutes = Math.floor(number % 1 * 60);\n\n        return `${fullHours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}`;\n    }\n    // #endregion\n\n    // #region SummericeHoursInTimeSlicesByType\n    /**\n     * Summiert die Stunden in den angegeben TimeSlices pro Typ\n     * \n     * @param timeSlices Die Timeslices deren Zeiten zusammengezäht werden sollen\n     * @returns Gibt die Zusammengezählten Stunden zurück\n     */\n    private static SummericeHoursInTimeSlicesByType(timeSlices: Array<TimeSlice>): HoursByTypeHashTable\n    {\n        let result: HoursByTypeHashTable = {};\n\n        for (let timeSlice of timeSlices)\n        {\n            if (typeof result[timeSlice.Type] !== \"number\")\n            {\n                result[timeSlice.Type] = 0;\n            }\n\n            if (timeSlice.Start != null && timeSlice.End != null)\n            {\n                result[timeSlice.Type] += (timeSlice.End.getTime() - timeSlice.Start.getTime()) / 1000 / 60 / 60;\n            }\n        }\n\n        return result;\n    }\n    // #endregion\n\n    // #region CreateScalarPathElement\n    /**\n     * Erstellt den Pfad für den Zeitstrahl für einen Tag-Balken\n     * \n     * @param xStart Die X-Coordinate, bei der der Zeitstrahl starten soll\n     * @param yStart Die Y-Coordinate, bei dem der Zeitstrahl starten soll\n     * @param xWidth Die Länge vom Zeitstrahl in X-Richtung\n     * @param minMinutesOfDay Die Zeitpunkt vom Tag in Mintuen, an dem der Zeitstrahl anfangen soll\n     * @param maxMinutesOfDay Die Zeitpunkt vom Tag in Mintuen, an dem der Zeitstrahl enden soll\n     * @returns Gibt das SVG-Path-Element zurück\n     */\n    private static CreateScalarPathElement(\n        xStart: number,\n        yStart: number,\n        xWidth: number,\n        minMinutesOfDay: number,\n        maxMinutesOfDay: number): SVGPathElement\n    {\n        let scalePath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\n        scalePath.setAttribute(\"fill\", \"transparent\");\n        scalePath.setAttribute(\"class\", \"LegendLine\");\n\n        let minutesInDay = 24 * 60;\n        let hourAmount = Math.floor((minutesInDay - minMinutesOfDay - (minutesInDay - maxMinutesOfDay)) / 60);\n        let tickDistanceX = (viewBoxYMax - (leftPadding + rightPadding)) / hourAmount;\n\n        let tickStartX = xStart + tickDistanceX * (minMinutesOfDay / 60 % 1);\n\n        let scaleDInstructions = new Array<string>(\n            `M ${xStart} ${yStart + bottomAxisTopMargin}`,\n            `h ${xWidth}`,\n            `M ${tickStartX} ${yStart + bottomAxisTopMargin - scalarTickLength}`\n        );\n\n        for (let i = 0; i < hourAmount; i++) {\n            scaleDInstructions.push(`v 0 ${scalarTickLength}`);\n\n            if (i + 1 != hourAmount) {\n                scaleDInstructions.push(`m ${tickDistanceX} -${scalarTickLength}`);\n            }\n\n            else {\n                scaleDInstructions.push(\"Z\");\n            }\n        }\n\n        scalePath.setAttribute(\"d\", scaleDInstructions.join(\" \"));\n\n        return scalePath;\n    }\n    // #endregion\n\n    // #region CreateBottomLegend\n    /**\n     * Erstellt die Uhrzeit-Texte in der Legende, welche unter den Zeit-Balken dargestellt werden.\n     * \n     * @param xStart Die X-Startposition von den Legende-Texten\n     * @param yStart Die Y-Startposition von den Legende-Texten\n     * @param minMinutesOfDay Die Zeitpunkt vom Tag in Mintuen, an dem der Zeitstrahl anfangen soll\n     * @param maxMinutesOfDay Die Zeitpunkt vom Tag in Mintuen, an dem der Zeitstrahl enden soll\n     * @returns Gibt die Liste von SVGTextELementen \n     */\n    private static CreateBottomLegend(\n        xStart: number,\n        yStart: number,\n        minMinutesOfDay: number,\n        maxMinutesOfDay: number): Array<SVGTextElement>\n    {\n        let textElements = new Array<SVGTextElement>();\n\n        let minutesInDay = 24 * 60;\n        let hourAmount = Math.floor((minutesInDay - minMinutesOfDay - (minutesInDay - maxMinutesOfDay)) / 60);\n        let tickDistanceX = (viewBoxYMax - (leftPadding + rightPadding)) / hourAmount;\n        let tickStartX = xStart + tickDistanceX * (minMinutesOfDay / 60 % 1);\n\n        for (let i = 0; i < hourAmount; i++)\n        {\n            let textElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n            textElement.setAttribute(\"x\", (tickStartX + i * tickDistanceX).toString());\n            textElement.setAttribute(\"y\", (yStart + scalarTextHeight).toString());\n            textElement.setAttribute(\"text-anchor\", \"middle\");\n            textElement.innerHTML = `${(Math.ceil(minMinutesOfDay / 60) + i).toString().padStart(2, \"0\")}:00`\n\n            textElements.push(textElement);\n        }\n\n        return textElements;\n    }\n    // #endregion\n\n    // #region CreateTimeSlice\n    /**\n     * Erstellt die Rechteck für den angegeben TimeSlice\n     * \n     * @param timeSliceTypeColorHashTable Hashtable mit den Farben pro Slice-Type\n     * @param timeSlice Der Timeslice für den das Rechteck erstellt werden soll\n     * @param yStart Die Y-Startposition vom Rechteck\n     * @param minMinutesOfDay Die Zeitpunkt vom Tag in Mintuen, an dem der Zeitstrahl anfangen soll\n     * @param maxMinutesOfDay Die Zeitpunkt vom Tag in Mintuen, an dem der Zeitstrahl enden soll\n     * @returns Gibt das SVG-Rect-Element für den TimeSlice zurück.\n     */\n    private static CreateTimeSlice(\n        timeSliceTypeColorHashTable: { [key: number]: string; }, \n        timeSlice: TimeSlice, \n        yStart: number,\n        minMinutesOfDay: number,\n        maxMinutesOfDay: number): SVGRectElement | null\n    {\n        if (timeSlice.Start != null && timeSlice.End != null)\n        {\n            let sliceRect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n\n            if (typeof timeSliceTypeColorHashTable[timeSlice.Type] === 'string') \n            {\n                sliceRect.setAttribute(\"fill\", timeSliceTypeColorHashTable[timeSlice.Type]);\n            }\n            else \n            {\n                sliceRect.setAttribute(\"fill\", \"#B0B0B0\");\n            }\n\n            let millisecondsInDisplayedSliceOfDay = millisecondsInDay - (minMinutesOfDay * 60 * 1000) - (millisecondsInDay - (maxMinutesOfDay * 60 * 1000));\n\n            let xPerMillisecond = (viewBoxYMax - (leftPadding + rightPadding)) / millisecondsInDisplayedSliceOfDay;\n\n            let startMillisecondsOfDay = minMinutesOfDay * 60 * 1000;\n            let xStart = (StateDiagramm.TimeOfDayAsMilliseconds(timeSlice.Start) - startMillisecondsOfDay) * xPerMillisecond;\n\n            sliceRect.setAttribute(\"x\", (xStart + leftPadding).toString());\n            sliceRect.setAttribute(\"y\", yStart.toString());\n            sliceRect.setAttribute(\"width\", ((StateDiagramm.TimeOfDayAsMilliseconds(timeSlice.End) - StateDiagramm.TimeOfDayAsMilliseconds(timeSlice.Start)) * xPerMillisecond).toString());\n            sliceRect.setAttribute(\"height\", (timeBarHeight - timeBarPadding).toString());\n\n            return sliceRect;\n        }\n        else\n        {\n            return null;\n        }\n    }\n    // #endregion\n\n    // #region TimeOfDayAsMilliseconds\n    /**\n     * Ermittelt die Anzahl der Millisekunden vom aktuellen Tag\n     * \n     * @param date Das Datum, von dem die Millesekunden ermittelt werden sollen\n     * @returns Gibt die Anzahl zurück\n     */\n    private static TimeOfDayAsMilliseconds(date: Date): number\n    {\n        return date.getTime() - new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n    }\n    // #endregion\n}","import { AfterViewInit, Directive, ElementRef, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\n\n/**\n * Die Anzahl der Millisekunden in einer Sekunden\n */\nconst MillisecondsInSecond: number = 1000;\n/**\n * Die Anzahl der Millisekunden in einer Minute\n */\nconst MillisecondsInMinute: number = MillisecondsInSecond * 60;\n/**\n * Die Anzahl der Millisekunden in einer Stunde\n */\nconst MillisecondsInHour: number = MillisecondsInMinute * 60\n\n/**\n * Stellt eine Zeit nach Stunden, Minuten, Sekunden, ... dar\n */\ninterface TimeFragments\n{\n    Hours: number,\n    Minutes: number,\n    Seconds: number,\n    Milliseconds: number\n}\n\n/**\n * Schreibt die Zeit seit \"timeDifference\" oder dem aktuellen Datum an.\n */\n@Directive({\n    selector: '[appLiveTimeSpan]',\n    standalone: true\n})\nexport class LiveTimeSpanDirective implements OnDestroy, OnChanges\n{\n    // #region fields\n    /**\n     * Verweis auf das Element, an dem die Directive angehängt wurde.\n     */\n    private elementRef: ElementRef;\n\n    /**\n     * Der Timer der die Zeit anzeigt\n     */\n    private timer: ReturnType<typeof setInterval> | null;\n\n    /**\n     * Der Startzeitpunkt von dem an die Zeitspanne angezeigt werden soll.\n     * Wenn null wird der aktuelle Zeitpunkt angenommen.\n     */\n    @Input() startTime: Date | null;\n\n    /**\n     * Der Endzeitpunkt bis dem die Zeitspanne angezeigt werden soll.\n     * Wenn  null wird der aktuelle Zeitpunkt (live) angezeigt.\n     */\n    @Input() endTime: Date | null;\n    // #endregion\n\n    // #region ctor\n    /**\n     * Initialisiert die Directive\n     *\n     * @param elementRef Referenz auf das Element, an dem die Directive verwendet wird.\n     */\n    public constructor(elementRef: ElementRef)\n    {\n        this.elementRef = elementRef;\n        this.startTime = null;\n        this.endTime = null;\n        this.timer = null;\n        this.StartTime = null;\n        this.EndTime = null;\n    }\n    // #endregion\n\n    // #region ngOnDestroy\n    /**\n     * Wird aufgerufen, bevor die Directive abgebaut wird.\n     */\n    public ngOnDestroy(): void\n    {\n        if (this.timer != null)\n        {\n            clearInterval(this.timer);\n        }\n    }\n    // #endregion\n\n    // #region startTime\n    /**\n     * Der Startzeitpunkt von dem an die Zeitspanne angezeigt werden soll.\n     * Wenn null wird der aktuelle Zeitpunkt angenommen.\n     */\n    @Input() StartTime: Date | null;\n    // #endregion\n\n    // #region endTime\n    /**\n     * Der Endzeitpunkt bis dem die Zeitspanne angezeigt werden soll.\n     * Wenn  null wird der aktuelle Zeitpunkt (live) angezeigt.\n     */\n    @Input() EndTime: Date | null;\n    // #endregion\n\n    // #region ngOnChanges\n    /**\n     * Wird aufgerufen, wenn ein Input sich ändern\n     */\n    public ngOnChanges()\n    {\n        this.startTime = this.StartTime;\n        this.endTime = this.EndTime;\n        \n        this.ReinitializeDisplay();\n    }\n    // #endregion\n\n    // #region static SplitMillisecondsIntoParts\n    /**\n     * Splittet die angegeben Millisekunden in größere Einheiten\n     * \n     * @param milliseconds Die Millisekunden, die gesplittet werden sollen\n     * @returns Gibt die größerden Einheiten zurück\n     */\n    public static SplitMillisecondsIntoParts(milliseconds: number): TimeFragments\n    {\n        let result: TimeFragments = {\n            Hours: 0,\n            Minutes: 0,\n            Seconds: 0,\n            Milliseconds: 0\n        };\n\n        let remainingMilliseconds = milliseconds;\n\n        result.Hours = Math.floor(remainingMilliseconds / MillisecondsInHour);\n        remainingMilliseconds -= result.Hours * MillisecondsInHour;\n\n        result.Minutes = Math.floor(remainingMilliseconds / MillisecondsInMinute);\n        remainingMilliseconds -= result.Minutes * MillisecondsInMinute;\n\n        result.Seconds = Math.floor(remainingMilliseconds / MillisecondsInSecond);\n        remainingMilliseconds -= result.Seconds * MillisecondsInSecond;\n\n        result.Milliseconds = remainingMilliseconds;\n\n        return result;\n    }\n    // #endregion\n\n    // #region ReinitializeDisplay\n    /**\n     * Initialisiert die Anzeige erneut\n     */\n    private ReinitializeDisplay()\n    {\n        if (this.startTime == null)\n        {\n            this.startTime = new Date();\n        }\n\n        if (this.endTime == null)\n        {\n            this.timer = setInterval(() => { this.HandleOnIntervalElapsed(); }, 200);\n        }\n        else\n        {\n            this.HandleOnIntervalElapsed();\n\n            if (this.timer != null)\n            {\n                clearInterval(this.timer);\n            }\n        }\n    }\n    // #endregion\n\n    // #region HandleOnIntervalElapsed\n    /**\n     * Wird aufgerufen, wenn der Timer zum rendern abgelaufen ist.\n     * Rendert die Zeit im Format HH:MM:SS\n     */\n    private HandleOnIntervalElapsed(): void\n    {\n        if (this.startTime != null)\n        {\n            let endTime = this.endTime ?? new Date();\n\n            let timeDifference = endTime.getTime() - this.startTime.getTime();\n\n            let timeFragments = LiveTimeSpanDirective.SplitMillisecondsIntoParts(timeDifference);\n\n            let result = `${timeFragments.Hours}:${timeFragments.Minutes.toString().padStart(2, \"0\")}:${timeFragments.Seconds.toString().padStart(2, \"0\")}`;\n\n            (<HTMLElement>this.elementRef.nativeElement).innerText = result;\n        }\n    }\n    // #endregion\n}\n","import { TimeSlice } from \"./TimeSlice\";\nimport { TimeSliceType } from \"./TimeSliceType\";\nimport { WorkDay } from \"./WorkDay\";\n\n/**\n * Stellt einen aktiven Arbeitstag dar.\n */\nexport class ActiveWorkDay implements WorkDay\n{\n    // #region ctor\n    /**\n     * Initialisier die Klasse\n     * \n     * @param date Das Datum vom Arbeitstag\n     * @param timeslots Die TimeSlices vom Tag\n     */\n    public constructor(date: Date, timeslots?: Array<TimeSlice>)\n    {\n        this.Date = date;\n\n        if (typeof timeslots === \"undefined\")\n        {\n            this.TimeSlots = new Array<TimeSlice>;\n        }\n        else\n        {\n            this.TimeSlots = timeslots;\n            this.SortTimeSlots();\n        }\n    }\n    // #endregion\n\n    // #region Date\n    /**\n     * @inheritdoc\n     */\n    public Date: Date;\n    // #endregion\n\n    // #region TimeSlots\n    /**\n     * @inheritdoc\n     */\n    public TimeSlots: Array<TimeSlice>;\n    // #endregion\n\n    // #region CurrentSlice\n    /**\n     * Der aktuelle Timeslice oder null, wenn für den Tag keine Timeslices vorhanden sind.\n     */\n    public get CurrentSlice(): TimeSlice | null\n    {\n        if (this.TimeSlots.length == 0)\n        {\n            return null;\n        }\n        else\n        {\n            return this.TimeSlots[this.TimeSlots.length - 1];\n        }\n    }\n    // #endregion\n\n    // #regiond EndCurrentTimeSliceIfNotEnded\n    /**\n     * Beendet den aktuellen Timeslice, wenn dieser Vorhanden ist und noch nicht beendet wurde\n     */\n    public EndCurrentTimeSliceIfNotEnded(): void\n    {\n        let currentSlice = this.CurrentSlice;\n\n        if (currentSlice != null && currentSlice.End == null)\n        {\n            currentSlice.End = new Date();\n        }\n    }\n    // #endregion\n\n    // #region StartNewTimeSliceIfNonRunning\n    /**\n     * Startet einen neuen TimeSlice wenn aktuell noch keiner läuft.\n     * \n     * @param type Der Typ vom neuen Timeslice\n     */\n    public StartNewTimeSliceIfNonRunning(type: TimeSliceType): void\n    {\n        let currentSlice = this.CurrentSlice;\n\n        if (currentSlice == null || currentSlice.End != null)\n        {\n            this.TimeSlots.push(\n                {\n                    Start: new Date(),\n                    End: null,\n                    Type: type\n                }\n            );\n        }\n    }\n    // #endregion\n    \n    // #region SortTimeSlots\n    /**\n     * Sortiert die TimeSlots\n     */\n    private SortTimeSlots(): void\n    {\n        this.TimeSlots = this.TimeSlots.sort(\n            (a, b) => \n            {\n                let aDate = a.Start ?? a.End;\n                let bDate = b.Start ?? b.End;\n\n                if (aDate != null && bDate != null)\n                {\n                    return aDate.getTime() - bDate.getTime();\n                }\n                else\n                {\n                    return 0\n                }\n            }\n        );\n    }\n    // #endregion\n}","import { Injectable } from '@angular/core';\nimport { WorkDay } from '../../entities/WorkDay';\nimport { WorkDayOverview } from '../../entities/HistoryDay';\nimport { TimeSliceType } from '../../entities/TimeSliceType';\n\n/**\n * Repository für Arbeitszeiten\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class TimeRepositoryService\n{\n    // #region fields\n    /**\n     * Promise für die Index-DB\n     */\n    private readonly databasePromise: Promise<IDBDatabase>;\n    // #endregion\n\n    // #region ctor\n    /**\n     * Initialisiert den Service\n     */\n    public constructor()\n    {\n        this.databasePromise = new Promise(\n            (resolve, reject) =>\n            {\n                let openDbRequest = window.indexedDB.open(\"WorkTimeDb\", 1);\n\n                openDbRequest.onsuccess = () =>\n                {\n                    resolve(openDbRequest.result);\n                };\n\n                openDbRequest.onerror = (event) =>\n                {\n                    reject((<any>event?.target)?.error);\n                };\n\n                openDbRequest.onupgradeneeded = (event) =>\n                {\n                    this.OnUpgradeNeeded(event);\n                }\n            }\n        );\n        this.databasePromise.then(\n            (database) =>\n            {\n                \n            }\n        );\n    }\n    // #endregion\n\n    // #region static ConvertWorkDayToHistoryDay\n    /**\n     * Wandelt einen {@see WorkDay} in einen {@see WorkDayOverview} um\n     * \n     * @param workDay Der WorkDay, der umgewandelt werden soll\n     * @returns Gibt den WorkDayOverview zurück\n     */\n    public static ConvertWorkDayToHistoryDay(workDay: WorkDay): WorkDayOverview\n    {\n        let transfers = workDay.TimeSlots.filter(\n            (x) => \n            {\n                return x.Type == TimeSliceType.Transfer;\n            }\n        );\n        let workTimes = workDay.TimeSlots.filter(\n            (x) =>\n            {\n                return x.Type == TimeSliceType.Work;\n            }\n        );\n\n        let workDayOverview = <WorkDayOverview> {\n            Date: workDay.Date,\n            StartToWork: null,\n            EndToWork: null,\n            StartWork: null,\n            EndWork: null,\n            StartToHome: null,\n            EndToHome: null,\n            WorkTimeMs: 0,\n            DriveTimeMs: 0\n        };\n\n        if (transfers.length >= 1)\n        {\n            workDayOverview.StartToWork = transfers[0].Start;\n            workDayOverview.EndToWork = transfers[0].End;\n\n            if (transfers[0].Start != null && transfers[0].End != null)\n            {\n                workDayOverview.DriveTimeMs += transfers[0].End.getTime() - transfers[0].Start.getTime();\n            }\n        }\n\n        if (workTimes.length >= 1)\n        {\n            workDayOverview.StartWork = workTimes[0].Start;\n            workDayOverview.EndWork = workTimes[0].End;\n\n            if (workTimes[0].Start != null && workTimes[0].End != null)\n            {\n                workDayOverview.WorkTimeMs += workTimes[0].End.getTime() - workTimes[0].Start.getTime();\n            }\n        }\n\n        if (transfers.length >= 2)\n        {\n            workDayOverview.StartToHome = transfers[1].Start;\n            workDayOverview.EndToHome = transfers[1].End;\n\n            if (transfers[1].Start != null && transfers[1].End != null)\n            {\n                workDayOverview.DriveTimeMs += transfers[1].End.getTime() - transfers[1].Start.getTime();\n            }\n        }\n\n        return workDayOverview;\n    }\n    // #endregion\n\n    // #region GetWorkDays\n    /**\n     * Ermittelt alle Arbeitszeiten, welche innerhalb des Zeitfensters sind\n     * \n     * @param from Der Anfang vom Zeitfenster\n     * @param to Das Ende vom Zeitfenster\n     * @returns Gibt einen Array von Arbeitszeiten zurück\n     */\n    public async GetWorkDays(from: Date, to: Date): Promise<Array<WorkDay>>\n    {\n        let database = await this.databasePromise;\n\n        let workTimesObjectStore = database.transaction(\"WorkTimes\", \"readonly\").objectStore(\"WorkTimes\");\n\n        return await new Promise<Array<WorkDay>>(\n            (success, reject) =>\n            {\n                let request = workTimesObjectStore.getAll(IDBKeyRange.bound(from.getTime(), to.getTime()))\n\n                request.onsuccess = () =>\n                {\n                    for (let workDay of <Array<WorkDay>>request.result)\n                    {\n                        workDay.Date = this.ParseToDate(workDay.Date);\n\n                        for (let timeSlots of workDay.TimeSlots)\n                        {\n                            if (timeSlots.Start != null)\n                            {\n                                timeSlots.Start = this.ParseToDate(timeSlots.Start);\n                            }\n\n                            if (timeSlots.End != null)\n                            {\n                                timeSlots.End = this.ParseToDate(timeSlots.End);\n                            }\n                        }\n                    }\n\n                    success(request.result);\n                };\n\n                request.onerror = (event) =>\n                {\n                    reject((<any>event?.target)?.error);\n                };\n            }\n        );\n        \n    }\n    // #endregion\n\n    // #region PutWorkDay\n    /**\n     * Setzt den Arbeitstag in der Tabelle\n     * \n     * @param workDay Der Arbeitstag, der gesetzt werden soll\n     */\n    public async PutWorkDay(workDay: WorkDay): Promise<void>\n    {\n        let database = await this.databasePromise;\n\n        let workTimesObjectStore = database.transaction(\"WorkTimes\", \"readwrite\").objectStore(\"WorkTimes\");\n\n        await new Promise<void>(\n            (success, reject) =>\n            {\n                let request = workTimesObjectStore.put(workDay, workDay.Date.getTime());\n\n                request.onsuccess = () =>\n                {\n                    success();\n                };\n\n                request.onerror = (event) =>\n                {\n                    reject((<any>event?.target)?.error);\n                };\n            }\n        );\n    }\n    // #endregion\n\n    // #region DeleteWorkDay\n    /**\n     * Löscht den Arbeitstag aus der Tabelle\n     * \n     * @param date Das Datum vom Arbeitstag, der gelöscht werden soll\n     */\n    public async DeleteWorkDay(date: Date): Promise<void>\n    {\n        let database = await this.databasePromise;\n\n        let workTimesObjectStore = database.transaction(\"WorkTimes\", \"readwrite\").objectStore(\"WorkTimes\");\n        let deleteRequest = workTimesObjectStore.delete(date.getTime());\n\n        await new Promise<void>(\n            (success, reject) =>\n            {\n                deleteRequest.onsuccess = () =>\n                {\n                    success();\n                };\n\n                deleteRequest.onerror = (event) =>\n                {\n                    reject((<any>event?.target)?.error);\n                };\n            }\n        );\n    }\n    // #endregion\n\n    // #region OnUpgradeNeeded\n    /**\n     * Wird aufgerufen, wenn die Datenbank geupgraded werden muss.\n     * \n     * @param event Das VersionChangeEvent\n     */\n    private OnUpgradeNeeded(event: IDBVersionChangeEvent): void\n    {\n        for (let version = event.oldVersion + 1; version <= (event.newVersion ?? event.oldVersion); version++)\n        {\n            switch(version)\n            {\n                case 1:\n                    this.UpgradeVersion0To1((<any>event.target).result);\n                    break;\n            }\n        }\n    }\n    // #endregion\n\n    // #region UpgradeVersion0To1\n    /**\n     * Erstellt die Datenbank auf die Version 1\n     * \n     * @param database Die Datenbank in der die ObjectStores erstellt werden sollen.\n     */\n    public UpgradeVersion0To1(database: IDBDatabase): void\n    {\n        let workTimesObjectStore = database.createObjectStore(\"WorkTimes\", { autoIncrement: true });\n\n        workTimesObjectStore.createIndex(\"Date\", \"Date\");\n    }\n    // #endregion\n\n    // #region ParseToDate\n    /**\n     * Wandelt eine Datum, welches im Format JSON-String oder Millisekunden seit 1970 in Date um.\n     * \n     * @param date Das Datum, dass umgewandelt werden soll\n     */\n    private ParseToDate(date: Date | number | string): Date\n    {\n        if (typeof date === \"number\" || typeof date === \"string\")\n        {\n            return new Date(date);\n        }\n        else\n        {\n            return date;\n        }\n    }\n    // #endregion\n}","import { Component } from '@angular/core';\nimport { TimeRepositoryService } from '../../services/time-repository/time-repository.service';\nimport { WorkDay } from '../../entities/WorkDay';\nimport { CommonModule } from '@angular/common';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { StateDiagramm } from '../../StateDiagramm/StateDiagramm';\nimport { TimeSlice } from '../../entities/TimeSlice';\nimport { TimeSliceType } from '../../entities/TimeSliceType';\nimport { LiveTimeSpanDirective } from '../../directives/LiveTimeSpan/live-time-span.directive';\nimport { ActiveWorkDay } from '../../entities/ActiveWorkDay';\n\ninterface DayDisplay\n{\n    TransferTimeBeforeWork: TimeSlice,\n\n    WorkTime: TimeSlice,\n\n    TransferTimeAfterWork: TimeSlice,\n\n    WorkDay: ActiveWorkDay\n}\n\n/**\n * Stellt die Status dar, die an einem Arbeitstag vorkommen können\n */\nenum TimeStatus {\n    /**\n     * Der initiale Status vor der Arbeit\n     */\n    Initial,\n\n    /**\n     * Die Fahrt zum Einsatzort hin\n     */\n    DrivingToWork,\n\n    /**\n     * Der Einsatz vor Ort\n     */\n    AtWork,\n\n    /**\n     * Die Fahrt nach Hause\n     */\n    DrivingHome,\n\n    /**\n     * Der Status nach der Arbeit\n     */\n    AfterWork\n}\n\n/**\n * Diese Komponente beinhaltet die aktuelle Arbeitszeit\n */\n@Component({\n    selector: 'app-current-work',\n    standalone: true,\n    imports: [\n        CommonModule,\n        LiveTimeSpanDirective\n    ],\n    templateUrl: './current-work.component.html',\n    styleUrl: './current-work.component.less'\n})\nexport class CurrentWorkComponent\n{\n    // #region fields\n    /**\n     * Servcie zum bereitigen von HTML, Url, ...\n     */\n    private readonly sanitizer: DomSanitizer;\n\n    /**\n     * Repository für Arbeitszeiten\n     */\n    private readonly timeRepositoryService: TimeRepositoryService;\n    // #endregion\n\n    // #region ctor\n    /**\n     * Initialisiert die Komponente\n     * \n     * @param timeRepositoryService Servcie zum bereitigen von HTML, Url, ...\n     * @param sanitizer Repository für Arbeitszeiten\n     */\n    public constructor(\n        timeRepositoryService: TimeRepositoryService,\n        sanitizer:DomSanitizer)\n    {\n        this.timeRepositoryService = timeRepositoryService;\n        this.sanitizer = sanitizer;\n\n        this.CurrentStatus = TimeStatus.Initial;\n\n        this.DayStatusChart = null;\n\n        this.CurrentDayWorkPromise = this.GetCurrentDayWork();\n        this.RefreshCurrentDayAndTimeStatus();\n        //this.LoadAndSetStateGrafic();\n    }\n    // #endregion\n\n    // #region TimeStatus\n    /**\n     * Stellt die Status dar, die an einem Arbeitstag vorkommen können\n     */\n    public TimeStatus = TimeStatus;\n    // #endregion\n\n    // #region CurrentDayWorkPromise\n    /**\n     * Die Zeiten vom aktuellen Tag\n     */\n    public CurrentDayWorkPromise: Promise<DayDisplay>;\n    // #endregion\n\n    // #region DayStatusChart\n    /**\n     * Das HTML von Diagramm, das den Status von den Tagen anzeigt.\n     */\n    public DayStatusChart: SafeHtml | null;\n    // #endregion\n\n    // #region TimeStatus\n    /**\n     * Der aktulle Status von der Zeitzählung\n     */\n    public CurrentStatus: TimeStatus;\n    // #endregion\n\n    // #region StartTransfer\n    /**\n     * Startet die Zeitzählung einer Fahrt zum Einsatzort hin/zurück\n     */\n    public async StartTransfer(): Promise<void>\n    {\n        let currentDayWork = await this.CurrentDayWorkPromise;\n\n        currentDayWork.WorkDay.EndCurrentTimeSliceIfNotEnded();\n        currentDayWork.WorkDay.StartNewTimeSliceIfNonRunning(TimeSliceType.Transfer);\n\n        await this.timeRepositoryService.PutWorkDay(\n            {\n                Date: currentDayWork.WorkDay.Date,\n                TimeSlots: currentDayWork.WorkDay.TimeSlots\n            }\n        );\n\n        this.RefreshCurrentDayAndTimeStatus();\n        //this.LoadAndSetStateGrafic();\n    }\n    // #endregion\n\n    // #region EndTransfer\n    /**\n     * Stoppt die Zeitzählung einer Fahr zum Einsatzort hin/zurück\n     */\n    public async EndTransfer(): Promise<void>\n    {\n        let currentDayWork = await this.CurrentDayWorkPromise;\n\n        currentDayWork.WorkDay.EndCurrentTimeSliceIfNotEnded();\n\n        await this.timeRepositoryService.PutWorkDay(\n            {\n                Date: currentDayWork.WorkDay.Date,\n                TimeSlots: currentDayWork.WorkDay.TimeSlots\n            }\n        );\n\n        this.RefreshCurrentDayAndTimeStatus();\n        //this.LoadAndSetStateGrafic();\n    }\n    // #endregion\n\n    // #region StartWork\n    /**\n     * Startet die Zeitzählung am Einsatzort\n     */\n    public async StartWork(): Promise<void>\n    {\n        let currentDayWork = await this.CurrentDayWorkPromise;\n\n        currentDayWork.WorkDay.EndCurrentTimeSliceIfNotEnded();\n        currentDayWork.WorkDay.StartNewTimeSliceIfNonRunning(TimeSliceType.Work);\n\n        await this.timeRepositoryService.PutWorkDay(\n            {\n                Date: currentDayWork.WorkDay.Date,\n                TimeSlots: currentDayWork.WorkDay.TimeSlots\n            }\n        );\n\n        this.RefreshCurrentDayAndTimeStatus();\n        //this.LoadAndSetStateGrafic();\n    }\n    // #endregion\n\n    // #region EndTransfer\n    /**\n     * Endet die Zeitzählung am Einsatzort\n     */\n    public async EndWork(): Promise<void>\n    {\n        let currentDayWork = await this.CurrentDayWorkPromise;\n\n        currentDayWork.WorkDay.EndCurrentTimeSliceIfNotEnded();\n\n        await this.timeRepositoryService.PutWorkDay(\n            {\n                Date: currentDayWork.WorkDay.Date,\n                TimeSlots: currentDayWork.WorkDay.TimeSlots\n            }\n        );\n\n        this.RefreshCurrentDayAndTimeStatus();\n        //this.LoadAndSetStateGrafic();\n    }\n    // #endregion\n\n    // #region RefreshCurrentDayAndTimeStatus\n    /**\n     * Ermittelt den aktuellen Arbeitstag aus der Datenbank erneut\n     * und füllt ahnhand dessen die Variable {@see CurrentStatus}\n     */\n    private async RefreshCurrentDayAndTimeStatus(): Promise<void>\n    {\n        this.CurrentDayWorkPromise = this.GetCurrentDayWork();\n        let currentDay = await this.CurrentDayWorkPromise;\n\n        if (currentDay.TransferTimeBeforeWork.Start == null)\n        {\n            this.CurrentStatus = TimeStatus.Initial;\n        }\n        else if (currentDay.WorkTime.Start == null)\n        {\n            this.CurrentStatus = TimeStatus.DrivingToWork\n        }\n        else if (currentDay.TransferTimeAfterWork.Start == null)\n        {\n            this.CurrentStatus = TimeStatus.AtWork;\n        }\n        else if (currentDay.TransferTimeAfterWork.End == null)\n        {\n            this.CurrentStatus = TimeStatus.DrivingHome;\n        }\n        else\n        {\n            this.CurrentStatus = TimeStatus.AfterWork;\n        }\n    }\n    // #endregion\n\n    // #region LoadAndSetStateGrafic\n    /**\n     * Lädt die Arbeitszeiten von diesem Monat, erstellt daraus ein SVG-Diagramm\n     * und weist das HTML vom SVG der Variable DayStatusChart zu.\n     */\n    private async LoadAndSetStateGrafic(): Promise<void>\n    {\n        let currentTime = new Date();\n        let lastMonth = new Date(\n            currentTime.getFullYear(),\n            currentTime.getMonth() - 1,\n            currentTime.getDate()\n        );\n        let endOfDay = new Date(\n            currentTime.getFullYear(),\n            currentTime.getMonth(),\n            currentTime.getDate() + 1,\n        );\n        endOfDay.setSeconds(-1);\n\n        let workDays = await new Promise<Array<WorkDay>>(\n            async (success, reject) => {\n                let workDays = await this.timeRepositoryService.GetWorkDays(lastMonth, endOfDay);\n\n                success(workDays);\n            }\n        );\n\n        this.DayStatusChart = this.sanitizer.bypassSecurityTrustHtml(StateDiagramm.Create(workDays).outerHTML);\n    }\n    // #endregion\n\n    // #region GetCurrentDayWork\n    /**\n     * Ermittelt den aktuellen Arbeitstag aus der IndexDB oder erstellt einen neuen leeren Tag wenn keiner Vorhanden ist.\n     * \n     * @returns Gibt Tag zurück\n     */\n    private async GetCurrentDayWork(): Promise<DayDisplay>\n    {\n        let currentTime = new Date();\n        let startOfDay = new Date(\n            currentTime.getFullYear(),\n            currentTime.getMonth(),\n            currentTime.getDate()\n        );\n        let endOfDay = new Date(\n            currentTime.getFullYear(),\n            currentTime.getMonth(),\n            currentTime.getDate() + 1,\n        );\n        endOfDay.setSeconds(-1);\n\n        let workDays = await this.timeRepositoryService.GetWorkDays(startOfDay, endOfDay);\n\n        let emptyDayStatus: DayDisplay = {\n            TransferTimeBeforeWork: {\n                Start: null,\n                End: null,\n                Type: TimeSliceType.Transfer\n            },\n            WorkTime: {\n                Start: null,\n                End: null,\n                Type: TimeSliceType.Work\n            },\n            TransferTimeAfterWork: {\n                Start: null,\n                End: null,\n                Type: TimeSliceType.Transfer\n            },\n            WorkDay: new ActiveWorkDay(new Date())\n        };\n\n        if (workDays.length > 0)\n        {\n            let transfers = workDays[0].TimeSlots.filter(\n                (x) => \n                {\n                    return x.Type == TimeSliceType.Transfer;\n                }\n            );\n            let workTimes = workDays[0].TimeSlots.filter(\n                (x) =>\n                {\n                    return x.Type == TimeSliceType.Work;\n                }\n            );\n\n            if (transfers.length >= 1)\n            {\n                emptyDayStatus.TransferTimeBeforeWork.Start = transfers[0].Start;\n                emptyDayStatus.TransferTimeBeforeWork.End = transfers[0].End;\n            }\n\n            if (transfers.length >= 2)\n            {\n                emptyDayStatus.TransferTimeAfterWork.Start = transfers[1].Start;\n                emptyDayStatus.TransferTimeAfterWork.End = transfers[1].End;\n            }\n\n            if (workTimes.length >= 1)\n            {\n                emptyDayStatus.WorkTime.Start = workTimes[0].Start;\n                emptyDayStatus.WorkTime.End = workTimes[0].End;\n            }\n\n            emptyDayStatus.WorkDay = new ActiveWorkDay(workDays[0].Date, workDays[0].TimeSlots);\n        }\n\n        return emptyDayStatus;\n    }\n    // #endregion\n}\n","<ng-container *ngIf=\"this.CurrentDayWorkPromise | async; let dayDisplay\">\n    <div class=\"Header\">\n        <div class=\"HeaderBlock\"\n             [ngSwitch]=\"dayDisplay.TransferTimeBeforeWork.Start == null &&\n                         dayDisplay.TransferTimeBeforeWork.End == null\"\n             [class.Active]=\"this.CurrentStatus == this.TimeStatus.DrivingToWork ||\n                             this.CurrentStatus == this.TimeStatus.AfterWork\">\n            <p>Fahrtweg früh</p>\n            <ng-container *ngSwitchCase=\"true\">\n                <p class=\"Hours\">0:00:00</p>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <p class=\"Hours\"\n                appLiveTimeSpan [StartTime]=\"dayDisplay.TransferTimeBeforeWork.Start\"\n                                [EndTime]=\"dayDisplay.TransferTimeBeforeWork.End\"></p>\n            </ng-container>\n        </div>\n        <div class=\"HeaderBlock\"\n             [ngSwitch]=\"dayDisplay.WorkTime.Start == null &&\n                         dayDisplay.WorkTime.End == null\"\n             [class.Active]=\"this.CurrentStatus == this.TimeStatus.AtWork ||\n                             this.CurrentStatus == this.TimeStatus.AfterWork\">\n            <p>Arbeit</p>\n            <ng-container *ngSwitchCase=\"true\">\n                <p class=\"Hours\">0:00:00</p>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <p class=\"Hours\"\n                appLiveTimeSpan [StartTime]=\"dayDisplay.WorkTime.Start\" \n                                [EndTime]=\"dayDisplay.WorkTime.End\"></p>\n            </ng-container>\n        </div>\n        <div class=\"HeaderBlock\"\n             [ngSwitch]=\"dayDisplay.TransferTimeAfterWork.Start == null &&\n                         dayDisplay.TransferTimeAfterWork.End == null\"\n             [class.Active]=\"this.CurrentStatus == this.TimeStatus.DrivingHome ||\n                             this.CurrentStatus == this.TimeStatus.AfterWork\">\n            <p>Fahrtweg abends</p>\n            <ng-container *ngSwitchCase=\"true\">\n                <p class=\"Hours\">0:00:00</p>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <p class=\"Hours\"\n                appLiveTimeSpan [StartTime]=\"dayDisplay.TransferTimeAfterWork.Start\" \n                                [EndTime]=\"dayDisplay.TransferTimeAfterWork.End\"></p>\n            </ng-container>\n        </div>\n    </div>\n    <div class=\"ButtonContainer\"\n         [ngSwitch]=\"this.CurrentStatus\">\n        <button *ngSwitchCase=\"this.TimeStatus.Initial\"\n            (click)=\"this.StartTransfer()\">Fahrtweg start</button>\n        <button *ngSwitchCase=\"this.TimeStatus.DrivingToWork\"\n            (click)=\"this.StartWork()\">Arbeit start</button>\n        <button *ngSwitchCase=\"this.TimeStatus.AtWork\"\n                (click)=\"this.StartTransfer()\">Fahrtweg start</button>\n        <button *ngSwitchCase=\"this.TimeStatus.DrivingHome\"\n                (click)=\"this.EndTransfer()\">Fahrtweg stop</button>\n    </div>\n</ng-container>\n<div class=\"DayStatusChart\" [innerHTML]=\"this.DayStatusChart\"></div>\n","import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n} catch {\n  hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nlet Platform = /*#__PURE__*/(() => {\n  class Platform {\n    constructor(_platformId) {\n      this._platformId = _platformId;\n      // We want to use the Angular platform check because if the Document is shimmed\n      // without the navigator, the following checks will fail. This is preferred because\n      // sometimes the Document may be shimmed without the user's knowledge or intention\n      /** Whether the Angular application is being rendered in the browser. */\n      this.isBrowser = this._platformId ? isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n      /** Whether the current browser is Microsoft Edge. */\n      this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n      /** Whether the current rendering engine is Microsoft Trident. */\n      this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n      // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n      /** Whether the current rendering engine is Blink. */\n      this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT;\n      // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n      // ensure that Webkit runs standalone and is not used as another engine's base.\n      /** Whether the current rendering engine is WebKit. */\n      this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n      /** Whether the current platform is Apple iOS. */\n      this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n      // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n      // them self as Gecko-like browsers and modify the userAgent's according to that.\n      // Since we only cover one explicit Firefox case, we can simply check for Firefox\n      // instead of having an unstable check for Gecko.\n      /** Whether the current browser is Firefox. */\n      this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n      /** Whether the current platform is Android. */\n      // Trident on mobile adds the android platform to the userAgent to trick detections.\n      this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n      // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n      // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n      // Safari browser should also use Webkit as its layout engine.\n      /** Whether the current browser is Safari. */\n      this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n    static {\n      this.ɵfac = function Platform_Factory(t) {\n        return new (t || Platform)(i0.ɵɵinject(PLATFORM_ID));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: Platform,\n        factory: Platform.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return Platform;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PlatformModule = /*#__PURE__*/(() => {\n  class PlatformModule {\n    static {\n      this.ɵfac = function PlatformModule_Factory(t) {\n        return new (t || PlatformModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: PlatformModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return PlatformModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n// first changing it to something else:\n// The specified value \"\" does not conform to the required format.\n// The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n  return supportedInputTypes;\n}\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n        get: () => supportsPassiveEvents = true\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n  return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nvar RtlScrollAxisType = /*#__PURE__*/function (RtlScrollAxisType) {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  RtlScrollAxisType[RtlScrollAxisType[\"NORMAL\"] = 0] = \"NORMAL\";\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  RtlScrollAxisType[RtlScrollAxisType[\"NEGATED\"] = 1] = \"NEGATED\";\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  RtlScrollAxisType[RtlScrollAxisType[\"INVERTED\"] = 2] = \"INVERTED\";\n  return RtlScrollAxisType;\n}(RtlScrollAxisType || {});\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported. Also check for `Element`, because\n    // some projects stub out the global `document` during SSR which can throw us off.\n    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n      scrollBehaviorSupported = false;\n      return scrollBehaviorSupported;\n    }\n    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n    if ('scrollBehavior' in document.documentElement.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      const scrollToFunction = Element.prototype.scrollTo;\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n  return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n    scrollContainer.remove();\n  }\n  return rtlScrollAxisType;\n}\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n  if (shadowDomIsSupported == null) {\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n  }\n  return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n  if (_supportsShadowDom()) {\n    const rootNode = element.getRootNode ? element.getRootNode() : null;\n    // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n  return null;\n}\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nfunction _getFocusedElementPierceShadowDom() {\n  let activeElement = typeof document !== 'undefined' && document ? document.activeElement : null;\n  while (activeElement && activeElement.shadowRoot) {\n    const newActiveElement = activeElement.shadowRoot.activeElement;\n    if (newActiveElement === activeElement) {\n      break;\n    } else {\n      activeElement = newActiveElement;\n    }\n  }\n  return activeElement;\n}\n/** Gets the target of an event while accounting for Shadow DOM. */\nfunction _getEventTarget(event) {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return event.composedPath ? event.composedPath()[0] : event.target;\n}\n\n/** Gets whether the code is currently running in a test environment. */\nfunction _isTestEnvironment() {\n  // We can't use `declare const` because it causes conflicts inside Google with the real typings\n  // for these symbols and we can't read them off the global object, because they don't appear to\n  // be attached there for some runners like Jest.\n  // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n  return (\n    // @ts-ignore\n    typeof __karma__ !== 'undefined' && !!__karma__ ||\n    // @ts-ignore\n    typeof jasmine !== 'undefined' && !!jasmine ||\n    // @ts-ignore\n    typeof jest !== 'undefined' && !!jest ||\n    // @ts-ignore\n    typeof Mocha !== 'undefined' && !!Mocha\n  );\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, RtlScrollAxisType, _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _isTestEnvironment, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n","import { ElementRef } from '@angular/core';\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n  return value != null && `${value}` !== 'false';\n}\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n  return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n  if (value == null) {\n    return '';\n  }\n  return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n  const result = [];\n  if (value != null) {\n    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n    for (const sourceValue of sourceValues) {\n      const trimmedString = `${sourceValue}`.trim();\n      if (trimmedString) {\n        result.push(trimmedString);\n      }\n    }\n  }\n  return result;\n}\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\n","import * as i0 from '@angular/core';\nimport { NgModule, CSP_NONCE, Injectable, Optional, Inject } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nlet LayoutModule = /*#__PURE__*/(() => {\n  class LayoutModule {\n    static {\n      this.ɵfac = function LayoutModule_Factory(t) {\n        return new (t || LayoutModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: LayoutModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return LayoutModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = /*#__PURE__*/new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nlet MediaMatcher = /*#__PURE__*/(() => {\n  class MediaMatcher {\n    constructor(_platform, _nonce) {\n      this._platform = _platform;\n      this._nonce = _nonce;\n      this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n      if (this._platform.WEBKIT || this._platform.BLINK) {\n        createEmptyStyleRule(query, this._nonce);\n      }\n      return this._matchMedia(query);\n    }\n    static {\n      this.ɵfac = function MediaMatcher_Factory(t) {\n        return new (t || MediaMatcher)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(CSP_NONCE, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: MediaMatcher,\n        factory: MediaMatcher.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MediaMatcher;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query, nonce) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      if (nonce) {\n        mediaQueryStyleNode.setAttribute('nonce', nonce);\n      }\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  };\n}\n\n/** Utility for checking the matching state of @media queries. */\nlet BreakpointObserver = /*#__PURE__*/(() => {\n  class BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n      this._mediaMatcher = _mediaMatcher;\n      this._zone = _zone;\n      /**  A map of all media queries currently being listened for. */\n      this._queries = new Map();\n      /** A subject for all other observables to takeUntil based on. */\n      this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n      this._destroySubject.next();\n      this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n      const queries = splitQueries(coerceArray(value));\n      return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n      const queries = splitQueries(coerceArray(value));\n      const observables = queries.map(query => this._registerQuery(query).observable);\n      let stateObservable = combineLatest(observables);\n      // Emit the first state immediately, and then debounce the subsequent emissions.\n      stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n      return stateObservable.pipe(map(breakpointStates => {\n        const response = {\n          matches: false,\n          breakpoints: {}\n        };\n        breakpointStates.forEach(({\n          matches,\n          query\n        }) => {\n          response.matches = response.matches || matches;\n          response.breakpoints[query] = matches;\n        });\n        return response;\n      }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n      // Only set up a new MediaQueryList if it is not already being listened for.\n      if (this._queries.has(query)) {\n        return this._queries.get(query);\n      }\n      const mql = this._mediaMatcher.matchMedia(query);\n      // Create callback for match changes and add it is as a listener.\n      const queryObservable = new Observable(observer => {\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n        const handler = e => this._zone.run(() => observer.next(e));\n        mql.addListener(handler);\n        return () => {\n          mql.removeListener(handler);\n        };\n      }).pipe(startWith(mql), map(({\n        matches\n      }) => ({\n        query,\n        matches\n      })), takeUntil(this._destroySubject));\n      // Add the MediaQueryList to the set of queries.\n      const output = {\n        observable: queryObservable,\n        mql\n      };\n      this._queries.set(query, output);\n      return output;\n    }\n    static {\n      this.ɵfac = function BreakpointObserver_Factory(t) {\n        return new (t || BreakpointObserver)(i0.ɵɵinject(MediaMatcher), i0.ɵɵinject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: BreakpointObserver,\n        factory: BreakpointObserver.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return BreakpointObserver;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n  return queries.map(query => query.split(',')).reduce((a1, a2) => a1.concat(a2)).map(query => query.trim());\n}\n\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' + '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n","import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, APP_ID, Injectable, Inject, QueryList, isSignal, effect, booleanAttribute, Directive, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, PAGE_DOWN, PAGE_UP, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  id = id.trim();\n  if (ids.some(existingId => existingId.trim() === id)) {\n    return;\n  }\n  ids.push(id);\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  id = id.trim();\n  const filteredIds = ids.filter(val => val !== id);\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  const attrValue = el.getAttribute(attr);\n  return attrValue?.match(/\\S+/g) ?? [];\n}\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nlet AriaDescriber = /*#__PURE__*/(() => {\n  class AriaDescriber {\n    constructor(_document,\n    /**\n     * @deprecated To be turned into a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _platform) {\n      this._platform = _platform;\n      /** Map of all registered message elements that have been placed into the document. */\n      this._messageRegistry = new Map();\n      /** Container for all registered messages. */\n      this._messagesContainer = null;\n      /** Unique ID for the service. */\n      this._id = `${nextId++}`;\n      this._document = _document;\n      this._id = inject(APP_ID) + '-' + nextId++;\n    }\n    describe(hostElement, message, role) {\n      if (!this._canBeDescribed(hostElement, message)) {\n        return;\n      }\n      const key = getKey(message, role);\n      if (typeof message !== 'string') {\n        // We need to ensure that the element has an ID.\n        setMessageId(message, this._id);\n        this._messageRegistry.set(key, {\n          messageElement: message,\n          referenceCount: 0\n        });\n      } else if (!this._messageRegistry.has(key)) {\n        this._createMessageElement(message, role);\n      }\n      if (!this._isElementDescribedByMessage(hostElement, key)) {\n        this._addMessageReference(hostElement, key);\n      }\n    }\n    removeDescription(hostElement, message, role) {\n      if (!message || !this._isElementNode(hostElement)) {\n        return;\n      }\n      const key = getKey(message, role);\n      if (this._isElementDescribedByMessage(hostElement, key)) {\n        this._removeMessageReference(hostElement, key);\n      }\n      // If the message is a string, it means that it's one that we created for the\n      // consumer so we can remove it safely, otherwise we should leave it in place.\n      if (typeof message === 'string') {\n        const registeredMessage = this._messageRegistry.get(key);\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n          this._deleteMessageElement(key);\n        }\n      }\n      if (this._messagesContainer?.childNodes.length === 0) {\n        this._messagesContainer.remove();\n        this._messagesContainer = null;\n      }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n      const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`);\n      for (let i = 0; i < describedElements.length; i++) {\n        this._removeCdkDescribedByReferenceIds(describedElements[i]);\n        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n      }\n      this._messagesContainer?.remove();\n      this._messagesContainer = null;\n      this._messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message, role) {\n      const messageElement = this._document.createElement('div');\n      setMessageId(messageElement, this._id);\n      messageElement.textContent = message;\n      if (role) {\n        messageElement.setAttribute('role', role);\n      }\n      this._createMessagesContainer();\n      this._messagesContainer.appendChild(messageElement);\n      this._messageRegistry.set(getKey(message, role), {\n        messageElement,\n        referenceCount: 0\n      });\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(key) {\n      this._messageRegistry.get(key)?.messageElement?.remove();\n      this._messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n      if (this._messagesContainer) {\n        return;\n      }\n      const containerClassName = 'cdk-describedby-message-container';\n      const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform=\"server\"]`);\n      for (let i = 0; i < serverContainers.length; i++) {\n        // When going from the server to the client, we may end up in a situation where there's\n        // already a container on the page, but we don't have a reference to it. Clear the\n        // old container so we don't get duplicates. Doing this, instead of emptying the previous\n        // container, should be slightly faster.\n        serverContainers[i].remove();\n      }\n      const messagesContainer = this._document.createElement('div');\n      // We add `visibility: hidden` in order to prevent text in this container from\n      // being searchable by the browser's Ctrl + F functionality.\n      // Screen-readers will still read the description for elements with aria-describedby even\n      // when the description element is not visible.\n      messagesContainer.style.visibility = 'hidden';\n      // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n      // the description element doesn't impact page layout.\n      messagesContainer.classList.add(containerClassName);\n      messagesContainer.classList.add('cdk-visually-hidden');\n      // @breaking-change 14.0.0 Remove null check for `_platform`.\n      if (this._platform && !this._platform.isBrowser) {\n        messagesContainer.setAttribute('platform', 'server');\n      }\n      this._document.body.appendChild(messagesContainer);\n      this._messagesContainer = messagesContainer;\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n      // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n      const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n      element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, key) {\n      const registeredMessage = this._messageRegistry.get(key);\n      // Add the aria-describedby reference and set the\n      // describedby_host attribute to mark the element.\n      addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n      registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, key) {\n      const registeredMessage = this._messageRegistry.get(key);\n      registeredMessage.referenceCount--;\n      removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, key) {\n      const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n      const registeredMessage = this._messageRegistry.get(key);\n      const messageId = registeredMessage && registeredMessage.messageElement.id;\n      return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n      if (!this._isElementNode(element)) {\n        return false;\n      }\n      if (message && typeof message === 'object') {\n        // We'd have to make some assumptions about the description element's text, if the consumer\n        // passed in an element. Assume that if an element is passed in, the consumer has verified\n        // that it can be used as a description.\n        return true;\n      }\n      const trimmedMessage = message == null ? '' : `${message}`.trim();\n      const ariaLabel = element.getAttribute('aria-label');\n      // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n      // element, because screen readers will end up reading out the same text twice in a row.\n      return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n      return element.nodeType === this._document.ELEMENT_NODE;\n    }\n    static {\n      this.ɵfac = function AriaDescriber_Factory(t) {\n        return new (t || AriaDescriber)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.Platform));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: AriaDescriber,\n        factory: AriaDescriber.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AriaDescriber;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element, serviceId) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n  }\n}\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n  constructor(_items, injector) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    this._homeAndEnd = false;\n    this._pageUpAndDown = {\n      enabled: false,\n      delta: 10\n    };\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    this._skipPredicateFn = item => item.disabled;\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    this.tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n    this.change = new Subject();\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      this._itemChangesSubscription = _items.changes.subscribe(newItems => this._itemsChanged(newItems.toArray()));\n    } else if (isSignal(_items)) {\n      if (!injector && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new Error('ListKeyManager constructed with a signal must receive an injector');\n      }\n      this._effectRef = effect(() => this._itemsChanged(_items()), {\n        injector\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate) {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true) {\n    this._wrap = shouldWrap;\n    return this;\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled = true) {\n    this._vertical = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction) {\n    this._horizontal = direction;\n    return this;\n  }\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys) {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval = 200) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const items = this._getItemsArray();\n      if (items.length > 0 && items.some(item => typeof item.getLabel !== 'function')) {\n        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n      }\n    }\n    this._typeaheadSubscription.unsubscribe();\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n      const items = this._getItemsArray();\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n        if (!this._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          this.setActiveItem(index);\n          break;\n        }\n      }\n      this._pressedLetters = [];\n    });\n    return this;\n  }\n  /** Cancels the current typeahead sequence. */\n  cancelTypeahead() {\n    this._pressedLetters = [];\n    return this;\n  }\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled = true) {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n   * respectively when the Page-Up or Page-Down key is pressed.\n   * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n   * @param delta Whether pressing the Home or End key activates the first/last item.\n   */\n  withPageUpDown(enabled = true, delta = 10) {\n    this._pageUpAndDown = {\n      enabled,\n      delta\n    };\n    return this;\n  }\n  setActiveItem(item) {\n    const previousActiveItem = this._activeItem;\n    this.updateActiveItem(item);\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event) {\n    const keyCode = event.keyCode;\n    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n      case PAGE_UP:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n          this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n          break;\n        } else {\n          return;\n        }\n      case PAGE_DOWN:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n          const itemsLength = this._getItemsArray().length;\n          this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n          break;\n        } else {\n          return;\n        }\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /** Index of the currently active item. */\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /** The active item. */\n  get activeItem() {\n    return this._activeItem;\n  }\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping() {\n    return this._pressedLetters.length > 0;\n  }\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._getItemsArray().length - 1, -1);\n  }\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n  updateActiveItem(item) {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n  /** Cleans up the key manager. */\n  destroy() {\n    this._typeaheadSubscription.unsubscribe();\n    this._itemChangesSubscription?.unsubscribe();\n    this._effectRef?.destroy();\n    this._letterKeyStream.complete();\n    this.tabOut.complete();\n    this.change.complete();\n    this._pressedLetters = [];\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  _setActiveInWrapMode(delta) {\n    const items = this._getItemsArray();\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  _setActiveItemByIndex(index, fallbackDelta) {\n    const items = this._getItemsArray();\n    if (!items[index]) {\n      return;\n    }\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n      if (!items[index]) {\n        return;\n      }\n    }\n    this.setActiveItem(index);\n  }\n  /** Returns the items as an array. */\n  _getItemsArray() {\n    if (isSignal(this._items)) {\n      return this._items();\n    }\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n  /** Callback for when the items have changed. */\n  _itemsChanged(newItems) {\n    if (this._activeItem) {\n      const newIndex = newItems.indexOf(this._activeItem);\n      if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n        this._activeItemIndex = newIndex;\n      }\n    }\n  }\n}\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  setActiveItem(item) {\n    super.setActiveItem(item);\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n  constructor() {\n    /**\n     * Whether to count an element as focusable even if it is not currently visible.\n     */\n    this.ignoreVisibility = false;\n  }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether it is focusable or\n * tabbable.\n */\nlet InteractivityChecker = /*#__PURE__*/(() => {\n  class InteractivityChecker {\n    constructor(_platform) {\n      this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n      // This does not capture some cases, such as a non-form control with a disabled attribute or\n      // a form control inside of a disabled form, but should capture the most common cases.\n      return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n      return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n      // Nothing is tabbable on the server 😎\n      if (!this._platform.isBrowser) {\n        return false;\n      }\n      const frameElement = getFrameElement(getWindow(element));\n      if (frameElement) {\n        // Frame elements inherit their tabindex onto all child elements.\n        if (getTabIndexValue(frameElement) === -1) {\n          return false;\n        }\n        // Browsers disable tabbing to an element inside of an invisible frame.\n        if (!this.isVisible(frameElement)) {\n          return false;\n        }\n      }\n      let nodeName = element.nodeName.toLowerCase();\n      let tabIndexValue = getTabIndexValue(element);\n      if (element.hasAttribute('contenteditable')) {\n        return tabIndexValue !== -1;\n      }\n      if (nodeName === 'iframe' || nodeName === 'object') {\n        // The frame or object's content may be tabbable depending on the content, but it's\n        // not possibly to reliably detect the content of the frames. We always consider such\n        // elements as non-tabbable.\n        return false;\n      }\n      // In iOS, the browser only considers some specific elements as tabbable.\n      if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n        return false;\n      }\n      if (nodeName === 'audio') {\n        // Audio elements without controls enabled are never tabbable, regardless\n        // of the tabindex attribute explicitly being set.\n        if (!element.hasAttribute('controls')) {\n          return false;\n        }\n        // Audio elements with controls are by default tabbable unless the\n        // tabindex attribute is set to `-1` explicitly.\n        return tabIndexValue !== -1;\n      }\n      if (nodeName === 'video') {\n        // For all video elements, if the tabindex attribute is set to `-1`, the video\n        // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n        // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n        // tabindex attribute is the source of truth here.\n        if (tabIndexValue === -1) {\n          return false;\n        }\n        // If the tabindex is explicitly set, and not `-1` (as per check before), the\n        // video element is always tabbable (regardless of whether it has controls or not).\n        if (tabIndexValue !== null) {\n          return true;\n        }\n        // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n        // has controls enabled. Firefox is special as videos are always tabbable regardless\n        // of whether there are controls or not.\n        return this._platform.FIREFOX || element.hasAttribute('controls');\n      }\n      return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n      // Perform checks in order of left to most expensive.\n      // Again, naive approach that does not capture many edge cases and browser quirks.\n      return isPotentiallyFocusable(element) && !this.isDisabled(element) && (config?.ignoreVisibility || this.isVisible(element));\n    }\n    static {\n      this.ɵfac = function InteractivityChecker_Factory(t) {\n        return new (t || InteractivityChecker)(i0.ɵɵinject(i1.Platform));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: InteractivityChecker,\n        factory: InteractivityChecker.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return InteractivityChecker;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  let tabIndex = element.getAttribute('tabindex');\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n */\nclass FocusTrap {\n  /** Whether the focus trap is active. */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false;\n    // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n    this.startAnchorListener = () => this.focusLastTabbableElement();\n    this.endAnchorListener = () => this.focusFirstTabbableElement();\n    this._enabled = true;\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n      startAnchor.remove();\n    }\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n      endAnchor.remove();\n    }\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor.addEventListener('focus', this.startAnchorListener);\n      }\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusInitialElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusFirstTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusLastTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      for (let i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n          console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n          console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n        }\n      }\n    }\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n  focusInitialElement(options) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      }\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement);\n        focusableChild?.focus(options);\n        return !!focusableChild;\n      }\n      redirectToElement.focus(options);\n      return true;\n    }\n    return this.focusFirstTabbableElement(options);\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusFirstTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('start');\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusLastTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('end');\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    const children = root.children;\n    for (let i = 0; i < children.length; i++) {\n      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    // Iterate in reverse DOM order.\n    const children = root.children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /** Creates an anchor element. */\n  _createAnchor() {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n  toggleAnchors(enabled) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n  /** Executes a function when the zone is stable. */\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nlet FocusTrapFactory = /*#__PURE__*/(() => {\n  class FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n      return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n    static {\n      this.ɵfac = function FocusTrapFactory_Factory(t) {\n        return new (t || FocusTrapFactory)(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: FocusTrapFactory,\n        factory: FocusTrapFactory.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FocusTrapFactory;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Directive for trapping focus within a region. */\nlet CdkTrapFocus = /*#__PURE__*/(() => {\n  class CdkTrapFocus {\n    /** Whether the focus trap is active. */\n    get enabled() {\n      return this.focusTrap?.enabled || false;\n    }\n    set enabled(value) {\n      if (this.focusTrap) {\n        this.focusTrap.enabled = value;\n      }\n    }\n    constructor(_elementRef, _focusTrapFactory,\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n      this._previouslyFocusedElement = null;\n      const platform = inject(Platform);\n      if (platform.isBrowser) {\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n      }\n    }\n    ngOnDestroy() {\n      this.focusTrap?.destroy();\n      // If we stored a previously focused element when using autoCapture, return focus to that\n      // element now that the trapped region is being destroyed.\n      if (this._previouslyFocusedElement) {\n        this._previouslyFocusedElement.focus();\n        this._previouslyFocusedElement = null;\n      }\n    }\n    ngAfterContentInit() {\n      this.focusTrap?.attachAnchors();\n      if (this.autoCapture) {\n        this._captureFocus();\n      }\n    }\n    ngDoCheck() {\n      if (this.focusTrap && !this.focusTrap.hasAttached()) {\n        this.focusTrap.attachAnchors();\n      }\n    }\n    ngOnChanges(changes) {\n      const autoCaptureChange = changes['autoCapture'];\n      if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap?.hasAttached()) {\n        this._captureFocus();\n      }\n    }\n    _captureFocus() {\n      this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n      this.focusTrap?.focusInitialElementWhenReady();\n    }\n    static {\n      this.ɵfac = function CdkTrapFocus_Factory(t) {\n        return new (t || CdkTrapFocus)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkTrapFocus,\n        selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n        inputs: {\n          enabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkTrapFocus\", \"enabled\", booleanAttribute],\n          autoCapture: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkTrapFocusAutoCapture\", \"autoCapture\", booleanAttribute]\n        },\n        exportAs: [\"cdkTrapFocus\"],\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return CdkTrapFocus;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n  /** Whether the FocusTrap is enabled. */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager = _focusTrapManager;\n    this._inertStrategy = _inertStrategy;\n    this._focusTrapManager.register(this);\n  }\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n  destroy() {\n    this._focusTrapManager.deregister(this);\n    super.destroy();\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n    this.toggleAnchors(true);\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n    this.toggleAnchors(false);\n  }\n}\n\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = /*#__PURE__*/new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n  constructor() {\n    /** Focus event handler. */\n    this._listener = null;\n  }\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n  preventFocus(focusTrap) {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n    }\n    this._listener = e => this._trapFocus(focusTrap, e);\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener, true);\n    });\n  }\n  /** Removes the event listener added in preventFocus. */\n  allowFocus(focusTrap) {\n    if (!this._listener) {\n      return;\n    }\n    focusTrap._document.removeEventListener('focus', this._listener, true);\n    this._listener = null;\n  }\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n  _trapFocus(focusTrap, event) {\n    const target = event.target;\n    const focusTrapRoot = focusTrap._element;\n    // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n    if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n}\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nlet FocusTrapManager = /*#__PURE__*/(() => {\n  class FocusTrapManager {\n    constructor() {\n      // A stack of the FocusTraps on the page. Only the FocusTrap at the\n      // top of the stack is active.\n      this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n      // Dedupe focusTraps that register multiple times.\n      this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n      let stack = this._focusTrapStack;\n      if (stack.length) {\n        stack[stack.length - 1]._disable();\n      }\n      stack.push(focusTrap);\n      focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n      focusTrap._disable();\n      const stack = this._focusTrapStack;\n      const i = stack.indexOf(focusTrap);\n      if (i !== -1) {\n        stack.splice(i, 1);\n        if (stack.length) {\n          stack[stack.length - 1]._enable();\n        }\n      }\n    }\n    static {\n      this.ɵfac = function FocusTrapManager_Factory(t) {\n        return new (t || FocusTrapManager)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: FocusTrapManager,\n        factory: FocusTrapManager.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FocusTrapManager;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Factory that allows easy instantiation of configurable focus traps. */\nlet ConfigurableFocusTrapFactory = /*#__PURE__*/(() => {\n  class ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._focusTrapManager = _focusTrapManager;\n      this._document = _document;\n      // TODO split up the strategies into different modules, similar to DateAdapter.\n      this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = {\n      defer: false\n    }) {\n      let configObject;\n      if (typeof config === 'boolean') {\n        configObject = {\n          defer: config\n        };\n      } else {\n        configObject = config;\n      }\n      return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n    static {\n      this.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {\n        return new (t || ConfigurableFocusTrapFactory)(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(FocusTrapManager), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ConfigurableFocusTrapFactory,\n        factory: ConfigurableFocusTrapFactory.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ConfigurableFocusTrapFactory;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when `event.buttons` is zero, or\n  // `event.detail` is zero depending on the browser:\n  // - `event.buttons` works on Firefox, but fails on Chrome.\n  // - `detail` works on Chrome, but fails on Firefox.\n  return event.buttons === 0 || event.detail === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n  const touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0];\n  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);\n}\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nconst INPUT_MODALITY_DETECTOR_OPTIONS = /*#__PURE__*/new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT]\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\nlet InputModalityDetector = /*#__PURE__*/(() => {\n  class InputModalityDetector {\n    /** The most recently detected input modality. */\n    get mostRecentModality() {\n      return this._modality.value;\n    }\n    constructor(_platform, ngZone, document, options) {\n      this._platform = _platform;\n      /**\n       * The most recently detected input modality event target. Is null if no input modality has been\n       * detected or if the associated event target is null for some unknown reason.\n       */\n      this._mostRecentTarget = null;\n      /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n      this._modality = new BehaviorSubject(null);\n      /**\n       * The timestamp of the last touch input modality. Used to determine whether mousedown events\n       * should be attributed to mouse or touch.\n       */\n      this._lastTouchMs = 0;\n      /**\n       * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n       * bound.\n       */\n      this._onKeydown = event => {\n        // If this is one of the keys we should ignore, then ignore it and don't update the input\n        // modality to keyboard.\n        if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\n          return;\n        }\n        this._modality.next('keyboard');\n        this._mostRecentTarget = _getEventTarget(event);\n      };\n      /**\n       * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n       * gets bound.\n       */\n      this._onMousedown = event => {\n        // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n        // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n        // after the previous touch event.\n        if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n          return;\n        }\n        // Fake mousedown events are fired by some screen readers when controls are activated by the\n        // screen reader. Attribute them to keyboard input modality.\n        this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n        this._mostRecentTarget = _getEventTarget(event);\n      };\n      /**\n       * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n       * gets bound.\n       */\n      this._onTouchstart = event => {\n        // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n        // events are fired. Again, attribute to keyboard input modality.\n        if (isFakeTouchstartFromScreenReader(event)) {\n          this._modality.next('keyboard');\n          return;\n        }\n        // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n        // triggered via mouse vs touch.\n        this._lastTouchMs = Date.now();\n        this._modality.next('touch');\n        this._mostRecentTarget = _getEventTarget(event);\n      };\n      this._options = {\n        ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\n        ...options\n      };\n      // Skip the first emission as it's null.\n      this.modalityDetected = this._modality.pipe(skip(1));\n      this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n      // If we're not in a browser, this service should do nothing, as there's no relevant input\n      // modality to detect.\n      if (_platform.isBrowser) {\n        ngZone.runOutsideAngular(() => {\n          document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n          document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n          document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n        });\n      }\n    }\n    ngOnDestroy() {\n      this._modality.complete();\n      if (this._platform.isBrowser) {\n        document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n        document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n        document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n      }\n    }\n    static {\n      this.ɵfac = function InputModalityDetector_Factory(t) {\n        return new (t || InputModalityDetector)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: InputModalityDetector,\n        factory: InputModalityDetector.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return InputModalityDetector;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = /*#__PURE__*/new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\nlet uniqueIds = 0;\nlet LiveAnnouncer = /*#__PURE__*/(() => {\n  class LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n      this._ngZone = _ngZone;\n      this._defaultOptions = _defaultOptions;\n      // We inject the live element and document as `any` because the constructor signature cannot\n      // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n      // a class decorator causes TypeScript to preserve the constructor signature types.\n      this._document = _document;\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n      const defaultOptions = this._defaultOptions;\n      let politeness;\n      let duration;\n      if (args.length === 1 && typeof args[0] === 'number') {\n        duration = args[0];\n      } else {\n        [politeness, duration] = args;\n      }\n      this.clear();\n      clearTimeout(this._previousTimeout);\n      if (!politeness) {\n        politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n      }\n      if (duration == null && defaultOptions) {\n        duration = defaultOptions.duration;\n      }\n      // TODO: ensure changing the politeness works on all environments we support.\n      this._liveElement.setAttribute('aria-live', politeness);\n      if (this._liveElement.id) {\n        this._exposeAnnouncerToModals(this._liveElement.id);\n      }\n      // This 100ms timeout is necessary for some browser + screen-reader combinations:\n      // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n      // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n      //   second time without clearing and then using a non-zero delay.\n      // (using JAWS 17 at time of this writing).\n      return this._ngZone.runOutsideAngular(() => {\n        if (!this._currentPromise) {\n          this._currentPromise = new Promise(resolve => this._currentResolve = resolve);\n        }\n        clearTimeout(this._previousTimeout);\n        this._previousTimeout = setTimeout(() => {\n          this._liveElement.textContent = message;\n          if (typeof duration === 'number') {\n            this._previousTimeout = setTimeout(() => this.clear(), duration);\n          }\n          // For some reason in tests this can be undefined\n          // Probably related to ZoneJS and every other thing that patches browser APIs in tests\n          this._currentResolve?.();\n          this._currentPromise = this._currentResolve = undefined;\n        }, 100);\n        return this._currentPromise;\n      });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n      if (this._liveElement) {\n        this._liveElement.textContent = '';\n      }\n    }\n    ngOnDestroy() {\n      clearTimeout(this._previousTimeout);\n      this._liveElement?.remove();\n      this._liveElement = null;\n      this._currentResolve?.();\n      this._currentPromise = this._currentResolve = undefined;\n    }\n    _createLiveElement() {\n      const elementClass = 'cdk-live-announcer-element';\n      const previousElements = this._document.getElementsByClassName(elementClass);\n      const liveEl = this._document.createElement('div');\n      // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n      for (let i = 0; i < previousElements.length; i++) {\n        previousElements[i].remove();\n      }\n      liveEl.classList.add(elementClass);\n      liveEl.classList.add('cdk-visually-hidden');\n      liveEl.setAttribute('aria-atomic', 'true');\n      liveEl.setAttribute('aria-live', 'polite');\n      liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n      this._document.body.appendChild(liveEl);\n      return liveEl;\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live announcer element if there is an\n     * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live announcer element.\n     */\n    _exposeAnnouncerToModals(id) {\n      // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n      // the `SnakBarContainer` and other usages.\n      //\n      // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n      // section of the DOM we need to look through. This should cover all the cases we support, but\n      // the selector can be expanded if it turns out to be too narrow.\n      const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n      for (let i = 0; i < modals.length; i++) {\n        const modal = modals[i];\n        const ariaOwns = modal.getAttribute('aria-owns');\n        if (!ariaOwns) {\n          modal.setAttribute('aria-owns', id);\n        } else if (ariaOwns.indexOf(id) === -1) {\n          modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n        }\n      }\n    }\n    static {\n      this.ɵfac = function LiveAnnouncer_Factory(t) {\n        return new (t || LiveAnnouncer)(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: LiveAnnouncer,\n        factory: LiveAnnouncer.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return LiveAnnouncer;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nlet CdkAriaLive = /*#__PURE__*/(() => {\n  class CdkAriaLive {\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() {\n      return this._politeness;\n    }\n    set politeness(value) {\n      this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n      if (this._politeness === 'off') {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n          this._subscription = null;\n        }\n      } else if (!this._subscription) {\n        this._subscription = this._ngZone.runOutsideAngular(() => {\n          return this._contentObserver.observe(this._elementRef).subscribe(() => {\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n            const elementText = this._elementRef.nativeElement.textContent;\n            // The `MutationObserver` fires also for attribute\n            // changes which we don't want to announce.\n            if (elementText !== this._previousAnnouncedText) {\n              this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n              this._previousAnnouncedText = elementText;\n            }\n          });\n        });\n      }\n    }\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n      this._elementRef = _elementRef;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._contentObserver = _contentObserver;\n      this._ngZone = _ngZone;\n      this._politeness = 'polite';\n    }\n    ngOnDestroy() {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n      }\n    }\n    static {\n      this.ɵfac = function CdkAriaLive_Factory(t) {\n        return new (t || CdkAriaLive)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LiveAnnouncer), i0.ɵɵdirectiveInject(i1$1.ContentObserver), i0.ɵɵdirectiveInject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkAriaLive,\n        selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n        inputs: {\n          politeness: [i0.ɵɵInputFlags.None, \"cdkAriaLive\", \"politeness\"],\n          duration: [i0.ɵɵInputFlags.None, \"cdkAriaLiveDuration\", \"duration\"]\n        },\n        exportAs: [\"cdkAriaLive\"],\n        standalone: true\n      });\n    }\n  }\n  return CdkAriaLive;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Detection mode used for attributing the origin of a focus event. */\nvar FocusMonitorDetectionMode = /*#__PURE__*/function (FocusMonitorDetectionMode) {\n  /**\n   * Any mousedown, keydown, or touchstart event that happened in the previous\n   * tick or the current tick will be used to assign a focus event's origin (to\n   * either mouse, keyboard, or touch). This is the default option.\n   */\n  FocusMonitorDetectionMode[FocusMonitorDetectionMode[\"IMMEDIATE\"] = 0] = \"IMMEDIATE\";\n  /**\n   * A focus event's origin is always attributed to the last corresponding\n   * mousedown, keydown, or touchstart event, no matter how long ago it occurred.\n   */\n  FocusMonitorDetectionMode[FocusMonitorDetectionMode[\"EVENTUAL\"] = 1] = \"EVENTUAL\";\n  return FocusMonitorDetectionMode;\n}(FocusMonitorDetectionMode || {});\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nlet FocusMonitor = /*#__PURE__*/(() => {\n  class FocusMonitor {\n    constructor(_ngZone, _platform, _inputModalityDetector, /** @breaking-change 11.0.0 make document required */\n    document, options) {\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      this._inputModalityDetector = _inputModalityDetector;\n      /** The focus origin that the next focus event is a result of. */\n      this._origin = null;\n      /** Whether the window has just been focused. */\n      this._windowFocused = false;\n      /**\n       * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n       * focus events to touch interactions requires special logic.\n       */\n      this._originFromTouchInteraction = false;\n      /** Map of elements being monitored to their info. */\n      this._elementInfo = new Map();\n      /** The number of elements currently being monitored. */\n      this._monitoredElementCount = 0;\n      /**\n       * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n       * as well as the number of monitored elements that they contain. We have to treat focus/blur\n       * handlers differently from the rest of the events, because the browser won't emit events\n       * to the document when focus moves inside of a shadow root.\n       */\n      this._rootNodeFocusListenerCount = new Map();\n      /**\n       * Event listener for `focus` events on the window.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n      this._windowFocusListener = () => {\n        // Make a note of when the window regains focus, so we can\n        // restore the origin info for the focused element.\n        this._windowFocused = true;\n        this._windowFocusTimeoutId = window.setTimeout(() => this._windowFocused = false);\n      };\n      /** Subject for stopping our InputModalityDetector subscription. */\n      this._stopInputModalityDetector = new Subject();\n      /**\n       * Event listener for `focus` and 'blur' events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n      this._rootNodeFocusAndBlurListener = event => {\n        const target = _getEventTarget(event);\n        // We need to walk up the ancestor chain in order to support `checkChildren`.\n        for (let element = target; element; element = element.parentElement) {\n          if (event.type === 'focus') {\n            this._onFocus(event, element);\n          } else {\n            this._onBlur(event, element);\n          }\n        }\n      };\n      this._document = document;\n      this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;\n    }\n    monitor(element, checkChildren = false) {\n      const nativeElement = coerceElement(element);\n      // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n      if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n        // Note: we don't want the observable to emit at all so we don't pass any parameters.\n        return of();\n      }\n      // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n      // the shadow root, rather than the `document`, because the browser won't emit focus events\n      // to the `document`, if focus is moving within the same shadow root.\n      const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n      const cachedInfo = this._elementInfo.get(nativeElement);\n      // Check if we're already monitoring this element.\n      if (cachedInfo) {\n        if (checkChildren) {\n          // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n          // observers into ones that behave as if `checkChildren` was turned on. We need a more\n          // robust solution.\n          cachedInfo.checkChildren = true;\n        }\n        return cachedInfo.subject;\n      }\n      // Create monitored element info.\n      const info = {\n        checkChildren: checkChildren,\n        subject: new Subject(),\n        rootNode\n      };\n      this._elementInfo.set(nativeElement, info);\n      this._registerGlobalListeners(info);\n      return info.subject;\n    }\n    stopMonitoring(element) {\n      const nativeElement = coerceElement(element);\n      const elementInfo = this._elementInfo.get(nativeElement);\n      if (elementInfo) {\n        elementInfo.subject.complete();\n        this._setClasses(nativeElement);\n        this._elementInfo.delete(nativeElement);\n        this._removeGlobalListeners(elementInfo);\n      }\n    }\n    focusVia(element, origin, options) {\n      const nativeElement = coerceElement(element);\n      const focusedElement = this._getDocument().activeElement;\n      // If the element is focused already, calling `focus` again won't trigger the event listener\n      // which means that the focus classes won't be updated. If that's the case, update the classes\n      // directly without waiting for an event.\n      if (nativeElement === focusedElement) {\n        this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n      } else {\n        this._setOrigin(origin);\n        // `focus` isn't available on the server\n        if (typeof nativeElement.focus === 'function') {\n          nativeElement.focus(options);\n        }\n      }\n    }\n    ngOnDestroy() {\n      this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n      return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n      const doc = this._getDocument();\n      return doc.defaultView || window;\n    }\n    _getFocusOrigin(focusEventTarget) {\n      if (this._origin) {\n        // If the origin was realized via a touch interaction, we need to perform additional checks\n        // to determine whether the focus origin should be attributed to touch or program.\n        if (this._originFromTouchInteraction) {\n          return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n        } else {\n          return this._origin;\n        }\n      }\n      // If the window has just regained focus, we can restore the most recent origin from before the\n      // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n      // focus. This typically means one of two things happened:\n      //\n      // 1) The element was programmatically focused, or\n      // 2) The element was focused via screen reader navigation (which generally doesn't fire\n      //    events).\n      //\n      // Because we can't distinguish between these two cases, we default to setting `program`.\n      if (this._windowFocused && this._lastFocusOrigin) {\n        return this._lastFocusOrigin;\n      }\n      // If the interaction is coming from an input label, we consider it a mouse interactions.\n      // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n      // our detection, because all our assumptions are for `mousedown`. We need to handle this\n      // special case, because it's very common for checkboxes and radio buttons.\n      if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n        return 'mouse';\n      }\n      return 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n    _shouldBeAttributedToTouch(focusEventTarget) {\n      // Please note that this check is not perfect. Consider the following edge case:\n      //\n      // <div #parent tabindex=\"0\">\n      //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n      // </div>\n      //\n      // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n      // #child, #parent is programmatically focused. This code will attribute the focus to touch\n      // instead of program. This is a relatively minor edge-case that can be worked around by using\n      // focusVia(parent, 'program') to focus #parent.\n      return this._detectionMode === FocusMonitorDetectionMode.EVENTUAL || !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget);\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n      element.classList.toggle('cdk-focused', !!origin);\n      element.classList.toggle('cdk-touch-focused', origin === 'touch');\n      element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n      element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n      element.classList.toggle('cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n    _setOrigin(origin, isFromInteraction = false) {\n      this._ngZone.runOutsideAngular(() => {\n        this._origin = origin;\n        this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n        // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n        // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n        // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n        // a touch event because when a touch event is fired, the associated focus event isn't yet in\n        // the event queue. Before doing so, clear any pending timeouts.\n        if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {\n          clearTimeout(this._originTimeoutId);\n          const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n          this._originTimeoutId = setTimeout(() => this._origin = null, ms);\n        }\n      });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n      // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n      // focus event affecting the monitored element. If we want to use the origin of the first event\n      // instead we should check for the cdk-focused class here and return if the element already has\n      // it. (This only matters for elements that have includesChildren = true).\n      // If we are not counting child-element-focus as focused, make sure that the event target is the\n      // monitored element itself.\n      const elementInfo = this._elementInfo.get(element);\n      const focusEventTarget = _getEventTarget(event);\n      if (!elementInfo || !elementInfo.checkChildren && element !== focusEventTarget) {\n        return;\n      }\n      this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n      // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n      // order to focus another child of the monitored element.\n      const elementInfo = this._elementInfo.get(element);\n      if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n        return;\n      }\n      this._setClasses(element);\n      this._emitOrigin(elementInfo, null);\n    }\n    _emitOrigin(info, origin) {\n      if (info.subject.observers.length) {\n        this._ngZone.run(() => info.subject.next(origin));\n      }\n    }\n    _registerGlobalListeners(elementInfo) {\n      if (!this._platform.isBrowser) {\n        return;\n      }\n      const rootNode = elementInfo.rootNode;\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n      if (!rootNodeFocusListeners) {\n        this._ngZone.runOutsideAngular(() => {\n          rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        });\n      }\n      this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n      // Register global listeners when first element is monitored.\n      if (++this._monitoredElementCount === 1) {\n        // Note: we listen to events in the capture phase so we\n        // can detect them even if the user stops propagation.\n        this._ngZone.runOutsideAngular(() => {\n          const window = this._getWindow();\n          window.addEventListener('focus', this._windowFocusListener);\n        });\n        // The InputModalityDetector is also just a collection of global listeners.\n        this._inputModalityDetector.modalityDetected.pipe(takeUntil(this._stopInputModalityDetector)).subscribe(modality => {\n          this._setOrigin(modality, true /* isFromInteraction */);\n        });\n      }\n    }\n    _removeGlobalListeners(elementInfo) {\n      const rootNode = elementInfo.rootNode;\n      if (this._rootNodeFocusListenerCount.has(rootNode)) {\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n        if (rootNodeFocusListeners > 1) {\n          this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n        } else {\n          rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          this._rootNodeFocusListenerCount.delete(rootNode);\n        }\n      }\n      // Unregister global listeners when last element is unmonitored.\n      if (! --this._monitoredElementCount) {\n        const window = this._getWindow();\n        window.removeEventListener('focus', this._windowFocusListener);\n        // Equivalently, stop our InputModalityDetector subscription.\n        this._stopInputModalityDetector.next();\n        // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n        clearTimeout(this._windowFocusTimeoutId);\n        clearTimeout(this._originTimeoutId);\n      }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n    _originChanged(element, origin, elementInfo) {\n      this._setClasses(element, origin);\n      this._emitOrigin(elementInfo, origin);\n      this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n    _getClosestElementsInfo(element) {\n      const results = [];\n      this._elementInfo.forEach((info, currentElement) => {\n        if (currentElement === element || info.checkChildren && currentElement.contains(element)) {\n          results.push([currentElement, info]);\n        }\n      });\n      return results;\n    }\n    /**\n     * Returns whether an interaction is likely to have come from the user clicking the `label` of\n     * an `input` or `textarea` in order to focus it.\n     * @param focusEventTarget Target currently receiving focus.\n     */\n    _isLastInteractionFromInputLabel(focusEventTarget) {\n      const {\n        _mostRecentTarget: mostRecentTarget,\n        mostRecentModality\n      } = this._inputModalityDetector;\n      // If the last interaction used the mouse on an element contained by one of the labels\n      // of an `input`/`textarea` that is currently focused, it is very likely that the\n      // user redirected focus using the label.\n      if (mostRecentModality !== 'mouse' || !mostRecentTarget || mostRecentTarget === focusEventTarget || focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA' || focusEventTarget.disabled) {\n        return false;\n      }\n      const labels = focusEventTarget.labels;\n      if (labels) {\n        for (let i = 0; i < labels.length; i++) {\n          if (labels[i].contains(mostRecentTarget)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    static {\n      this.ɵfac = function FocusMonitor_Factory(t) {\n        return new (t || FocusMonitor)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(InputModalityDetector), i0.ɵɵinject(DOCUMENT, 8), i0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: FocusMonitor,\n        factory: FocusMonitor.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FocusMonitor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nlet CdkMonitorFocus = /*#__PURE__*/(() => {\n  class CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this._focusOrigin = null;\n      this.cdkFocusChange = new EventEmitter();\n    }\n    get focusOrigin() {\n      return this._focusOrigin;\n    }\n    ngAfterViewInit() {\n      const element = this._elementRef.nativeElement;\n      this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => {\n        this._focusOrigin = origin;\n        this.cdkFocusChange.emit(origin);\n      });\n    }\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n      if (this._monitorSubscription) {\n        this._monitorSubscription.unsubscribe();\n      }\n    }\n    static {\n      this.ɵfac = function CdkMonitorFocus_Factory(t) {\n        return new (t || CdkMonitorFocus)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FocusMonitor));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkMonitorFocus,\n        selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n        outputs: {\n          cdkFocusChange: \"cdkFocusChange\"\n        },\n        exportAs: [\"cdkMonitorFocus\"],\n        standalone: true\n      });\n    }\n  }\n  return CdkMonitorFocus;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Set of possible high-contrast mode backgrounds. */\nvar HighContrastMode = /*#__PURE__*/function (HighContrastMode) {\n  HighContrastMode[HighContrastMode[\"NONE\"] = 0] = \"NONE\";\n  HighContrastMode[HighContrastMode[\"BLACK_ON_WHITE\"] = 1] = \"BLACK_ON_WHITE\";\n  HighContrastMode[HighContrastMode[\"WHITE_ON_BLACK\"] = 2] = \"WHITE_ON_BLACK\";\n  return HighContrastMode;\n}(HighContrastMode || {});\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nlet HighContrastModeDetector = /*#__PURE__*/(() => {\n  class HighContrastModeDetector {\n    constructor(_platform, document) {\n      this._platform = _platform;\n      this._document = document;\n      this._breakpointSubscription = inject(BreakpointObserver).observe('(forced-colors: active)').subscribe(() => {\n        if (this._hasCheckedHighContrastMode) {\n          this._hasCheckedHighContrastMode = false;\n          this._applyBodyHighContrastModeCssClasses();\n        }\n      });\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n      if (!this._platform.isBrowser) {\n        return HighContrastMode.NONE;\n      }\n      // Create a test element with an arbitrary background-color that is neither black nor\n      // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n      // appending the test element to the DOM does not affect layout by absolutely positioning it\n      const testElement = this._document.createElement('div');\n      testElement.style.backgroundColor = 'rgb(1,2,3)';\n      testElement.style.position = 'absolute';\n      this._document.body.appendChild(testElement);\n      // Get the computed style for the background color, collapsing spaces to normalize between\n      // browsers. Once we get this color, we no longer need the test element. Access the `window`\n      // via the document so we can fake it in tests. Note that we have extra null checks, because\n      // this logic will likely run during app bootstrap and throwing can break the entire app.\n      const documentWindow = this._document.defaultView || window;\n      const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n      const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n      testElement.remove();\n      switch (computedColor) {\n        // Pre Windows 11 dark theme.\n        case 'rgb(0,0,0)':\n        // Windows 11 dark themes.\n        case 'rgb(45,50,54)':\n        case 'rgb(32,32,32)':\n          return HighContrastMode.WHITE_ON_BLACK;\n        // Pre Windows 11 light theme.\n        case 'rgb(255,255,255)':\n        // Windows 11 light theme.\n        case 'rgb(255,250,239)':\n          return HighContrastMode.BLACK_ON_WHITE;\n      }\n      return HighContrastMode.NONE;\n    }\n    ngOnDestroy() {\n      this._breakpointSubscription.unsubscribe();\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n      if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n        const bodyClasses = this._document.body.classList;\n        bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n        this._hasCheckedHighContrastMode = true;\n        const mode = this.getHighContrastMode();\n        if (mode === HighContrastMode.BLACK_ON_WHITE) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n        } else if (mode === HighContrastMode.WHITE_ON_BLACK) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n        }\n      }\n    }\n    static {\n      this.ɵfac = function HighContrastModeDetector_Factory(t) {\n        return new (t || HighContrastModeDetector)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: HighContrastModeDetector,\n        factory: HighContrastModeDetector.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return HighContrastModeDetector;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet A11yModule = /*#__PURE__*/(() => {\n  class A11yModule {\n    constructor(highContrastModeDetector) {\n      highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n    static {\n      this.ɵfac = function A11yModule_Factory(t) {\n        return new (t || A11yModule)(i0.ɵɵinject(HighContrastModeDetector));\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: A11yModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [ObserversModule]\n      });\n    }\n  }\n  return A11yModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusMonitorDetectionMode, FocusTrap, FocusTrapFactory, HighContrastMode, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, addAriaReferencedId, getAriaReferenceIds, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, removeAriaReferencedId };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nconst DIR_DOCUMENT = /*#__PURE__*/new InjectionToken('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n  return inject(DOCUMENT);\n}\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\nfunction _resolveDirectionality(rawValue) {\n  const value = rawValue?.toLowerCase() || '';\n  if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n    return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n  }\n  return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nlet Directionality = /*#__PURE__*/(() => {\n  class Directionality {\n    constructor(_document) {\n      /** The current 'ltr' or 'rtl' value. */\n      this.value = 'ltr';\n      /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n      this.change = new EventEmitter();\n      if (_document) {\n        const bodyDir = _document.body ? _document.body.dir : null;\n        const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n        this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n      }\n    }\n    ngOnDestroy() {\n      this.change.complete();\n    }\n    static {\n      this.ɵfac = function Directionality_Factory(t) {\n        return new (t || Directionality)(i0.ɵɵinject(DIR_DOCUMENT, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: Directionality,\n        factory: Directionality.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return Directionality;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nlet Dir = /*#__PURE__*/(() => {\n  class Dir {\n    constructor() {\n      /** Normalized direction that accounts for invalid/unsupported values. */\n      this._dir = 'ltr';\n      /** Whether the `value` has been set to its initial value. */\n      this._isInitialized = false;\n      /** Event emitted when the direction changes. */\n      this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() {\n      return this._dir;\n    }\n    set dir(value) {\n      const previousValue = this._dir;\n      // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n      // whereas the browser does it based on the content of the element. Since doing so based\n      // on the content can be expensive, for now we're doing the simpler matching.\n      this._dir = _resolveDirectionality(value);\n      this._rawDir = value;\n      if (previousValue !== this._dir && this._isInitialized) {\n        this.change.emit(this._dir);\n      }\n    }\n    /** Current layout direction of the element. */\n    get value() {\n      return this.dir;\n    }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n      this._isInitialized = true;\n    }\n    ngOnDestroy() {\n      this.change.complete();\n    }\n    static {\n      this.ɵfac = function Dir_Factory(t) {\n        return new (t || Dir)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: Dir,\n        selectors: [[\"\", \"dir\", \"\"]],\n        hostVars: 1,\n        hostBindings: function Dir_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"dir\", ctx._rawDir);\n          }\n        },\n        inputs: {\n          dir: \"dir\"\n        },\n        outputs: {\n          change: \"dirChange\"\n        },\n        exportAs: [\"dir\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: Directionality,\n          useExisting: Dir\n        }])]\n      });\n    }\n  }\n  return Dir;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet BidiModule = /*#__PURE__*/(() => {\n  class BidiModule {\n    static {\n      this.ɵfac = function BidiModule_Factory(t) {\n        return new (t || BidiModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: BidiModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return BidiModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };\n","import * as i0 from '@angular/core';\nimport { Version, InjectionToken, inject, NgModule, Optional, Inject, LOCALE_ID, Injectable, Directive, ANIMATION_MODULE_TYPE, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, booleanAttribute, EventEmitter, Output, ViewChild, NgZone, ElementRef } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { VERSION as VERSION$1 } from '@angular/cdk';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { Platform, _isTestEnvironment, normalizePassiveListenerOptions, _getEventTarget } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/** Current version of Angular Material. */\nconst _c0 = [\"*\", [[\"mat-option\"], [\"ng-container\"]]];\nconst _c1 = [\"*\", \"mat-option, ng-container\"];\nconst _c2 = [\"text\"];\nconst _c3 = [[[\"mat-icon\"]], \"*\"];\nconst _c4 = [\"mat-icon\", \"*\"];\nfunction MatOption_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-pseudo-checkbox\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.disabled)(\"state\", ctx_r0.selected ? \"checked\" : \"unchecked\");\n  }\n}\nfunction MatOption_Conditional_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-pseudo-checkbox\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.disabled);\n  }\n}\nfunction MatOption_Conditional_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r0.group.label, \")\");\n  }\n}\nconst _c5 = [\"mat-internal-form-field\", \"\"];\nconst _c6 = [\"*\"];\nconst VERSION = /*#__PURE__*/new Version('17.3.10');\n\n/** @docs-private */\nlet AnimationCurves = /*#__PURE__*/(() => {\n  class AnimationCurves {\n    static {\n      this.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n    }\n    static {\n      this.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n    }\n    static {\n      this.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n    }\n    static {\n      this.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n    }\n  }\n  return AnimationCurves;\n})();\n/** @docs-private */\nlet AnimationDurations = /*#__PURE__*/(() => {\n  class AnimationDurations {\n    static {\n      this.COMPLEX = '375ms';\n    }\n    static {\n      this.ENTERING = '225ms';\n    }\n    static {\n      this.EXITING = '195ms';\n    }\n  }\n  return AnimationDurations;\n})();\n/** @docs-private */\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n  return true;\n}\n/** Injection token that configures whether the Material sanity checks are enabled. */\nconst MATERIAL_SANITY_CHECKS = /*#__PURE__*/new InjectionToken('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nlet MatCommonModule = /*#__PURE__*/(() => {\n  class MatCommonModule {\n    constructor(highContrastModeDetector, _sanityChecks, _document) {\n      this._sanityChecks = _sanityChecks;\n      this._document = _document;\n      /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n      this._hasDoneGlobalChecks = false;\n      // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n      // in MatCommonModule.\n      highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n      if (!this._hasDoneGlobalChecks) {\n        this._hasDoneGlobalChecks = true;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Inject in here so the reference to `Platform` can be removed in production mode.\n          const platform = inject(Platform, {\n            optional: true\n          });\n          if (this._checkIsEnabled('doctype')) {\n            _checkDoctypeIsDefined(this._document);\n          }\n          if (this._checkIsEnabled('theme')) {\n            _checkThemeIsPresent(this._document, !!platform?.isBrowser);\n          }\n          if (this._checkIsEnabled('version')) {\n            _checkCdkVersionMatch();\n          }\n        }\n      }\n    }\n    /** Gets whether a specific sanity check is enabled. */\n    _checkIsEnabled(name) {\n      if (_isTestEnvironment()) {\n        return false;\n      }\n      if (typeof this._sanityChecks === 'boolean') {\n        return this._sanityChecks;\n      }\n      return !!this._sanityChecks[name];\n    }\n    static {\n      this.ɵfac = function MatCommonModule_Factory(t) {\n        return new (t || MatCommonModule)(i0.ɵɵinject(i1.HighContrastModeDetector), i0.ɵɵinject(MATERIAL_SANITY_CHECKS, 8), i0.ɵɵinject(DOCUMENT));\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatCommonModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [BidiModule, BidiModule]\n      });\n    }\n  }\n  return MatCommonModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Checks that the page has a doctype. */\nfunction _checkDoctypeIsDefined(doc) {\n  if (!doc.doctype) {\n    console.warn('Current document does not have a doctype. This may cause ' + 'some Angular Material components not to behave as expected.');\n  }\n}\n/** Checks that a theme has been included. */\nfunction _checkThemeIsPresent(doc, isBrowser) {\n  // We need to assert that the `body` is defined, because these checks run very early\n  // and the `body` won't be defined if the consumer put their scripts in the `head`.\n  if (!doc.body || !isBrowser) {\n    return;\n  }\n  const testElement = doc.createElement('div');\n  testElement.classList.add('mat-theme-loaded-marker');\n  doc.body.appendChild(testElement);\n  const computedStyle = getComputedStyle(testElement);\n  // In some situations the computed style of the test element can be null. For example in\n  // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  if (computedStyle && computedStyle.display !== 'none') {\n    console.warn('Could not find Angular Material core theme. Most Material ' + 'components may not work as expected. For more info refer ' + 'to the theming guide: https://material.angular.io/guide/theming');\n  }\n  testElement.remove();\n}\n/** Checks whether the Material version matches the CDK version. */\nfunction _checkCdkVersionMatch() {\n  if (VERSION.full !== VERSION$1.full) {\n    console.warn('The Angular Material version (' + VERSION.full + ') does not match ' + 'the Angular CDK version (' + VERSION$1.full + ').\\n' + 'Please ensure the versions of these two packages exactly match.');\n  }\n}\nfunction mixinDisabled(base) {\n  return class extends base {\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(...args) {\n      super(...args);\n      this._disabled = false;\n    }\n  };\n}\nfunction mixinColor(base, defaultColor) {\n  return class extends base {\n    get color() {\n      return this._color;\n    }\n    set color(value) {\n      const colorPalette = value || this.defaultColor;\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n        this._color = colorPalette;\n      }\n    }\n    constructor(...args) {\n      super(...args);\n      this.defaultColor = defaultColor;\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\nfunction mixinDisableRipple(base) {\n  return class extends base {\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() {\n      return this._disableRipple;\n    }\n    set disableRipple(value) {\n      this._disableRipple = coerceBooleanProperty(value);\n    }\n    constructor(...args) {\n      super(...args);\n      this._disableRipple = false;\n    }\n  };\n}\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\n  return class extends base {\n    get tabIndex() {\n      return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\n    }\n    constructor(...args) {\n      super(...args);\n      this._tabIndex = defaultTabIndex;\n      this.defaultTabIndex = defaultTabIndex;\n    }\n  };\n}\n\n/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n  constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n    this._defaultMatcher = _defaultMatcher;\n    this.ngControl = ngControl;\n    this._parentFormGroup = _parentFormGroup;\n    this._parentForm = _parentForm;\n    this._stateChanges = _stateChanges;\n    /** Whether the tracker is currently in an error state. */\n    this.errorState = false;\n  }\n  /** Updates the error state based on the provided error state matcher. */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const matcher = this.matcher || this._defaultMatcher;\n    const control = this.ngControl ? this.ngControl.control : null;\n    const newState = matcher?.isErrorState(control, parent) ?? false;\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this._stateChanges.next();\n    }\n  }\n}\nfunction mixinErrorState(base) {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    get errorState() {\n      return this._getTracker().errorState;\n    }\n    set errorState(value) {\n      this._getTracker().errorState = value;\n    }\n    /** An object used to control the error state of the component. */\n    get errorStateMatcher() {\n      return this._getTracker().matcher;\n    }\n    set errorStateMatcher(value) {\n      this._getTracker().matcher = value;\n    }\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n      this._getTracker().updateErrorState();\n    }\n    _getTracker() {\n      if (!this._tracker) {\n        this._tracker = new _ErrorStateTracker(this._defaultErrorStateMatcher, this.ngControl, this._parentFormGroup, this._parentForm, this.stateChanges);\n      }\n      return this._tracker;\n    }\n    constructor(...args) {\n      super(...args);\n    }\n  };\n}\n\n/**\n * Mixin to augment a directive with an initialized property that will emits when ngOnInit ends.\n * @deprecated Track the initialized state manually.\n * @breaking-change 19.0.0\n */\nfunction mixinInitialized(base) {\n  return class extends base {\n    constructor(...args) {\n      super(...args);\n      /** Whether this directive has been marked as initialized. */\n      this._isInitialized = false;\n      /**\n       * List of subscribers that subscribed before the directive was initialized. Should be notified\n       * during _markInitialized. Set to null after pending subscribers are notified, and should\n       * not expect to be populated after.\n       */\n      this._pendingSubscribers = [];\n      /**\n       * Observable stream that emits when the directive initializes. If already initialized, the\n       * subscriber is stored to be notified once _markInitialized is called.\n       */\n      this.initialized = new Observable(subscriber => {\n        // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n        // when _markInitialized is called.\n        if (this._isInitialized) {\n          this._notifySubscriber(subscriber);\n        } else {\n          this._pendingSubscribers.push(subscriber);\n        }\n      });\n    }\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized() {\n      if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('This directive has already been marked as initialized and ' + 'should not be called twice.');\n      }\n      this._isInitialized = true;\n      this._pendingSubscribers.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber) {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nconst MAT_DATE_LOCALE = /*#__PURE__*/new InjectionToken('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY\n});\n/** @docs-private */\nfunction MAT_DATE_LOCALE_FACTORY() {\n  return inject(LOCALE_ID);\n}\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n  constructor() {\n    this._localeChanges = new Subject();\n    /** A stream that emits when the locale changes. */\n    this.localeChanges = this._localeChanges;\n  }\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n  getValidDateOrNull(obj) {\n    return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n  }\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value) {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first, second) {\n    return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);\n  }\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first, second) {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date, min, max) {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\nconst MAT_DATE_FORMATS = /*#__PURE__*/new InjectionToken('mat-date-formats');\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nlet NativeDateAdapter = /*#__PURE__*/(() => {\n  class NativeDateAdapter extends DateAdapter {\n    constructor(\n    /**\n     * @deprecated Now injected via inject(), param to be removed.\n     * @breaking-change 18.0.0\n     */\n    matDateLocale) {\n      super();\n      /**\n       * @deprecated No longer being used. To be removed.\n       * @breaking-change 14.0.0\n       */\n      this.useUtcForDisplay = false;\n      /** The injected locale. */\n      this._matDateLocale = inject(MAT_DATE_LOCALE, {\n        optional: true\n      });\n      if (matDateLocale !== undefined) {\n        this._matDateLocale = matDateLocale;\n      }\n      super.setLocale(this._matDateLocale);\n    }\n    getYear(date) {\n      return date.getFullYear();\n    }\n    getMonth(date) {\n      return date.getMonth();\n    }\n    getDate(date) {\n      return date.getDate();\n    }\n    getDayOfWeek(date) {\n      return date.getDay();\n    }\n    getMonthNames(style) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        month: style,\n        timeZone: 'utc'\n      });\n      return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n    }\n    getDateNames() {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        day: 'numeric',\n        timeZone: 'utc'\n      });\n      return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getDayOfWeekNames(style) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        weekday: style,\n        timeZone: 'utc'\n      });\n      return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getYearName(date) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        year: 'numeric',\n        timeZone: 'utc'\n      });\n      return this._format(dtf, date);\n    }\n    getFirstDayOfWeek() {\n      // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n      return 0;\n    }\n    getNumDaysInMonth(date) {\n      return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    clone(date) {\n      return new Date(date.getTime());\n    }\n    createDate(year, month, date) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Check for invalid month and date (except upper bound on date which we have to check after\n        // creating the Date).\n        if (month < 0 || month > 11) {\n          throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n        }\n        if (date < 1) {\n          throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n        }\n      }\n      let result = this._createDateWithOverflow(year, month, date);\n      // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n      if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n      }\n      return result;\n    }\n    today() {\n      return new Date();\n    }\n    parse(value, parseFormat) {\n      // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n      // parameters.\n      if (typeof value == 'number') {\n        return new Date(value);\n      }\n      return value ? new Date(Date.parse(value)) : null;\n    }\n    format(date, displayFormat) {\n      if (!this.isValid(date)) {\n        throw Error('NativeDateAdapter: Cannot format invalid date.');\n      }\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        ...displayFormat,\n        timeZone: 'utc'\n      });\n      return this._format(dtf, date);\n    }\n    addCalendarYears(date, years) {\n      return this.addCalendarMonths(date, years * 12);\n    }\n    addCalendarMonths(date, months) {\n      let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n      // It's possible to wind up in the wrong month if the original month has more days than the new\n      // month. In this case we want to go to the last day of the desired month.\n      // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n      // guarantee this.\n      if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n        newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n      }\n      return newDate;\n    }\n    addCalendarDays(date, days) {\n      return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    }\n    toIso8601(date) {\n      return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value) {\n      if (typeof value === 'string') {\n        if (!value) {\n          return null;\n        }\n        // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n        // string is the right format first.\n        if (ISO_8601_REGEX.test(value)) {\n          let date = new Date(value);\n          if (this.isValid(date)) {\n            return date;\n          }\n        }\n      }\n      return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n      return obj instanceof Date;\n    }\n    isValid(date) {\n      return !isNaN(date.getTime());\n    }\n    invalid() {\n      return new Date(NaN);\n    }\n    /** Creates a date but allows the month and date to overflow. */\n    _createDateWithOverflow(year, month, date) {\n      // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n      // To work around this we use `setFullYear` and `setHours` instead.\n      const d = new Date();\n      d.setFullYear(year, month, date);\n      d.setHours(0, 0, 0, 0);\n      return d;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    _2digit(n) {\n      return ('00' + n).slice(-2);\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    _format(dtf, date) {\n      // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n      // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n      const d = new Date();\n      d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n      d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n      return dtf.format(d);\n    }\n    static {\n      this.ɵfac = function NativeDateAdapter_Factory(t) {\n        return new (t || NativeDateAdapter)(i0.ɵɵinject(MAT_DATE_LOCALE, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: NativeDateAdapter,\n        factory: NativeDateAdapter.ɵfac\n      });\n    }\n  }\n  return NativeDateAdapter;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst MAT_NATIVE_DATE_FORMATS = {\n  parse: {\n    dateInput: null\n  },\n  display: {\n    dateInput: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    },\n    monthYearLabel: {\n      year: 'numeric',\n      month: 'short'\n    },\n    dateA11yLabel: {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    },\n    monthYearA11yLabel: {\n      year: 'numeric',\n      month: 'long'\n    }\n  }\n};\nlet NativeDateModule = /*#__PURE__*/(() => {\n  class NativeDateModule {\n    static {\n      this.ɵfac = function NativeDateModule_Factory(t) {\n        return new (t || NativeDateModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: NativeDateModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [{\n          provide: DateAdapter,\n          useClass: NativeDateAdapter\n        }]\n      });\n    }\n  }\n  return NativeDateModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatNativeDateModule = /*#__PURE__*/(() => {\n  class MatNativeDateModule {\n    static {\n      this.ɵfac = function MatNativeDateModule_Factory(t) {\n        return new (t || MatNativeDateModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatNativeDateModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [provideNativeDateAdapter()]\n      });\n    }\n  }\n  return MatNativeDateModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideNativeDateAdapter(formats = MAT_NATIVE_DATE_FORMATS) {\n  return [{\n    provide: DateAdapter,\n    useClass: NativeDateAdapter\n  }, {\n    provide: MAT_DATE_FORMATS,\n    useValue: formats\n  }];\n}\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nlet ShowOnDirtyErrorStateMatcher = /*#__PURE__*/(() => {\n  class ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n      return !!(control && control.invalid && (control.dirty || form && form.submitted));\n    }\n    static {\n      this.ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(t) {\n        return new (t || ShowOnDirtyErrorStateMatcher)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ShowOnDirtyErrorStateMatcher,\n        factory: ShowOnDirtyErrorStateMatcher.ɵfac\n      });\n    }\n  }\n  return ShowOnDirtyErrorStateMatcher;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nlet ErrorStateMatcher = /*#__PURE__*/(() => {\n  class ErrorStateMatcher {\n    isErrorState(control, form) {\n      return !!(control && control.invalid && (control.touched || form && form.submitted));\n    }\n    static {\n      this.ɵfac = function ErrorStateMatcher_Factory(t) {\n        return new (t || ErrorStateMatcher)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ErrorStateMatcher,\n        factory: ErrorStateMatcher.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ErrorStateMatcher;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nlet MatLine = /*#__PURE__*/(() => {\n  class MatLine {\n    static {\n      this.ɵfac = function MatLine_Factory(t) {\n        return new (t || MatLine)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatLine,\n        selectors: [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]],\n        hostAttrs: [1, \"mat-line\"],\n        standalone: true\n      });\n    }\n  }\n  return MatLine;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({\n    length\n  }) => {\n    setClass(element, `${prefix}-2-line`, false);\n    setClass(element, `${prefix}-3-line`, false);\n    setClass(element, `${prefix}-multi-line`, false);\n    if (length === 2 || length === 3) {\n      setClass(element, `${prefix}-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `${prefix}-multi-line`, true);\n    }\n  });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n  element.nativeElement.classList.toggle(className, isAdd);\n}\nlet MatLineModule = /*#__PURE__*/(() => {\n  class MatLineModule {\n    static {\n      this.ɵfac = function MatLineModule_Factory(t) {\n        return new (t || MatLineModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatLineModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatCommonModule, MatCommonModule]\n      });\n    }\n  }\n  return MatLineModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Possible states for a ripple element. */\nvar RippleState = /*#__PURE__*/function (RippleState) {\n  RippleState[RippleState[\"FADING_IN\"] = 0] = \"FADING_IN\";\n  RippleState[RippleState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  RippleState[RippleState[\"FADING_OUT\"] = 2] = \"FADING_OUT\";\n  RippleState[RippleState[\"HIDDEN\"] = 3] = \"HIDDEN\";\n  return RippleState;\n}(RippleState || {});\n/**\n * Reference to a previously launched ripple element.\n */\nclass RippleRef {\n  constructor(_renderer, /** Reference to the ripple HTML element. */\n  element, /** Ripple configuration used for the ripple. */\n  config, /* Whether animations are forcibly disabled for ripples through CSS. */\n  _animationForciblyDisabledThroughCss = false) {\n    this._renderer = _renderer;\n    this.element = element;\n    this.config = config;\n    this._animationForciblyDisabledThroughCss = _animationForciblyDisabledThroughCss;\n    /** Current state of the ripple. */\n    this.state = RippleState.HIDDEN;\n  }\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions$1 = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Manages events through delegation so that as few event handlers as possible are bound. */\nclass RippleEventManager {\n  constructor() {\n    this._events = new Map();\n    /** Event handler that is bound and which dispatches the events to the different targets. */\n    this._delegateEventHandler = event => {\n      const target = _getEventTarget(event);\n      if (target) {\n        this._events.get(event.type)?.forEach((handlers, element) => {\n          if (element === target || element.contains(target)) {\n            handlers.forEach(handler => handler.handleEvent(event));\n          }\n        });\n      }\n    };\n  }\n  /** Adds an event handler. */\n  addHandler(ngZone, name, element, handler) {\n    const handlersForEvent = this._events.get(name);\n    if (handlersForEvent) {\n      const handlersForElement = handlersForEvent.get(element);\n      if (handlersForElement) {\n        handlersForElement.add(handler);\n      } else {\n        handlersForEvent.set(element, new Set([handler]));\n      }\n    } else {\n      this._events.set(name, new Map([[element, new Set([handler])]]));\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);\n      });\n    }\n  }\n  /** Removes an event handler. */\n  removeHandler(name, element, handler) {\n    const handlersForEvent = this._events.get(name);\n    if (!handlersForEvent) {\n      return;\n    }\n    const handlersForElement = handlersForEvent.get(element);\n    if (!handlersForElement) {\n      return;\n    }\n    handlersForElement.delete(handler);\n    if (handlersForElement.size === 0) {\n      handlersForEvent.delete(element);\n    }\n    if (handlersForEvent.size === 0) {\n      this._events.delete(name);\n      document.removeEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);\n    }\n  }\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nconst defaultRippleAnimationConfig = {\n  enterDuration: 225,\n  exitDuration: 150\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nclass RippleRenderer {\n  static {\n    this._eventManager = /*#__PURE__*/new RippleEventManager();\n  }\n  constructor(_target, _ngZone, elementOrElementRef, _platform) {\n    this._target = _target;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /** Whether the pointer is currently down or not. */\n    this._isPointerDown = false;\n    /**\n     * Map of currently active ripple references.\n     * The ripple reference is mapped to its element event listeners.\n     * The reason why `| null` is used is that event listeners are added only\n     * when the condition is truthy (see the `_startFadeOutTransition` method).\n     */\n    this._activeRipples = new Map();\n    /** Whether pointer-up event listeners have been registered. */\n    this._pointerUpEventsRegistered = false;\n    // Only do anything if we're on the browser.\n    if (_platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n    }\n  }\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x, y, config = {}) {\n    const containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {\n      ...defaultRippleAnimationConfig,\n      ...config.animation\n    };\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const enterDuration = animationConfig.enterDuration;\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n    // If a custom color has been specified, set it as inline style. If no color is\n    // set, the default color will be applied through the ripple theme styles.\n    if (config.color != null) {\n      ripple.style.backgroundColor = config.color;\n    }\n    ripple.style.transitionDuration = `${enterDuration}ms`;\n    this._containerElement.appendChild(ripple);\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical to ensure that the `scale` animates properly.\n    // We enforce a style recalculation by calling `getComputedStyle` and *accessing* a property.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    const computedStyles = window.getComputedStyle(ripple);\n    const userTransitionProperty = computedStyles.transitionProperty;\n    const userTransitionDuration = computedStyles.transitionDuration;\n    // Note: We detect whether animation is forcibly disabled through CSS (e.g. through\n    // `transition: none` or `display: none`). This is technically unexpected since animations are\n    // controlled through the animation config, but this exists for backwards compatibility. This\n    // logic does not need to be super accurate since it covers some edge cases which can be easily\n    // avoided by users.\n    const animationForciblyDisabledThroughCss = userTransitionProperty === 'none' ||\n    // Note: The canonical unit for serialized CSS `<time>` properties is seconds. Additionally\n    // some browsers expand the duration for every property (in our case `opacity` and `transform`).\n    userTransitionDuration === '0s' || userTransitionDuration === '0s, 0s' ||\n    // If the container is 0x0, it's likely `display: none`.\n    containerRect.width === 0 && containerRect.height === 0;\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config, animationForciblyDisabledThroughCss);\n    // Start the enter animation by setting the transform/scale to 100%. The animation will\n    // execute as part of this statement because we forced a style recalculation before.\n    // Note: We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    ripple.style.transform = 'scale3d(1, 1, 1)';\n    rippleRef.state = RippleState.FADING_IN;\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n    let eventListeners = null;\n    // Do not register the `transition` event listener if fade-in and fade-out duration\n    // are set to zero. The events won't fire anyway and we can save resources here.\n    if (!animationForciblyDisabledThroughCss && (enterDuration || animationConfig.exitDuration)) {\n      this._ngZone.runOutsideAngular(() => {\n        const onTransitionEnd = () => this._finishRippleTransition(rippleRef);\n        const onTransitionCancel = () => this._destroyRipple(rippleRef);\n        ripple.addEventListener('transitionend', onTransitionEnd);\n        // If the transition is cancelled (e.g. due to DOM removal), we destroy the ripple\n        // directly as otherwise we would keep it part of the ripple container forever.\n        // https://www.w3.org/TR/css-transitions-1/#:~:text=no%20longer%20in%20the%20document.\n        ripple.addEventListener('transitioncancel', onTransitionCancel);\n        eventListeners = {\n          onTransitionEnd,\n          onTransitionCancel\n        };\n      });\n    }\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.set(rippleRef, eventListeners);\n    // In case there is no fade-in transition duration, we need to manually call the transition\n    // end listener because `transitionend` doesn't fire if there is no transition.\n    if (animationForciblyDisabledThroughCss || !enterDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n    return rippleRef;\n  }\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef) {\n    // For ripples already fading out or hidden, this should be a noop.\n    if (rippleRef.state === RippleState.FADING_OUT || rippleRef.state === RippleState.HIDDEN) {\n      return;\n    }\n    const rippleEl = rippleRef.element;\n    const animationConfig = {\n      ...defaultRippleAnimationConfig,\n      ...rippleRef.config.animation\n    };\n    // This starts the fade-out transition and will fire the transition end listener that\n    // removes the ripple element from the DOM.\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n    // In case there is no fade-out transition duration, we need to manually call the\n    // transition end listener because `transitionend` doesn't fire if there is no transition.\n    if (rippleRef._animationForciblyDisabledThroughCss || !animationConfig.exitDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n  }\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._getActiveRipples().forEach(ripple => ripple.fadeOut());\n  }\n  /** Fades out all currently active non-persistent ripples. */\n  fadeOutAllNonPersistent() {\n    this._getActiveRipples().forEach(ripple => {\n      if (!ripple.config.persistent) {\n        ripple.fadeOut();\n      }\n    });\n  }\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef) {\n    const element = coerceElement(elementOrElementRef);\n    if (!this._platform.isBrowser || !element || element === this._triggerElement) {\n      return;\n    }\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n    this._triggerElement = element;\n    // Use event delegation for the trigger events since they're\n    // set up during creation and are performance-sensitive.\n    pointerDownEvents.forEach(type => {\n      RippleRenderer._eventManager.addHandler(this._ngZone, type, element, this);\n    });\n  }\n  /**\n   * Handles all registered events.\n   * @docs-private\n   */\n  handleEvent(event) {\n    if (event.type === 'mousedown') {\n      this._onMousedown(event);\n    } else if (event.type === 'touchstart') {\n      this._onTouchStart(event);\n    } else {\n      this._onPointerUp();\n    }\n    // If pointer-up events haven't been registered yet, do so now.\n    // We do this on-demand in order to reduce the total number of event listeners\n    // registered by the ripples, which speeds up the rendering time for large UIs.\n    if (!this._pointerUpEventsRegistered) {\n      // The events for hiding the ripple are bound directly on the trigger, because:\n      // 1. Some of them occur frequently (e.g. `mouseleave`) and any advantage we get from\n      // delegation will be diminished by having to look through all the data structures often.\n      // 2. They aren't as performance-sensitive, because they're bound only after the user\n      // has interacted with an element.\n      this._ngZone.runOutsideAngular(() => {\n        pointerUpEvents.forEach(type => {\n          this._triggerElement.addEventListener(type, this, passiveCapturingEventOptions);\n        });\n      });\n      this._pointerUpEventsRegistered = true;\n    }\n  }\n  /** Method that will be called if the fade-in or fade-in transition completed. */\n  _finishRippleTransition(rippleRef) {\n    if (rippleRef.state === RippleState.FADING_IN) {\n      this._startFadeOutTransition(rippleRef);\n    } else if (rippleRef.state === RippleState.FADING_OUT) {\n      this._destroyRipple(rippleRef);\n    }\n  }\n  /**\n   * Starts the fade-out transition of the given ripple if it's not persistent and the pointer\n   * is not held down anymore.\n   */\n  _startFadeOutTransition(rippleRef) {\n    const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n    const {\n      persistent\n    } = rippleRef.config;\n    rippleRef.state = RippleState.VISIBLE;\n    // When the timer runs out while the user has kept their pointer down, we want to\n    // keep only the persistent ripples and the latest transient ripple. We do this,\n    // because we don't want stacked transient ripples to appear after their enter\n    // animation has finished.\n    if (!persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n      rippleRef.fadeOut();\n    }\n  }\n  /** Destroys the given ripple by removing it from the DOM and updating its state. */\n  _destroyRipple(rippleRef) {\n    const eventListeners = this._activeRipples.get(rippleRef) ?? null;\n    this._activeRipples.delete(rippleRef);\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n    // If the current ref is the most recent transient ripple, unset it\n    // avoid memory leaks.\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n    rippleRef.state = RippleState.HIDDEN;\n    if (eventListeners !== null) {\n      rippleRef.element.removeEventListener('transitionend', eventListeners.onTransitionEnd);\n      rippleRef.element.removeEventListener('transitioncancel', eventListeners.onTransitionCancel);\n    }\n    rippleRef.element.remove();\n  }\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  _onMousedown(event) {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n  /** Function being called whenever the trigger is being pressed using touch. */\n  _onTouchStart(event) {\n    if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n      // According to the typings the touches should always be defined, but in some cases\n      // the browser appears to not assign them in tests which leads to flakes.\n      if (touches) {\n        for (let i = 0; i < touches.length; i++) {\n          this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n        }\n      }\n    }\n  }\n  /** Function being called whenever the trigger is being released. */\n  _onPointerUp() {\n    if (!this._isPointerDown) {\n      return;\n    }\n    this._isPointerDown = false;\n    // Fade-out all ripples that are visible and not persistent.\n    this._getActiveRipples().forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE || ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n  _getActiveRipples() {\n    return Array.from(this._activeRipples.keys());\n  }\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    const trigger = this._triggerElement;\n    if (trigger) {\n      pointerDownEvents.forEach(type => RippleRenderer._eventManager.removeHandler(type, trigger, this));\n      if (this._pointerUpEventsRegistered) {\n        pointerUpEvents.forEach(type => trigger.removeEventListener(type, this, passiveCapturingEventOptions));\n        this._pointerUpEventsRegistered = false;\n      }\n    }\n  }\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nconst MAT_RIPPLE_GLOBAL_OPTIONS = /*#__PURE__*/new InjectionToken('mat-ripple-global-options');\nlet MatRipple = /*#__PURE__*/(() => {\n  class MatRipple {\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      if (value) {\n        this.fadeOutAllNonPersistent();\n      }\n      this._disabled = value;\n      this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    get trigger() {\n      return this._trigger || this._elementRef.nativeElement;\n    }\n    set trigger(trigger) {\n      this._trigger = trigger;\n      this._setupTriggerEventsIfEnabled();\n    }\n    constructor(_elementRef, ngZone, platform, globalOptions, _animationMode) {\n      this._elementRef = _elementRef;\n      this._animationMode = _animationMode;\n      /**\n       * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n       * will be the distance from the center of the ripple to the furthest corner of the host element's\n       * bounding rectangle.\n       */\n      this.radius = 0;\n      this._disabled = false;\n      /** @docs-private Whether ripple directive is initialized and the input bindings are set. */\n      this._isInitialized = false;\n      this._globalOptions = globalOptions || {};\n      this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n    }\n    ngOnInit() {\n      this._isInitialized = true;\n      this._setupTriggerEventsIfEnabled();\n    }\n    ngOnDestroy() {\n      this._rippleRenderer._removeTriggerEvents();\n    }\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll() {\n      this._rippleRenderer.fadeOutAll();\n    }\n    /** Fades out all currently showing non-persistent ripple elements. */\n    fadeOutAllNonPersistent() {\n      this._rippleRenderer.fadeOutAllNonPersistent();\n    }\n    /**\n     * Ripple configuration from the directive's input values.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleConfig() {\n      return {\n        centered: this.centered,\n        radius: this.radius,\n        color: this.color,\n        animation: {\n          ...this._globalOptions.animation,\n          ...(this._animationMode === 'NoopAnimations' ? {\n            enterDuration: 0,\n            exitDuration: 0\n          } : {}),\n          ...this.animation\n        },\n        terminateOnPointerUp: this._globalOptions.terminateOnPointerUp\n      };\n    }\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleDisabled() {\n      return this.disabled || !!this._globalOptions.disabled;\n    }\n    /** Sets up the trigger event listeners if ripples are enabled. */\n    _setupTriggerEventsIfEnabled() {\n      if (!this.disabled && this._isInitialized) {\n        this._rippleRenderer.setupTriggerEvents(this.trigger);\n      }\n    }\n    /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n    launch(configOrX, y = 0, config) {\n      if (typeof configOrX === 'number') {\n        return this._rippleRenderer.fadeInRipple(configOrX, y, {\n          ...this.rippleConfig,\n          ...config\n        });\n      } else {\n        return this._rippleRenderer.fadeInRipple(0, 0, {\n          ...this.rippleConfig,\n          ...configOrX\n        });\n      }\n    }\n    static {\n      this.ɵfac = function MatRipple_Factory(t) {\n        return new (t || MatRipple)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.Platform), i0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatRipple,\n        selectors: [[\"\", \"mat-ripple\", \"\"], [\"\", \"matRipple\", \"\"]],\n        hostAttrs: [1, \"mat-ripple\"],\n        hostVars: 2,\n        hostBindings: function MatRipple_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mat-ripple-unbounded\", ctx.unbounded);\n          }\n        },\n        inputs: {\n          color: [i0.ɵɵInputFlags.None, \"matRippleColor\", \"color\"],\n          unbounded: [i0.ɵɵInputFlags.None, \"matRippleUnbounded\", \"unbounded\"],\n          centered: [i0.ɵɵInputFlags.None, \"matRippleCentered\", \"centered\"],\n          radius: [i0.ɵɵInputFlags.None, \"matRippleRadius\", \"radius\"],\n          animation: [i0.ɵɵInputFlags.None, \"matRippleAnimation\", \"animation\"],\n          disabled: [i0.ɵɵInputFlags.None, \"matRippleDisabled\", \"disabled\"],\n          trigger: [i0.ɵɵInputFlags.None, \"matRippleTrigger\", \"trigger\"]\n        },\n        exportAs: [\"matRipple\"],\n        standalone: true\n      });\n    }\n  }\n  return MatRipple;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatRippleModule = /*#__PURE__*/(() => {\n  class MatRippleModule {\n    static {\n      this.ɵfac = function MatRippleModule_Factory(t) {\n        return new (t || MatRippleModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatRippleModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatCommonModule, MatCommonModule]\n      });\n    }\n  }\n  return MatRippleModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nlet MatPseudoCheckbox = /*#__PURE__*/(() => {\n  class MatPseudoCheckbox {\n    constructor(_animationMode) {\n      this._animationMode = _animationMode;\n      /** Display state of the checkbox. */\n      this.state = 'unchecked';\n      /** Whether the checkbox is disabled. */\n      this.disabled = false;\n      /**\n       * Appearance of the pseudo checkbox. Default appearance of 'full' renders a checkmark/mixedmark\n       * indicator inside a square box. 'minimal' appearance only renders the checkmark/mixedmark.\n       */\n      this.appearance = 'full';\n    }\n    static {\n      this.ɵfac = function MatPseudoCheckbox_Factory(t) {\n        return new (t || MatPseudoCheckbox)(i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatPseudoCheckbox,\n        selectors: [[\"mat-pseudo-checkbox\"]],\n        hostAttrs: [1, \"mat-pseudo-checkbox\"],\n        hostVars: 12,\n        hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mat-pseudo-checkbox-indeterminate\", ctx.state === \"indeterminate\")(\"mat-pseudo-checkbox-checked\", ctx.state === \"checked\")(\"mat-pseudo-checkbox-disabled\", ctx.disabled)(\"mat-pseudo-checkbox-minimal\", ctx.appearance === \"minimal\")(\"mat-pseudo-checkbox-full\", ctx.appearance === \"full\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n          }\n        },\n        inputs: {\n          state: \"state\",\n          disabled: \"disabled\",\n          appearance: \"appearance\"\n        },\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 0,\n        vars: 0,\n        template: function MatPseudoCheckbox_Template(rf, ctx) {},\n        styles: [\".mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color);border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color);border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatPseudoCheckbox;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatPseudoCheckboxModule = /*#__PURE__*/(() => {\n  class MatPseudoCheckboxModule {\n    static {\n      this.ɵfac = function MatPseudoCheckboxModule_Factory(t) {\n        return new (t || MatPseudoCheckboxModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatPseudoCheckboxModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatCommonModule]\n      });\n    }\n  }\n  return MatPseudoCheckboxModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Injection token used to provide the parent component to options.\n */\nconst MAT_OPTION_PARENT_COMPONENT = /*#__PURE__*/new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_OPTGROUP = /*#__PURE__*/new InjectionToken('MatOptgroup');\n/**\n * Component that is used to group instances of `mat-option`.\n */\nlet MatOptgroup = /*#__PURE__*/(() => {\n  class MatOptgroup {\n    constructor(parent) {\n      /** whether the option group is disabled. */\n      this.disabled = false;\n      /** Unique id for the underlying label. */\n      this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n      this._inert = parent?.inertGroups ?? false;\n    }\n    static {\n      this.ɵfac = function MatOptgroup_Factory(t) {\n        return new (t || MatOptgroup)(i0.ɵɵdirectiveInject(MAT_OPTION_PARENT_COMPONENT, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatOptgroup,\n        selectors: [[\"mat-optgroup\"]],\n        hostAttrs: [1, \"mat-mdc-optgroup\"],\n        hostVars: 3,\n        hostBindings: function MatOptgroup_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"role\", ctx._inert ? null : \"group\")(\"aria-disabled\", ctx._inert ? null : ctx.disabled.toString())(\"aria-labelledby\", ctx._inert ? null : ctx._labelId);\n          }\n        },\n        inputs: {\n          label: \"label\",\n          disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"disabled\", \"disabled\", booleanAttribute]\n        },\n        exportAs: [\"matOptgroup\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: MAT_OPTGROUP,\n          useExisting: MatOptgroup\n        }]), i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c1,\n        decls: 5,\n        vars: 4,\n        consts: [[\"role\", \"presentation\", 1, \"mat-mdc-optgroup-label\", 3, \"id\"], [1, \"mdc-list-item__primary-text\"]],\n        template: function MatOptgroup_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c0);\n            i0.ɵɵelementStart(0, \"span\", 0)(1, \"span\", 1);\n            i0.ɵɵtext(2);\n            i0.ɵɵprojection(3);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵprojection(4, 1);\n          }\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mdc-list-item--disabled\", ctx.disabled);\n            i0.ɵɵproperty(\"id\", ctx._labelId);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate1(\"\", ctx.label, \" \");\n          }\n        },\n        styles: [\".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color);font-family:var(--mat-optgroup-label-text-font);line-height:var(--mat-optgroup-label-text-line-height);font-size:var(--mat-optgroup-label-text-size);letter-spacing:var(--mat-optgroup-label-text-tracking);font-weight:var(--mat-optgroup-label-text-weight)}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;min-height:48px}.mat-mdc-optgroup-label:focus{outline:none}[dir=rtl] .mat-mdc-optgroup-label,.mat-mdc-optgroup-label[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatOptgroup;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/** Event object emitted by MatOption when selected or deselected. */\nclass MatOptionSelectionChange {\n  constructor( /** Reference to the option that emitted the event. */\n  source, /** Whether the change in the option's value was a result of a user action. */\n  isUserInput = false) {\n    this.source = source;\n    this.isUserInput = isUserInput;\n  }\n}\n/**\n * Single option inside of a `<mat-select>` element.\n */\nlet MatOption = /*#__PURE__*/(() => {\n  class MatOption {\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n      return this._parent && this._parent.multiple;\n    }\n    /** Whether or not the option is currently selected. */\n    get selected() {\n      return this._selected;\n    }\n    /** Whether the option is disabled. */\n    get disabled() {\n      return this.group && this.group.disabled || this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n    }\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n      return !!(this._parent && this._parent.disableRipple);\n    }\n    /** Whether to display checkmark for single-selection. */\n    get hideSingleSelectionIndicator() {\n      return !!(this._parent && this._parent.hideSingleSelectionIndicator);\n    }\n    constructor(_element, _changeDetectorRef, _parent, group) {\n      this._element = _element;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._parent = _parent;\n      this.group = group;\n      this._selected = false;\n      this._active = false;\n      this._disabled = false;\n      this._mostRecentViewValue = '';\n      /** The unique ID of the option. */\n      this.id = `mat-option-${_uniqueIdCounter++}`;\n      /** Event emitted when the option is selected or deselected. */\n      // tslint:disable-next-line:no-output-on-prefix\n      this.onSelectionChange = new EventEmitter();\n      /** Emits when the state of the option changes and any parents have to be notified. */\n      this._stateChanges = new Subject();\n    }\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active() {\n      return this._active;\n    }\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue() {\n      // TODO(kara): Add input property alternative for node envs.\n      return (this._text?.nativeElement.textContent || '').trim();\n    }\n    /** Selects the option. */\n    select(emitEvent = true) {\n      if (!this._selected) {\n        this._selected = true;\n        this._changeDetectorRef.markForCheck();\n        if (emitEvent) {\n          this._emitSelectionChangeEvent();\n        }\n      }\n    }\n    /** Deselects the option. */\n    deselect(emitEvent = true) {\n      if (this._selected) {\n        this._selected = false;\n        this._changeDetectorRef.markForCheck();\n        if (emitEvent) {\n          this._emitSelectionChangeEvent();\n        }\n      }\n    }\n    /** Sets focus onto this option. */\n    focus(_origin, options) {\n      // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n      // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n      const element = this._getHostElement();\n      if (typeof element.focus === 'function') {\n        element.focus(options);\n      }\n    }\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles() {\n      if (!this._active) {\n        this._active = true;\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles() {\n      if (this._active) {\n        this._active = false;\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n      return this.viewValue;\n    }\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event) {\n      if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n        this._selectViaInteraction();\n        // Prevent the page from scrolling down and form submits.\n        event.preventDefault();\n      }\n    }\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction() {\n      if (!this.disabled) {\n        this._selected = this.multiple ? !this._selected : true;\n        this._changeDetectorRef.markForCheck();\n        this._emitSelectionChangeEvent(true);\n      }\n    }\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.\n    // That's because `MatLegacyOption` use `MatOption` type in a few places such as\n    // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.\n    _getTabIndex() {\n      return this.disabled ? '-1' : '0';\n    }\n    /** Gets the host DOM element. */\n    _getHostElement() {\n      return this._element.nativeElement;\n    }\n    ngAfterViewChecked() {\n      // Since parent components could be using the option's label to display the selected values\n      // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n      // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n      // relatively cheap, however we still limit them only to selected options in order to avoid\n      // hitting the DOM too often.\n      if (this._selected) {\n        const viewValue = this.viewValue;\n        if (viewValue !== this._mostRecentViewValue) {\n          if (this._mostRecentViewValue) {\n            this._stateChanges.next();\n          }\n          this._mostRecentViewValue = viewValue;\n        }\n      }\n    }\n    ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n    /** Emits the selection change event. */\n    _emitSelectionChangeEvent(isUserInput = false) {\n      this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n    }\n    static {\n      this.ɵfac = function MatOption_Factory(t) {\n        return new (t || MatOption)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_OPTION_PARENT_COMPONENT, 8), i0.ɵɵdirectiveInject(MAT_OPTGROUP, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatOption,\n        selectors: [[\"mat-option\"]],\n        viewQuery: function MatOption_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c2, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._text = _t.first);\n          }\n        },\n        hostAttrs: [\"role\", \"option\", 1, \"mat-mdc-option\", \"mdc-list-item\"],\n        hostVars: 11,\n        hostBindings: function MatOption_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function MatOption_click_HostBindingHandler() {\n              return ctx._selectViaInteraction();\n            })(\"keydown\", function MatOption_keydown_HostBindingHandler($event) {\n              return ctx._handleKeydown($event);\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵhostProperty(\"id\", ctx.id);\n            i0.ɵɵattribute(\"aria-selected\", ctx.selected)(\"aria-disabled\", ctx.disabled.toString());\n            i0.ɵɵclassProp(\"mdc-list-item--selected\", ctx.selected)(\"mat-mdc-option-multiple\", ctx.multiple)(\"mat-mdc-option-active\", ctx.active)(\"mdc-list-item--disabled\", ctx.disabled);\n          }\n        },\n        inputs: {\n          value: \"value\",\n          id: \"id\",\n          disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"disabled\", \"disabled\", booleanAttribute]\n        },\n        outputs: {\n          onSelectionChange: \"onSelectionChange\"\n        },\n        exportAs: [\"matOption\"],\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c4,\n        decls: 8,\n        vars: 5,\n        consts: [[\"text\", \"\"], [\"aria-hidden\", \"true\", 1, \"mat-mdc-option-pseudo-checkbox\", 3, \"disabled\", \"state\"], [1, \"mdc-list-item__primary-text\"], [\"state\", \"checked\", \"aria-hidden\", \"true\", \"appearance\", \"minimal\", 1, \"mat-mdc-option-pseudo-checkbox\", 3, \"disabled\"], [1, \"cdk-visually-hidden\"], [\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-mdc-option-ripple\", \"mat-mdc-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n        template: function MatOption_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c3);\n            i0.ɵɵtemplate(0, MatOption_Conditional_0_Template, 1, 2, \"mat-pseudo-checkbox\", 1);\n            i0.ɵɵprojection(1);\n            i0.ɵɵelementStart(2, \"span\", 2, 0);\n            i0.ɵɵprojection(4, 1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(5, MatOption_Conditional_5_Template, 1, 1, \"mat-pseudo-checkbox\", 3)(6, MatOption_Conditional_6_Template, 2, 1, \"span\", 4);\n            i0.ɵɵelement(7, \"div\", 5);\n          }\n          if (rf & 2) {\n            i0.ɵɵconditional(0, ctx.multiple ? 0 : -1);\n            i0.ɵɵadvance(5);\n            i0.ɵɵconditional(5, !ctx.multiple && ctx.selected && !ctx.hideSingleSelectionIndicator ? 5 : -1);\n            i0.ɵɵadvance();\n            i0.ɵɵconditional(6, ctx.group && ctx.group._inert ? 6 : -1);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx.disabled || ctx.disableRipple);\n          }\n        },\n        dependencies: [MatPseudoCheckbox, MatRipple],\n        styles: [\".mat-mdc-option{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color);font-family:var(--mat-option-label-text-font);line-height:var(--mat-option-label-text-line-height);font-size:var(--mat-option-label-text-size);letter-spacing:var(--mat-option-label-text-tracking);font-weight:var(--mat-option-label-text-weight);min-height:48px}.mat-mdc-option:focus{outline:none}[dir=rtl] .mat-mdc-option,.mat-mdc-option[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color)}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color)}.mat-mdc-option.mdc-list-item{align-items:center;background:rgba(0,0,0,0)}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}.cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{right:auto;left:16px}.mat-mdc-option-multiple{--mdc-list-list-item-selected-container-color:var(--mdc-list-list-item-container-color, transparent)}.mat-mdc-option-active .mat-mdc-focus-indicator::before{content:\\\"\\\"}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatOption;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n    return groupCounter;\n  }\n  return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n  return currentScrollPosition;\n}\nlet MatOptionModule = /*#__PURE__*/(() => {\n  class MatOptionModule {\n    static {\n      this.ɵfac = function MatOptionModule_Factory(t) {\n        return new (t || MatOptionModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatOptionModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule]\n      });\n    }\n  }\n  return MatOptionModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** The options for the MatRippleLoader's event listeners. */\nconst eventListenerOptions = {\n  capture: true\n};\n/** The events that should trigger the initialization of the ripple. */\nconst rippleInteractionEvents = ['focus', 'click', 'mouseenter', 'touchstart'];\n/** The attribute attached to a component whose ripple has not yet been initialized. */\nconst matRippleUninitialized = 'mat-ripple-loader-uninitialized';\n/** Additional classes that should be added to the ripple when it is rendered. */\nconst matRippleClassName = 'mat-ripple-loader-class-name';\n/** Whether the ripple should be centered. */\nconst matRippleCentered = 'mat-ripple-loader-centered';\n/** Whether the ripple should be disabled. */\nconst matRippleDisabled = 'mat-ripple-loader-disabled';\n/**\n * Handles attaching ripples on demand.\n *\n * This service allows us to avoid eagerly creating & attaching MatRipples.\n * It works by creating & attaching a ripple only when a component is first interacted with.\n *\n * @docs-private\n */\nlet MatRippleLoader = /*#__PURE__*/(() => {\n  class MatRippleLoader {\n    constructor() {\n      this._document = inject(DOCUMENT, {\n        optional: true\n      });\n      this._animationMode = inject(ANIMATION_MODULE_TYPE, {\n        optional: true\n      });\n      this._globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {\n        optional: true\n      });\n      this._platform = inject(Platform);\n      this._ngZone = inject(NgZone);\n      this._hosts = new Map();\n      /** Handles creating and attaching component internals when a component it is initially interacted with. */\n      this._onInteraction = event => {\n        if (!(event.target instanceof HTMLElement)) {\n          return;\n        }\n        const eventTarget = event.target;\n        // TODO(wagnermaciel): Consider batching these events to improve runtime performance.\n        const element = eventTarget.closest(`[${matRippleUninitialized}]`);\n        if (element) {\n          this._createRipple(element);\n        }\n      };\n      this._ngZone.runOutsideAngular(() => {\n        for (const event of rippleInteractionEvents) {\n          this._document?.addEventListener(event, this._onInteraction, eventListenerOptions);\n        }\n      });\n    }\n    ngOnDestroy() {\n      const hosts = this._hosts.keys();\n      for (const host of hosts) {\n        this.destroyRipple(host);\n      }\n      for (const event of rippleInteractionEvents) {\n        this._document?.removeEventListener(event, this._onInteraction, eventListenerOptions);\n      }\n    }\n    /**\n     * Configures the ripple that will be rendered by the ripple loader.\n     *\n     * Stores the given information about how the ripple should be configured on the host\n     * element so that it can later be retrived & used when the ripple is actually created.\n     */\n    configureRipple(host, config) {\n      // Indicates that the ripple has not yet been rendered for this component.\n      host.setAttribute(matRippleUninitialized, '');\n      // Store the additional class name(s) that should be added to the ripple element.\n      if (config.className || !host.hasAttribute(matRippleClassName)) {\n        host.setAttribute(matRippleClassName, config.className || '');\n      }\n      // Store whether the ripple should be centered.\n      if (config.centered) {\n        host.setAttribute(matRippleCentered, '');\n      }\n      if (config.disabled) {\n        host.setAttribute(matRippleDisabled, '');\n      }\n    }\n    /** Returns the ripple instance for the given host element. */\n    getRipple(host) {\n      const ripple = this._hosts.get(host);\n      return ripple || this._createRipple(host);\n    }\n    /** Sets the disabled state on the ripple instance corresponding to the given host element. */\n    setDisabled(host, disabled) {\n      const ripple = this._hosts.get(host);\n      // If the ripple has already been instantiated, just disable it.\n      if (ripple) {\n        ripple.disabled = disabled;\n        return;\n      }\n      // Otherwise, set an attribute so we know what the\n      // disabled state should be when the ripple is initialized.\n      if (disabled) {\n        host.setAttribute(matRippleDisabled, '');\n      } else {\n        host.removeAttribute(matRippleDisabled);\n      }\n    }\n    /** Creates a MatRipple and appends it to the given element. */\n    _createRipple(host) {\n      if (!this._document) {\n        return;\n      }\n      const existingRipple = this._hosts.get(host);\n      if (existingRipple) {\n        return existingRipple;\n      }\n      // Create the ripple element.\n      host.querySelector('.mat-ripple')?.remove();\n      const rippleEl = this._document.createElement('span');\n      rippleEl.classList.add('mat-ripple', host.getAttribute(matRippleClassName));\n      host.append(rippleEl);\n      // Create the MatRipple.\n      const ripple = new MatRipple(new ElementRef(rippleEl), this._ngZone, this._platform, this._globalRippleOptions ? this._globalRippleOptions : undefined, this._animationMode ? this._animationMode : undefined);\n      ripple._isInitialized = true;\n      ripple.trigger = host;\n      ripple.centered = host.hasAttribute(matRippleCentered);\n      ripple.disabled = host.hasAttribute(matRippleDisabled);\n      this.attachRipple(host, ripple);\n      return ripple;\n    }\n    attachRipple(host, ripple) {\n      host.removeAttribute(matRippleUninitialized);\n      this._hosts.set(host, ripple);\n    }\n    destroyRipple(host) {\n      const ripple = this._hosts.get(host);\n      if (ripple) {\n        // Since this directive is created manually, it needs to be destroyed manually too.\n        // tslint:disable-next-line:no-lifecycle-invocation\n        ripple.ngOnDestroy();\n        this._hosts.delete(host);\n      }\n    }\n    static {\n      this.ɵfac = function MatRippleLoader_Factory(t) {\n        return new (t || MatRippleLoader)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: MatRippleLoader,\n        factory: MatRippleLoader.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MatRippleLoader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Internal shared component used as a container in form field controls.\n * Not to be confused with `mat-form-field` which MDC calls a \"text field\".\n * @docs-private\n */\nlet _MatInternalFormField = /*#__PURE__*/(() => {\n  class _MatInternalFormField {\n    static {\n      this.ɵfac = function _MatInternalFormField_Factory(t) {\n        return new (t || _MatInternalFormField)();\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: _MatInternalFormField,\n        selectors: [[\"div\", \"mat-internal-form-field\", \"\"]],\n        hostAttrs: [1, \"mdc-form-field\", \"mat-internal-form-field\"],\n        hostVars: 2,\n        hostBindings: function _MatInternalFormField_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mdc-form-field--align-end\", ctx.labelPosition === \"before\");\n          }\n        },\n        inputs: {\n          labelPosition: \"labelPosition\"\n        },\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        attrs: _c5,\n        ngContentSelectors: _c6,\n        decls: 1,\n        vars: 0,\n        template: function _MatInternalFormField_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵprojection(0);\n          }\n        },\n        styles: [\".mdc-form-field{display:inline-flex;align-items:center;vertical-align:middle}.mdc-form-field[hidden]{display:none}.mdc-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{margin-left:auto;margin-right:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{padding-left:0;padding-right:4px}.mdc-form-field--nowrap>label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{padding-left:4px;padding-right:0}.mdc-form-field--space-between{justify-content:space-between}.mdc-form-field--space-between>label{margin:0}[dir=rtl] .mdc-form-field--space-between>label,.mdc-form-field--space-between>label[dir=rtl]{margin:0}.mdc-form-field{font-family:var(--mdc-form-field-label-text-font);line-height:var(--mdc-form-field-label-text-line-height);font-size:var(--mdc-form-field-label-text-size);font-weight:var(--mdc-form-field-label-text-weight);letter-spacing:var(--mdc-form-field-label-text-tracking);color:var(--mdc-form-field-label-text-color)}.mat-internal-form-field{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return _MatInternalFormField;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationCurves, AnimationDurations, DateAdapter, ErrorStateMatcher, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_NATIVE_DATE_FORMATS, MAT_OPTGROUP, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatLine, MatLineModule, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleLoader, MatRippleModule, NativeDateAdapter, NativeDateModule, RippleRef, RippleRenderer, RippleState, ShowOnDirtyErrorStateMatcher, VERSION, _ErrorStateTracker, _MatInternalFormField, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, mixinColor, mixinDisableRipple, mixinDisabled, mixinErrorState, mixinInitialized, mixinTabIndex, provideNativeDateAdapter, setLines };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, booleanAttribute, Directive, Optional, Inject, Input, Output, Injectable, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i3 from '@angular/cdk/a11y';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { ReplaySubject, Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\n\n/** @docs-private */\nconst _c0 = [\"mat-sort-header\", \"\"];\nconst _c1 = [\"*\"];\nfunction MatSortHeader_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_Conditional_3_Template_div_animation_arrowPosition_start_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._disableViewStateAnimation = true);\n    })(\"@arrowPosition.done\", function MatSortHeader_Conditional_3_Template_div_animation_arrowPosition_done_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._disableViewStateAnimation = false);\n    });\n    i0.ɵɵelement(1, \"div\", 3);\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelement(3, \"div\", 5)(4, \"div\", 6)(5, \"div\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@arrowOpacity\", ctx_r1._getArrowViewState())(\"@arrowPosition\", ctx_r1._getArrowViewState())(\"@allowChildren\", ctx_r1._getArrowDirectionState());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"@indicator\", ctx_r1._getArrowDirectionState());\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"@leftPointer\", ctx_r1._getArrowDirectionState());\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"@rightPointer\", ctx_r1._getArrowDirectionState());\n  }\n}\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nlet MatSort = /*#__PURE__*/(() => {\n  class MatSort {\n    /** The sort direction of the currently active MatSortable. */\n    get direction() {\n      return this._direction;\n    }\n    set direction(direction) {\n      if (direction && direction !== 'asc' && direction !== 'desc' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getSortInvalidDirectionError(direction);\n      }\n      this._direction = direction;\n    }\n    constructor(_defaultOptions) {\n      this._defaultOptions = _defaultOptions;\n      this._initializedStream = new ReplaySubject(1);\n      /** Collection of all registered sortables that this directive manages. */\n      this.sortables = new Map();\n      /** Used to notify any child components listening to state changes. */\n      this._stateChanges = new Subject();\n      /**\n       * The direction to set when an MatSortable is initially sorted.\n       * May be overridden by the MatSortable's sort start.\n       */\n      this.start = 'asc';\n      this._direction = '';\n      /** Whether the sortable is disabled. */\n      this.disabled = false;\n      /** Event emitted when the user changes either the active sort or sort direction. */\n      this.sortChange = new EventEmitter();\n      /** Emits when the paginator is initialized. */\n      this.initialized = this._initializedStream;\n    }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!sortable.id) {\n          throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n          throw getSortDuplicateSortableIdError(sortable.id);\n        }\n      }\n      this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n      this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n      if (this.active != sortable.id) {\n        this.active = sortable.id;\n        this.direction = sortable.start ? sortable.start : this.start;\n      } else {\n        this.direction = this.getNextSortDirection(sortable);\n      }\n      this.sortChange.emit({\n        active: this.active,\n        direction: this.direction\n      });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n      if (!sortable) {\n        return '';\n      }\n      // Get the sort direction cycle with the potential sortable overrides.\n      const disableClear = sortable?.disableClear ?? this.disableClear ?? !!this._defaultOptions?.disableClear;\n      let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n      // Get and return the next direction in the cycle\n      let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n      if (nextDirectionIndex >= sortDirectionCycle.length) {\n        nextDirectionIndex = 0;\n      }\n      return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n      this._initializedStream.next();\n    }\n    ngOnChanges() {\n      this._stateChanges.next();\n    }\n    ngOnDestroy() {\n      this._stateChanges.complete();\n      this._initializedStream.complete();\n    }\n    static {\n      this.ɵfac = function MatSort_Factory(t) {\n        return new (t || MatSort)(i0.ɵɵdirectiveInject(MAT_SORT_DEFAULT_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatSort,\n        selectors: [[\"\", \"matSort\", \"\"]],\n        hostAttrs: [1, \"mat-sort\"],\n        inputs: {\n          active: [i0.ɵɵInputFlags.None, \"matSortActive\", \"active\"],\n          start: [i0.ɵɵInputFlags.None, \"matSortStart\", \"start\"],\n          direction: [i0.ɵɵInputFlags.None, \"matSortDirection\", \"direction\"],\n          disableClear: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"matSortDisableClear\", \"disableClear\", booleanAttribute],\n          disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"matSortDisabled\", \"disabled\", booleanAttribute]\n        },\n        outputs: {\n          sortChange: \"matSortChange\"\n        },\n        exportAs: [\"matSort\"],\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return MatSort;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n  let sortOrder = ['asc', 'desc'];\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n  return sortOrder;\n}\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n  /** Animation that moves the sort indicator. */\n  indicator: /*#__PURE__*/trigger('indicator', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'translateY(0px)'\n  })),\n  /*#__PURE__*/\n  // 10px is the height of the sort indicator, minus the width of the pointers\n  state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'translateY(10px)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: /*#__PURE__*/trigger('leftPointer', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'rotate(-45deg)'\n  })), /*#__PURE__*/state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'rotate(45deg)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: /*#__PURE__*/trigger('rightPointer', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'rotate(45deg)'\n  })), /*#__PURE__*/state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'rotate(-45deg)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: /*#__PURE__*/trigger('arrowOpacity', [/*#__PURE__*/state('desc-to-active, asc-to-active, active', /*#__PURE__*/style({\n    opacity: 1\n  })), /*#__PURE__*/state('desc-to-hint, asc-to-hint, hint', /*#__PURE__*/style({\n    opacity: 0.54\n  })), /*#__PURE__*/state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', /*#__PURE__*/style({\n    opacity: 0\n  })),\n  /*#__PURE__*/\n  // Transition between all states except for immediate transitions\n  transition('* => asc, * => desc, * => active, * => hint, * => void', /*#__PURE__*/animate('0ms')), /*#__PURE__*/transition('* <=> *', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: /*#__PURE__*/trigger('arrowPosition', [\n  /*#__PURE__*/\n  // Hidden Above => Hint Center\n  transition('* => desc-to-hint, * => desc-to-active', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })]))),\n  /*#__PURE__*/\n  // Hint Center => Hidden Below\n  transition('* => hint-to-desc, * => active-to-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(0)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  })]))),\n  /*#__PURE__*/\n  // Hidden Below => Hint Center\n  transition('* => asc-to-hint, * => asc-to-active', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })]))),\n  /*#__PURE__*/\n  // Hint Center => Hidden Above\n  transition('* => hint-to-asc, * => active-to-asc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(0)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  })]))), /*#__PURE__*/state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })), /*#__PURE__*/state('hint-to-desc, active-to-desc, desc', /*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  })), /*#__PURE__*/state('hint-to-asc, active-to-asc, asc', /*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  }))]),\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: /*#__PURE__*/trigger('allowChildren', [/*#__PURE__*/transition('* <=> *', [/*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })])])\n};\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nlet MatSortHeaderIntl = /*#__PURE__*/(() => {\n  class MatSortHeaderIntl {\n    constructor() {\n      /**\n       * Stream that emits whenever the labels here are changed. Use this to notify\n       * components if the labels have changed after initialization.\n       */\n      this.changes = new Subject();\n    }\n    static {\n      this.ɵfac = function MatSortHeaderIntl_Factory(t) {\n        return new (t || MatSortHeaderIntl)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: MatSortHeaderIntl,\n        factory: MatSortHeaderIntl.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MatSortHeaderIntl;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nlet MatSortHeader = /*#__PURE__*/(() => {\n  class MatSortHeader {\n    /**\n     * Description applied to MatSortHeader's button element with aria-describedby. This text should\n     * describe the action that will occur when the user clicks the sort header.\n     */\n    get sortActionDescription() {\n      return this._sortActionDescription;\n    }\n    set sortActionDescription(value) {\n      this._updateSortActionDescription(value);\n    }\n    constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl, _changeDetectorRef,\n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    _sort, _columnDef, _focusMonitor, _elementRef, /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n    _ariaDescriber, defaultOptions) {\n      this._intl = _intl;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._sort = _sort;\n      this._columnDef = _columnDef;\n      this._focusMonitor = _focusMonitor;\n      this._elementRef = _elementRef;\n      this._ariaDescriber = _ariaDescriber;\n      /**\n       * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n       * provide an affordance that the header is sortable by showing on focus and hover.\n       */\n      this._showIndicatorHint = false;\n      /**\n       * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n       * position through the animation. If animations are currently disabled, the fromState is removed\n       * so that there is no animation displayed.\n       */\n      this._viewState = {};\n      /** The direction the arrow should be facing according to the current state. */\n      this._arrowDirection = '';\n      /**\n       * Whether the view state animation should show the transition between the `from` and `to` states.\n       */\n      this._disableViewStateAnimation = false;\n      /** Sets the position of the arrow that displays when sorted. */\n      this.arrowPosition = 'after';\n      /** whether the sort header is disabled. */\n      this.disabled = false;\n      // Default the action description to \"Sort\" because it's better than nothing.\n      // Without a description, the button's label comes from the sort header text content,\n      // which doesn't give any indication that it performs a sorting operation.\n      this._sortActionDescription = 'Sort';\n      // Note that we use a string token for the `_columnDef`, because the value is provided both by\n      // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n      // and we want to avoid having the sort header depending on the CDK table because\n      // of this single reference.\n      if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getSortHeaderNotContainedWithinSortError();\n      }\n      if (defaultOptions?.arrowPosition) {\n        this.arrowPosition = defaultOptions?.arrowPosition;\n      }\n      this._handleStateChanges();\n    }\n    ngOnInit() {\n      if (!this.id && this._columnDef) {\n        this.id = this._columnDef.name;\n      }\n      // Initialize the direction of the arrow and set the view state to be immediately that state.\n      this._updateArrowDirection();\n      this._setAnimationTransitionState({\n        toState: this._isSorted() ? 'active' : this._arrowDirection\n      });\n      this._sort.register(this);\n      this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container');\n      this._updateSortActionDescription(this._sortActionDescription);\n    }\n    ngAfterViewInit() {\n      // We use the focus monitor because we also want to style\n      // things differently based on the focus origin.\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n        const newState = !!origin;\n        if (newState !== this._showIndicatorHint) {\n          this._setIndicatorHintVisible(newState);\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n      this._sort.deregister(this);\n      this._rerenderSubscription.unsubscribe();\n      if (this._sortButton) {\n        this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n      }\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible) {\n      // No-op if the sort header is disabled - should not make the hint visible.\n      if (this._isDisabled() && visible) {\n        return;\n      }\n      this._showIndicatorHint = visible;\n      if (!this._isSorted()) {\n        this._updateArrowDirection();\n        if (this._showIndicatorHint) {\n          this._setAnimationTransitionState({\n            fromState: this._arrowDirection,\n            toState: 'hint'\n          });\n        } else {\n          this._setAnimationTransitionState({\n            fromState: 'hint',\n            toState: this._arrowDirection\n          });\n        }\n      }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState) {\n      this._viewState = viewState || {};\n      // If the animation for arrow position state (opacity/translation) should be disabled,\n      // remove the fromState so that it jumps right to the toState.\n      if (this._disableViewStateAnimation) {\n        this._viewState = {\n          toState: viewState.toState\n        };\n      }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n      this._sort.sort(this);\n      // Do not show the animation if the header was already shown in the right position.\n      if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n        this._disableViewStateAnimation = true;\n      }\n    }\n    _handleClick() {\n      if (!this._isDisabled()) {\n        this._sort.sort(this);\n      }\n    }\n    _handleKeydown(event) {\n      if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n        event.preventDefault();\n        this._toggleOnInteraction();\n      }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n      return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState() {\n      return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState() {\n      const fromState = this._viewState.fromState;\n      return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection() {\n      this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n    }\n    _isDisabled() {\n      return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n      if (!this._isSorted()) {\n        return 'none';\n      }\n      return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n      return !this._isDisabled() || this._isSorted();\n    }\n    _updateSortActionDescription(newDescription) {\n      // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n      // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n      // for every *cell* in the table, creating a lot of unnecessary noise.\n      // If _sortButton is undefined, the component hasn't been initialized yet so there's\n      // nothing to update in the DOM.\n      if (this._sortButton) {\n        // removeDescription will no-op if there is no existing message.\n        // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n        this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n        this._ariaDescriber?.describe(this._sortButton, newDescription);\n      }\n      this._sortActionDescription = newDescription;\n    }\n    /** Handles changes in the sorting state. */\n    _handleStateChanges() {\n      this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n        if (this._isSorted()) {\n          this._updateArrowDirection();\n          // Do not show the animation if the header was already shown in the right position.\n          if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n          }\n          this._setAnimationTransitionState({\n            fromState: this._arrowDirection,\n            toState: 'active'\n          });\n          this._showIndicatorHint = false;\n        }\n        // If this header was recently active and now no longer sorted, animate away the arrow.\n        if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n          this._disableViewStateAnimation = false;\n          this._setAnimationTransitionState({\n            fromState: 'active',\n            toState: this._arrowDirection\n          });\n        }\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    static {\n      this.ɵfac = function MatSortHeader_Factory(t) {\n        return new (t || MatSortHeader)(i0.ɵɵdirectiveInject(MatSortHeaderIntl), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MatSort, 8), i0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), i0.ɵɵdirectiveInject(i3.FocusMonitor), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.AriaDescriber, 8), i0.ɵɵdirectiveInject(MAT_SORT_DEFAULT_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatSortHeader,\n        selectors: [[\"\", \"mat-sort-header\", \"\"]],\n        hostAttrs: [1, \"mat-sort-header\"],\n        hostVars: 3,\n        hostBindings: function MatSortHeader_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() {\n              return ctx._handleClick();\n            })(\"keydown\", function MatSortHeader_keydown_HostBindingHandler($event) {\n              return ctx._handleKeydown($event);\n            })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() {\n              return ctx._setIndicatorHintVisible(true);\n            })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() {\n              return ctx._setIndicatorHintVisible(false);\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n            i0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n          }\n        },\n        inputs: {\n          id: [i0.ɵɵInputFlags.None, \"mat-sort-header\", \"id\"],\n          arrowPosition: \"arrowPosition\",\n          start: \"start\",\n          disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"disabled\", \"disabled\", booleanAttribute],\n          sortActionDescription: \"sortActionDescription\",\n          disableClear: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"disableClear\", \"disableClear\", booleanAttribute]\n        },\n        exportAs: [\"matSortHeader\"],\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n        attrs: _c0,\n        ngContentSelectors: _c1,\n        decls: 4,\n        vars: 7,\n        consts: [[1, \"mat-sort-header-container\", \"mat-focus-indicator\"], [1, \"mat-sort-header-content\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]],\n        template: function MatSortHeader_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n            i0.ɵɵprojection(2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(3, MatSortHeader_Conditional_3_Template, 6, 6, \"div\", 2);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition === \"before\");\n            i0.ɵɵattribute(\"tabindex\", ctx._isDisabled() ? null : 0)(\"role\", ctx._isDisabled() ? null : \"button\");\n            i0.ɵɵadvance(3);\n            i0.ɵɵconditional(3, ctx._renderArrow() ? 3 : -1);\n          }\n        },\n        styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-container::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px)*-1)}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;color:var(--mat-sort-arrow-color);opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n        encapsulation: 2,\n        data: {\n          animation: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]\n        },\n        changeDetection: 0\n      });\n    }\n  }\n  return MatSortHeader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSortModule = /*#__PURE__*/(() => {\n  class MatSortModule {\n    static {\n      this.ɵfac = function MatSortModule_Factory(t) {\n        return new (t || MatSortModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatSortModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n        imports: [MatCommonModule]\n      });\n    }\n  }\n  return MatSortModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n","import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable } from '@angular/core';\nclass DataSource {}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n  // here, because of some internal apps.\n  return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n  constructor(_data) {\n    super();\n    this._data = _data;\n  }\n  connect() {\n    return isObservable(this._data) ? this._data : of(this._data);\n  }\n  disconnect() {}\n}\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nvar _ViewRepeaterOperation = /*#__PURE__*/function (_ViewRepeaterOperation) {\n  /** The content of an existing view was replaced with another item. */\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"REPLACED\"] = 0] = \"REPLACED\";\n  /** A new view was created with `createEmbeddedView`. */\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"INSERTED\"] = 1] = \"INSERTED\";\n  /** The position of a view changed, but the content remains the same. */\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"MOVED\"] = 2] = \"MOVED\";\n  /** A view was detached from the view container. */\n  _ViewRepeaterOperation[_ViewRepeaterOperation[\"REMOVED\"] = 3] = \"REMOVED\";\n  return _ViewRepeaterOperation;\n}(_ViewRepeaterOperation || {});\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = /*#__PURE__*/new InjectionToken('_ViewRepeater');\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n      let view;\n      let operation;\n      if (record.previousIndex == null) {\n        const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n        view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n        operation = _ViewRepeaterOperation.INSERTED;\n      } else if (currentIndex == null) {\n        viewContainerRef.remove(adjustedPreviousIndex);\n        operation = _ViewRepeaterOperation.REMOVED;\n      } else {\n        view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        operation = _ViewRepeaterOperation.MOVED;\n      }\n      if (itemViewChanged) {\n        itemViewChanged({\n          context: view?.context,\n          operation,\n          record\n        });\n      }\n    });\n  }\n  detach() {}\n}\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n  constructor() {\n    /**\n     * The size of the cache used to store unused views.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n     */\n    this.viewCacheSize = 20;\n    /**\n     * View cache that stores embedded view instances that have been previously stamped out,\n     * but don't are not currently rendered. The view repeater will reuse these views rather than\n     * creating brand new ones.\n     *\n     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n     */\n    this._viewCache = [];\n  }\n  /** Apply changes to the DOM. */\n  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n      let view;\n      let operation;\n      if (record.previousIndex == null) {\n        // Item added.\n        const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n        view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n        operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n      } else if (currentIndex == null) {\n        // Item removed.\n        this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n        operation = _ViewRepeaterOperation.REMOVED;\n      } else {\n        // Item moved.\n        view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n        operation = _ViewRepeaterOperation.MOVED;\n      }\n      if (itemViewChanged) {\n        itemViewChanged({\n          context: view?.context,\n          operation,\n          record\n        });\n      }\n    });\n  }\n  detach() {\n    for (const view of this._viewCache) {\n      view.destroy();\n    }\n    this._viewCache = [];\n  }\n  /**\n   * Inserts a view for a new item, either from the cache or by creating a new\n   * one. Returns `undefined` if the item was inserted into a cached view.\n   */\n  _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n    const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n    if (cachedView) {\n      cachedView.context.$implicit = value;\n      return undefined;\n    }\n    const viewArgs = viewArgsFactory();\n    return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n  }\n  /** Detaches the view at the given index and inserts into the view cache. */\n  _detachAndCacheView(index, viewContainerRef) {\n    const detachedView = viewContainerRef.detach(index);\n    this._maybeCacheView(detachedView, viewContainerRef);\n  }\n  /** Moves view at the previous index to the current index. */\n  _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n    const view = viewContainerRef.get(adjustedPreviousIndex);\n    viewContainerRef.move(view, currentIndex);\n    view.context.$implicit = value;\n    return view;\n  }\n  /**\n   * Cache the given detached view. If the cache is full, the view will be\n   * destroyed.\n   */\n  _maybeCacheView(view, viewContainerRef) {\n    if (this._viewCache.length < this.viewCacheSize) {\n      this._viewCache.push(view);\n    } else {\n      const index = viewContainerRef.indexOf(view);\n      // The host component could remove views from the container outside of\n      // the view repeater. It's unlikely this will occur, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        viewContainerRef.remove(index);\n      }\n    }\n  }\n  /** Inserts a recycled view from the cache at the given index. */\n  _insertViewFromCache(index, viewContainerRef) {\n    const cachedView = this._viewCache.pop();\n    if (cachedView) {\n      viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n}\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n  /** Selected values. */\n  get selected() {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n    return this._selected;\n  }\n  constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n    this._multiple = _multiple;\n    this._emitChanges = _emitChanges;\n    this.compareWith = compareWith;\n    /** Currently-selected values. */\n    this._selection = new Set();\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n    this._deselectedToEmit = [];\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n    this._selectedToEmit = [];\n    /** Event emitted when the value has changed. */\n    this.changed = new Subject();\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n  /**\n   * Selects a value or an array of values.\n   * @param values The values to select\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  select(...values) {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n  /**\n   * Deselects a value or an array of values.\n   * @param values The values to deselect\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  deselect(...values) {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n  /**\n   * Sets the selected values\n   * @param values The new selected values\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  setSelection(...values) {\n    this._verifyValueAssignment(values);\n    const oldValues = this.selected;\n    const newSelectedSet = new Set(values);\n    values.forEach(value => this._markSelected(value));\n    oldValues.filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet))).forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n  /**\n   * Toggles a value between selected and deselected.\n   * @param value The value to toggle\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  toggle(value) {\n    return this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n  /**\n   * Clears all of the selected values.\n   * @param flushEvent Whether to flush the changes in an event.\n   *   If false, the changes to the selection will be flushed along with the next event.\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  clear(flushEvent = true) {\n    this._unmarkAll();\n    const changed = this._hasQueuedChanges();\n    if (flushEvent) {\n      this._emitChangeEvent();\n    }\n    return changed;\n  }\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value) {\n    return this._selection.has(this._getConcreteValue(value));\n  }\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty() {\n    return this._selection.size === 0;\n  }\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue() {\n    return !this.isEmpty();\n  }\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate) {\n    if (this._multiple && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n  /** Emits a change event and clears the records of selected and deselected values. */\n  _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit\n      });\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n  /** Selects a value. */\n  _markSelected(value) {\n    value = this._getConcreteValue(value);\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n      if (!this.isSelected(value)) {\n        this._selection.add(value);\n      }\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n  /** Deselects a value. */\n  _unmarkSelected(value) {\n    value = this._getConcreteValue(value);\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n  /** Clears out the selected values. */\n  _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  _verifyValueAssignment(values) {\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n  /** Whether there are queued up change to be emitted. */\n  _hasQueuedChanges() {\n    return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n  }\n  /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n  _getConcreteValue(inputValue, selection) {\n    if (!this.compareWith) {\n      return inputValue;\n    } else {\n      selection = selection ?? this._selection;\n      for (let selectedValue of selection) {\n        if (this.compareWith(inputValue, selectedValue)) {\n          return selectedValue;\n        }\n      }\n      return inputValue;\n    }\n  }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nlet UniqueSelectionDispatcher = /*#__PURE__*/(() => {\n  class UniqueSelectionDispatcher {\n    constructor() {\n      this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n      for (let listener of this._listeners) {\n        listener(id, name);\n      }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n      this._listeners.push(listener);\n      return () => {\n        this._listeners = this._listeners.filter(registered => {\n          return listener !== registered;\n        });\n      };\n    }\n    ngOnDestroy() {\n      this._listeners = [];\n    }\n    static {\n      this.ɵfac = function UniqueSelectionDispatcher_Factory(t) {\n        return new (t || UniqueSelectionDispatcher)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: UniqueSelectionDispatcher,\n        factory: UniqueSelectionDispatcher.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UniqueSelectionDispatcher;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, _ViewRepeaterOperation, getMultipleValuesInSingleSelectionError, isDataSource };\n","import { coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize, minBufferPx, maxBufferPx) {\n    this._scrolledIndexChange = new Subject();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /** The attached viewport. */\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n    if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() {\n    /* no-op */\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() {\n    /* no-op */\n  }\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index, behavior) {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n  /** Update the viewport's total content size. */\n  _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n  /** Update the viewport's rendered range. */\n  _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {\n      start: renderedRange.start,\n      end: renderedRange.end\n    };\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n    let scrollOffset = this._viewport.measureScrollOffset();\n    // Prevent NaN as result when dividing by zero.\n    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n    // If user scrolls to the bottom of the list and data changes to a smaller list\n    if (newRange.end > dataLength) {\n      // We have to recalculate the first visible index based on new data length and viewport size.\n      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n      const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n      // If first visible index changed we must update scroll offset to handle start/end buffers\n      // Current range must also be adjusted to cover the new position (bottom of new list).\n      if (firstVisibleIndex != newVisibleIndex) {\n        firstVisibleIndex = newVisibleIndex;\n        scrollOffset = newVisibleIndex * this._itemSize;\n        newRange.start = Math.floor(firstVisibleIndex);\n      }\n      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n    }\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nlet CdkFixedSizeVirtualScroll = /*#__PURE__*/(() => {\n  class CdkFixedSizeVirtualScroll {\n    constructor() {\n      this._itemSize = 20;\n      this._minBufferPx = 100;\n      this._maxBufferPx = 200;\n      /** The scroll strategy used by this directive. */\n      this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n      return this._itemSize;\n    }\n    set itemSize(value) {\n      this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n      return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n      this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n      return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n      this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n      this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static {\n      this.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n        return new (t || CdkFixedSizeVirtualScroll)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkFixedSizeVirtualScroll,\n        selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n        inputs: {\n          itemSize: \"itemSize\",\n          minBufferPx: \"minBufferPx\",\n          maxBufferPx: \"maxBufferPx\"\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: VIRTUAL_SCROLL_STRATEGY,\n          useFactory: _fixedSizeVirtualScrollStrategyFactory,\n          deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n        }]), i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return CdkFixedSizeVirtualScroll;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nlet ScrollDispatcher = /*#__PURE__*/(() => {\n  class ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n      this._scrolled = new Subject();\n      /** Keeps track of the global `scroll` and `resize` subscriptions. */\n      this._globalSubscription = null;\n      /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n      this._scrolledCount = 0;\n      /**\n       * Map of all the scrollable references that are registered with the service and their\n       * scroll event subscriptions.\n       */\n      this.scrollContainers = new Map();\n      this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n      if (!this.scrollContainers.has(scrollable)) {\n        this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n      }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n      const scrollableReference = this.scrollContainers.get(scrollable);\n      if (scrollableReference) {\n        scrollableReference.unsubscribe();\n        this.scrollContainers.delete(scrollable);\n      }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n      if (!this._platform.isBrowser) {\n        return of();\n      }\n      return new Observable(observer => {\n        if (!this._globalSubscription) {\n          this._addGlobalListener();\n        }\n        // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n        const subscription = auditTimeInMs > 0 ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);\n        this._scrolledCount++;\n        return () => {\n          subscription.unsubscribe();\n          this._scrolledCount--;\n          if (!this._scrolledCount) {\n            this._removeGlobalListener();\n          }\n        };\n      });\n    }\n    ngOnDestroy() {\n      this._removeGlobalListener();\n      this.scrollContainers.forEach((_, container) => this.deregister(container));\n      this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n      const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n      return this.scrolled(auditTimeInMs).pipe(filter(target => {\n        return !target || ancestors.indexOf(target) > -1;\n      }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n      const scrollingContainers = [];\n      this.scrollContainers.forEach((_subscription, scrollable) => {\n        if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n          scrollingContainers.push(scrollable);\n        }\n      });\n      return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n      let element = coerceElement(elementOrElementRef);\n      let scrollableElement = scrollable.getElementRef().nativeElement;\n      // Traverse through the element parents until we reach null, checking if any of the elements\n      // are the scrollable's element.\n      do {\n        if (element == scrollableElement) {\n          return true;\n        }\n      } while (element = element.parentElement);\n      return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n        return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n      });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n      if (this._globalSubscription) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    }\n    static {\n      this.ɵfac = function ScrollDispatcher_Factory(t) {\n        return new (t || ScrollDispatcher)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(DOCUMENT, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ScrollDispatcher,\n        factory: ScrollDispatcher.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ScrollDispatcher;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nlet CdkScrollable = /*#__PURE__*/(() => {\n  class CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n      this.elementRef = elementRef;\n      this.scrollDispatcher = scrollDispatcher;\n      this.ngZone = ngZone;\n      this.dir = dir;\n      this._destroyed = new Subject();\n      this._elementScrolled = new Observable(observer => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    ngOnInit() {\n      this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n      this.scrollDispatcher.deregister(this);\n      this._destroyed.next();\n      this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n      return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n      return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n      const el = this.elementRef.nativeElement;\n      const isRtl = this.dir && this.dir.value == 'rtl';\n      // Rewrite start & end offsets as right or left offsets.\n      if (options.left == null) {\n        options.left = isRtl ? options.end : options.start;\n      }\n      if (options.right == null) {\n        options.right = isRtl ? options.start : options.end;\n      }\n      // Rewrite the bottom offset as a top offset.\n      if (options.bottom != null) {\n        options.top = el.scrollHeight - el.clientHeight - options.bottom;\n      }\n      // Rewrite the right offset as a left offset.\n      if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n        if (options.left != null) {\n          options.right = el.scrollWidth - el.clientWidth - options.left;\n        }\n        if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n          options.left = options.right;\n        } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n          options.left = options.right ? -options.right : options.right;\n        }\n      } else {\n        if (options.right != null) {\n          options.left = el.scrollWidth - el.clientWidth - options.right;\n        }\n      }\n      this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n      const el = this.elementRef.nativeElement;\n      if (supportsScrollBehavior()) {\n        el.scrollTo(options);\n      } else {\n        if (options.top != null) {\n          el.scrollTop = options.top;\n        }\n        if (options.left != null) {\n          el.scrollLeft = options.left;\n        }\n      }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n      const LEFT = 'left';\n      const RIGHT = 'right';\n      const el = this.elementRef.nativeElement;\n      if (from == 'top') {\n        return el.scrollTop;\n      }\n      if (from == 'bottom') {\n        return el.scrollHeight - el.clientHeight - el.scrollTop;\n      }\n      // Rewrite start & end as left or right offsets.\n      const isRtl = this.dir && this.dir.value == 'rtl';\n      if (from == 'start') {\n        from = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        from = isRtl ? LEFT : RIGHT;\n      }\n      if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        } else {\n          return el.scrollLeft;\n        }\n      } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft + el.scrollWidth - el.clientWidth;\n        } else {\n          return -el.scrollLeft;\n        }\n      } else {\n        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n        // (scrollWidth - clientWidth) when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft;\n        } else {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        }\n      }\n    }\n    static {\n      this.ɵfac = function CdkScrollable_Factory(t) {\n        return new (t || CdkScrollable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkScrollable,\n        selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return CdkScrollable;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nlet ViewportRuler = /*#__PURE__*/(() => {\n  class ViewportRuler {\n    constructor(_platform, ngZone, document) {\n      this._platform = _platform;\n      /** Stream of viewport change events. */\n      this._change = new Subject();\n      /** Event listener that will be used to handle the viewport change events. */\n      this._changeListener = event => {\n        this._change.next(event);\n      };\n      this._document = document;\n      ngZone.runOutsideAngular(() => {\n        if (_platform.isBrowser) {\n          const window = this._getWindow();\n          // Note that bind the events ourselves, rather than going through something like RxJS's\n          // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n          window.addEventListener('resize', this._changeListener);\n          window.addEventListener('orientationchange', this._changeListener);\n        }\n        // Clear the cached position so that the viewport is re-measured next time it is required.\n        // We don't need to keep track of the subscription, because it is completed on destroy.\n        this.change().subscribe(() => this._viewportSize = null);\n      });\n    }\n    ngOnDestroy() {\n      if (this._platform.isBrowser) {\n        const window = this._getWindow();\n        window.removeEventListener('resize', this._changeListener);\n        window.removeEventListener('orientationchange', this._changeListener);\n      }\n      this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n      if (!this._viewportSize) {\n        this._updateViewportSize();\n      }\n      const output = {\n        width: this._viewportSize.width,\n        height: this._viewportSize.height\n      };\n      // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n      if (!this._platform.isBrowser) {\n        this._viewportSize = null;\n      }\n      return output;\n    }\n    /** Gets a DOMRect for the viewport's bounds. */\n    getViewportRect() {\n      // Use the document element's bounding rect rather than the window scroll properties\n      // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n      // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n      // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n      // can disagree when the page is pinch-zoomed (on devices that support touch).\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n      // We use the documentElement instead of the body because, by default (without a css reset)\n      // browsers typically give the document body an 8px margin, which is not included in\n      // getBoundingClientRect().\n      const scrollPosition = this.getViewportScrollPosition();\n      const {\n        width,\n        height\n      } = this.getViewportSize();\n      return {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        bottom: scrollPosition.top + height,\n        right: scrollPosition.left + width,\n        height,\n        width\n      };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n      // While we can get a reference to the fake document\n      // during SSR, it doesn't have getBoundingClientRect.\n      if (!this._platform.isBrowser) {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n      // The top-left-corner of the viewport is determined by the scroll position of the document\n      // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n      // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n      // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n      // `document.documentElement` works consistently, where the `top` and `left` values will\n      // equal negative the scroll position.\n      const document = this._document;\n      const window = this._getWindow();\n      const documentElement = document.documentElement;\n      const documentRect = documentElement.getBoundingClientRect();\n      const top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n      const left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n      return {\n        top,\n        left\n      };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n      return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n      const window = this._getWindow();\n      this._viewportSize = this._platform.isBrowser ? {\n        width: window.innerWidth,\n        height: window.innerHeight\n      } : {\n        width: 0,\n        height: 0\n      };\n    }\n    static {\n      this.ɵfac = function ViewportRuler_Factory(t) {\n        return new (t || ViewportRuler)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT, 8));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: ViewportRuler,\n        factory: ViewportRuler.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ViewportRuler;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst VIRTUAL_SCROLLABLE = /*#__PURE__*/new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nlet CdkVirtualScrollable = /*#__PURE__*/(() => {\n  class CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n      super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n      const viewportEl = this.elementRef.nativeElement;\n      return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static {\n      this.ɵfac = function CdkVirtualScrollable_Factory(t) {\n        return new (t || CdkVirtualScrollable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkVirtualScrollable,\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return CdkVirtualScrollable;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nlet CdkVirtualScrollViewport = /*#__PURE__*/(() => {\n  class CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n      return this._orientation;\n    }\n    set orientation(orientation) {\n      if (this._orientation !== orientation) {\n        this._orientation = orientation;\n        this._calculateSpacerSize();\n      }\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n      super(elementRef, scrollDispatcher, ngZone, dir);\n      this.elementRef = elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._scrollStrategy = _scrollStrategy;\n      this.scrollable = scrollable;\n      this._platform = inject(Platform);\n      /** Emits when the viewport is detached from a CdkVirtualForOf. */\n      this._detachedSubject = new Subject();\n      /** Emits when the rendered range changes. */\n      this._renderedRangeSubject = new Subject();\n      this._orientation = 'vertical';\n      /**\n       * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n       * will be removed.\n       */\n      this.appendOnly = false;\n      // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n      // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n      // depending on how the strategy calculates the scrolled index, it may come at a cost to\n      // performance.\n      /** Emits when the index of the first element visible in the viewport changes. */\n      this.scrolledIndexChange = new Observable(observer => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n      /** A stream that emits whenever the rendered range changes. */\n      this.renderedRangeStream = this._renderedRangeSubject;\n      /**\n       * The total size of all content (in pixels), including content that is not currently rendered.\n       */\n      this._totalContentSize = 0;\n      /** A string representing the `style.width` property value to be used for the spacer element. */\n      this._totalContentWidth = '';\n      /** A string representing the `style.height` property value to be used for the spacer element. */\n      this._totalContentHeight = '';\n      /** The currently rendered range of indices. */\n      this._renderedRange = {\n        start: 0,\n        end: 0\n      };\n      /** The length of the data bound to this viewport (in number of items). */\n      this._dataLength = 0;\n      /** The size of the viewport (in pixels). */\n      this._viewportSize = 0;\n      /** The last rendered content offset that was set. */\n      this._renderedContentOffset = 0;\n      /**\n       * Whether the last rendered content offset was to the end of the content (and therefore needs to\n       * be rewritten as an offset to the start of the content).\n       */\n      this._renderedContentOffsetNeedsRewrite = false;\n      /** Whether there is a pending change detection cycle. */\n      this._isChangeDetectionPending = false;\n      /** A list of functions to run after the next change detection cycle. */\n      this._runAfterChangeDetection = [];\n      /** Subscription to changes in the viewport size. */\n      this._viewportChanges = Subscription.EMPTY;\n      if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n      }\n      this._viewportChanges = viewportRuler.change().subscribe(() => {\n        this.checkViewportSize();\n      });\n      if (!this.scrollable) {\n        // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n        this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n        this.scrollable = this;\n      }\n    }\n    ngOnInit() {\n      // Scrolling depends on the element dimensions which we can't get during SSR.\n      if (!this._platform.isBrowser) {\n        return;\n      }\n      if (this.scrollable === this) {\n        super.ngOnInit();\n      }\n      // It's still too early to measure the viewport at this point. Deferring with a promise allows\n      // the Viewport to be rendered with the correct size before we measure. We run this outside the\n      // zone to avoid causing more change detection cycles. We handle the change detection loop\n      // ourselves instead.\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._measureViewportSize();\n        this._scrollStrategy.attach(this);\n        this.scrollable.elementScrolled().pipe(\n        // Start off with a fake scroll event so we properly detect our initial position.\n        startWith(null),\n        // Collect multiple events into one until the next animation frame. This way if\n        // there are multiple scroll events in the same frame we only need to recheck\n        // our layout once.\n        auditTime(0, SCROLL_SCHEDULER),\n        // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n        // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n        // to unsubscribe here just in case.\n        takeUntil(this._destroyed)).subscribe(() => this._scrollStrategy.onContentScrolled());\n        this._markChangeDetectionNeeded();\n      }));\n    }\n    ngOnDestroy() {\n      this.detach();\n      this._scrollStrategy.detach();\n      // Complete all subjects\n      this._renderedRangeSubject.complete();\n      this._detachedSubject.complete();\n      this._viewportChanges.unsubscribe();\n      super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n      if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('CdkVirtualScrollViewport is already attached.');\n      }\n      // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n      // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n      // change detection loop ourselves.\n      this.ngZone.runOutsideAngular(() => {\n        this._forOf = forOf;\n        this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n          const newLength = data.length;\n          if (newLength !== this._dataLength) {\n            this._dataLength = newLength;\n            this._scrollStrategy.onDataLengthChanged();\n          }\n          this._doChangeDetection();\n        });\n      });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n      this._forOf = null;\n      this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n      return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n      return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n      return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n      if (this._totalContentSize !== size) {\n        this._totalContentSize = size;\n        this._calculateSpacerSize();\n        this._markChangeDetectionNeeded();\n      }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n      if (!rangesEqual(this._renderedRange, range)) {\n        if (this.appendOnly) {\n          range = {\n            start: 0,\n            end: Math.max(this._renderedRange.end, range.end)\n          };\n        }\n        this._renderedRangeSubject.next(this._renderedRange = range);\n        this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n      }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n      return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n      // In appendOnly, we always start from the top\n      offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n      // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n      // in the negative direction.\n      const isRtl = this.dir && this.dir.value == 'rtl';\n      const isHorizontal = this.orientation == 'horizontal';\n      const axis = isHorizontal ? 'X' : 'Y';\n      const axisDirection = isHorizontal && isRtl ? -1 : 1;\n      let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n      this._renderedContentOffset = offset;\n      if (to === 'to-end') {\n        transform += ` translate${axis}(-100%)`;\n        // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n        // expand upward).\n        this._renderedContentOffsetNeedsRewrite = true;\n      }\n      if (this._renderedContentTransform != transform) {\n        // We know this value is safe because we parse `offset` with `Number()` before passing it\n        // into the string.\n        this._renderedContentTransform = transform;\n        this._markChangeDetectionNeeded(() => {\n          if (this._renderedContentOffsetNeedsRewrite) {\n            this._renderedContentOffset -= this.measureRenderedContentSize();\n            this._renderedContentOffsetNeedsRewrite = false;\n            this.setRenderedContentOffset(this._renderedContentOffset);\n          } else {\n            this._scrollStrategy.onRenderedOffsetChanged();\n          }\n        });\n      }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n      const options = {\n        behavior\n      };\n      if (this.orientation === 'horizontal') {\n        options.start = offset;\n      } else {\n        options.top = offset;\n      }\n      this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n      this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n      // This is to break the call cycle\n      let measureScrollOffset;\n      if (this.scrollable == this) {\n        measureScrollOffset = _from => super.measureScrollOffset(_from);\n      } else {\n        measureScrollOffset = _from => this.scrollable.measureScrollOffset(_from);\n      }\n      return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) - this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n      let fromRect;\n      const LEFT = 'left';\n      const RIGHT = 'right';\n      const isRtl = this.dir?.value == 'rtl';\n      if (from == 'start') {\n        fromRect = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        fromRect = isRtl ? LEFT : RIGHT;\n      } else if (from) {\n        fromRect = from;\n      } else {\n        fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n      }\n      const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n      const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n      return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n      const contentEl = this._contentWrapper.nativeElement;\n      return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n      if (!this._forOf) {\n        return 0;\n      }\n      return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n      // TODO: Cleanup later when add logic for handling content resize\n      this._measureViewportSize();\n      this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n      this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n      if (runAfter) {\n        this._runAfterChangeDetection.push(runAfter);\n      }\n      // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n      // properties sequentially we only have to run `_doChangeDetection` once at the end.\n      if (!this._isChangeDetectionPending) {\n        this._isChangeDetectionPending = true;\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n          this._doChangeDetection();\n        }));\n      }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n      this._isChangeDetectionPending = false;\n      // Apply the content transform. The transform can't be set via an Angular binding because\n      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n      // the `Number` function first to coerce it to a numeric value.\n      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n      // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n      // from the root, since the repeated items are content projected in. Calling `detectChanges`\n      // instead does not properly check the projected content.\n      this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n      const runAfterChangeDetection = this._runAfterChangeDetection;\n      this._runAfterChangeDetection = [];\n      for (const fn of runAfterChangeDetection) {\n        fn();\n      }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n      this._totalContentHeight = this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n      this._totalContentWidth = this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static {\n      this.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n        return new (t || CdkVirtualScrollViewport)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(ViewportRuler), i0.ɵɵdirectiveInject(VIRTUAL_SCROLLABLE, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: CdkVirtualScrollViewport,\n        selectors: [[\"cdk-virtual-scroll-viewport\"]],\n        viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n          }\n        },\n        hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n        hostVars: 4,\n        hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n          }\n        },\n        inputs: {\n          orientation: \"orientation\",\n          appendOnly: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"appendOnly\", \"appendOnly\", booleanAttribute]\n        },\n        outputs: {\n          scrolledIndexChange: \"scrolledIndexChange\"\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkScrollable,\n          useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n          deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport]\n        }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c1,\n        decls: 4,\n        vars: 4,\n        consts: [[\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-content-wrapper\"], [1, \"cdk-virtual-scroll-spacer\"]],\n        template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵelementStart(0, \"div\", 1, 0);\n            i0.ɵɵprojection(2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(3, \"div\", 2);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n          }\n        },\n        styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return CdkVirtualScrollViewport;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n  const el = node;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nlet CdkVirtualForOf = /*#__PURE__*/(() => {\n  class CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n      return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n      this._cdkVirtualForOf = value;\n      if (isDataSource(value)) {\n        this._dataSourceChanges.next(value);\n      } else {\n        // If value is an an NgIterable, convert it to an array.\n        this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n      }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n      return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n      this._needsUpdate = true;\n      this._cdkVirtualForTrackBy = fn ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n      if (value) {\n        this._needsUpdate = true;\n        this._template = value;\n      }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n      return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n      this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor( /** The view container to add items to. */\n    _viewContainerRef, /** The template to use when stamping out new items. */\n    _template, /** The set of available differs. */\n    _differs, /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n      this._viewContainerRef = _viewContainerRef;\n      this._template = _template;\n      this._differs = _differs;\n      this._viewRepeater = _viewRepeater;\n      this._viewport = _viewport;\n      /** Emits when the rendered view of the data changes. */\n      this.viewChange = new Subject();\n      /** Subject that emits when a new DataSource instance is given. */\n      this._dataSourceChanges = new Subject();\n      /** Emits whenever the data in the current DataSource changes. */\n      this.dataStream = this._dataSourceChanges.pipe(\n      // Start off with null `DataSource`.\n      startWith(null),\n      // Bundle up the previous and current data sources so we can work with both.\n      pairwise(),\n      // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n      // new one, passing back a stream of data changes which we run through `switchMap` to give\n      // us a data stream that emits the latest data from whatever the current `DataSource` is.\n      switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n      // Replay the last emitted data when someone subscribes.\n      shareReplay(1));\n      /** The differ used to calculate changes to the data. */\n      this._differ = null;\n      /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n      this._needsUpdate = false;\n      this._destroyed = new Subject();\n      this.dataStream.subscribe(data => {\n        this._data = data;\n        this._onRenderedDataChange();\n      });\n      this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n        this._renderedRange = range;\n        if (this.viewChange.observers.length) {\n          ngZone.run(() => this.viewChange.next(this._renderedRange));\n        }\n        this._onRenderedDataChange();\n      });\n      this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n      if (range.start >= range.end) {\n        return 0;\n      }\n      if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(`Error: attempted to measure an item that isn't rendered.`);\n      }\n      // The index into the list of rendered views for the first item in the range.\n      const renderedStartIndex = range.start - this._renderedRange.start;\n      // The length of the range we're measuring.\n      const rangeLen = range.end - range.start;\n      // Loop over all the views, find the first and land node and compute the size by subtracting\n      // the top of the first node from the bottom of the last one.\n      let firstNode;\n      let lastNode;\n      // Find the first node by starting from the beginning and going forwards.\n      for (let i = 0; i < rangeLen; i++) {\n        const view = this._viewContainerRef.get(i + renderedStartIndex);\n        if (view && view.rootNodes.length) {\n          firstNode = lastNode = view.rootNodes[0];\n          break;\n        }\n      }\n      // Find the last node by starting from the end and going backwards.\n      for (let i = rangeLen - 1; i > -1; i--) {\n        const view = this._viewContainerRef.get(i + renderedStartIndex);\n        if (view && view.rootNodes.length) {\n          lastNode = view.rootNodes[view.rootNodes.length - 1];\n          break;\n        }\n      }\n      return firstNode && lastNode ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n    ngDoCheck() {\n      if (this._differ && this._needsUpdate) {\n        // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n        // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n        // changing (need to do this diff).\n        const changes = this._differ.diff(this._renderedItems);\n        if (!changes) {\n          this._updateContext();\n        } else {\n          this._applyChanges(changes);\n        }\n        this._needsUpdate = false;\n      }\n    }\n    ngOnDestroy() {\n      this._viewport.detach();\n      this._dataSourceChanges.next(undefined);\n      this._dataSourceChanges.complete();\n      this.viewChange.complete();\n      this._destroyed.next();\n      this._destroyed.complete();\n      this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n      if (!this._renderedRange) {\n        return;\n      }\n      this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n      if (!this._differ) {\n        // Use a wrapper function for the `trackBy` so any new values are\n        // picked up automatically without having to recreate the differ.\n        this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n          return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n        });\n      }\n      this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n      if (oldDs) {\n        oldDs.disconnect(this);\n      }\n      this._needsUpdate = true;\n      return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n      const count = this._data.length;\n      let i = this._viewContainerRef.length;\n      while (i--) {\n        const view = this._viewContainerRef.get(i);\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n        this._updateComputedContextProperties(view.context);\n        view.detectChanges();\n      }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n      this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n      // Update $implicit for any items that had an identity change.\n      changes.forEachIdentityChange(record => {\n        const view = this._viewContainerRef.get(record.currentIndex);\n        view.context.$implicit = record.item;\n      });\n      // Update the context variables on all items.\n      const count = this._data.length;\n      let i = this._viewContainerRef.length;\n      while (i--) {\n        const view = this._viewContainerRef.get(i);\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n        this._updateComputedContextProperties(view.context);\n      }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n      context.first = context.index === 0;\n      context.last = context.index === context.count - 1;\n      context.even = context.index % 2 === 0;\n      context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n      // Note that it's important that we insert the item directly at the proper index,\n      // rather than inserting it and the moving it in place, because if there's a directive\n      // on the same node that injects the `ViewContainerRef`, Angular will insert another\n      // comment node which can throw off the move when it's being repeated for all items.\n      return {\n        templateRef: this._template,\n        context: {\n          $implicit: record.item,\n          // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n          // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n          cdkVirtualForOf: this._cdkVirtualForOf,\n          index: -1,\n          count: -1,\n          first: false,\n          last: false,\n          odd: false,\n          even: false\n        },\n        index\n      };\n    }\n    static {\n      this.ɵfac = function CdkVirtualForOf_Factory(t) {\n        return new (t || CdkVirtualForOf)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), i0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), i0.ɵɵdirectiveInject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkVirtualForOf,\n        selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n        inputs: {\n          cdkVirtualForOf: \"cdkVirtualForOf\",\n          cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n          cdkVirtualForTemplate: \"cdkVirtualForTemplate\",\n          cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\"\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: _VIEW_REPEATER_STRATEGY,\n          useClass: _RecycleViewRepeaterStrategy\n        }])]\n      });\n    }\n  }\n  return CdkVirtualForOf;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nlet CdkVirtualScrollableElement = /*#__PURE__*/(() => {\n  class CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n      super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from] - this.measureScrollOffset(from);\n    }\n    static {\n      this.ɵfac = function CdkVirtualScrollableElement_Factory(t) {\n        return new (t || CdkVirtualScrollableElement)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkVirtualScrollableElement,\n        selectors: [[\"\", \"cdkVirtualScrollingElement\", \"\"]],\n        hostAttrs: [1, \"cdk-virtual-scrollable\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: VIRTUAL_SCROLLABLE,\n          useExisting: CdkVirtualScrollableElement\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return CdkVirtualScrollableElement;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nlet CdkVirtualScrollableWindow = /*#__PURE__*/(() => {\n  class CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n      super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n      this._elementScrolled = new Observable(observer => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static {\n      this.ɵfac = function CdkVirtualScrollableWindow_Factory(t) {\n        return new (t || CdkVirtualScrollableWindow)(i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkVirtualScrollableWindow,\n        selectors: [[\"cdk-virtual-scroll-viewport\", \"scrollWindow\", \"\"]],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: VIRTUAL_SCROLLABLE,\n          useExisting: CdkVirtualScrollableWindow\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return CdkVirtualScrollableWindow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CdkScrollableModule = /*#__PURE__*/(() => {\n  class CdkScrollableModule {\n    static {\n      this.ɵfac = function CdkScrollableModule_Factory(t) {\n        return new (t || CdkScrollableModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: CdkScrollableModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return CdkScrollableModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @docs-primary-export\n */\nlet ScrollingModule = /*#__PURE__*/(() => {\n  class ScrollingModule {\n    static {\n      this.ɵfac = function ScrollingModule_Factory(t) {\n        return new (t || ScrollingModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: ScrollingModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [BidiModule, CdkScrollableModule, BidiModule, CdkScrollableModule]\n      });\n    }\n  }\n  return ScrollingModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import * as i1 from '@angular/cdk/bidi';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _ViewRepeaterOperation, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, booleanAttribute, Inject, Optional, Input, ContentChild, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, inject, EmbeddedViewRef, EventEmitter, NgZone, Attribute, SkipSelf, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]], \"*\"];\nconst _c1 = [\"caption\", \"colgroup, col\", \"*\"];\nfunction CdkTable_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2);\n  }\n}\nfunction CdkTable_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"thead\", 0);\n    i0.ɵɵelementContainer(1, 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"tbody\", 0);\n    i0.ɵɵelementContainer(3, 2)(4, 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"tfoot\", 0);\n    i0.ɵɵelementContainer(6, 4);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CdkTable_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 1)(1, 2)(2, 3)(3, 4);\n  }\n}\nfunction CdkTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\nfunction CdkTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.dataAccessor(data_r2, ctx_r0.name), \" \");\n  }\n}\nconst CDK_TABLE = /*#__PURE__*/new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = /*#__PURE__*/new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nlet CdkCellDef = /*#__PURE__*/(() => {\n  class CdkCellDef {\n    constructor( /** @docs-private */template) {\n      this.template = template;\n    }\n    static {\n      this.ɵfac = function CdkCellDef_Factory(t) {\n        return new (t || CdkCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkCellDef,\n        selectors: [[\"\", \"cdkCellDef\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return CdkCellDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nlet CdkHeaderCellDef = /*#__PURE__*/(() => {\n  class CdkHeaderCellDef {\n    constructor( /** @docs-private */template) {\n      this.template = template;\n    }\n    static {\n      this.ɵfac = function CdkHeaderCellDef_Factory(t) {\n        return new (t || CdkHeaderCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkHeaderCellDef,\n        selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return CdkHeaderCellDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nlet CdkFooterCellDef = /*#__PURE__*/(() => {\n  class CdkFooterCellDef {\n    constructor( /** @docs-private */template) {\n      this.template = template;\n    }\n    static {\n      this.ɵfac = function CdkFooterCellDef_Factory(t) {\n        return new (t || CdkFooterCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkFooterCellDef,\n        selectors: [[\"\", \"cdkFooterCellDef\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return CdkFooterCellDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nlet CdkColumnDef = /*#__PURE__*/(() => {\n  class CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n      return this._name;\n    }\n    set name(name) {\n      this._setNameInput(name);\n    }\n    /** Whether the cell is sticky. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(value) {\n      if (value !== this._sticky) {\n        this._sticky = value;\n        this._hasStickyChanged = true;\n      }\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n      return this._stickyEnd;\n    }\n    set stickyEnd(value) {\n      if (value !== this._stickyEnd) {\n        this._stickyEnd = value;\n        this._hasStickyChanged = true;\n      }\n    }\n    constructor(_table) {\n      this._table = _table;\n      this._hasStickyChanged = false;\n      this._sticky = false;\n      this._stickyEnd = false;\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this.resetStickyChanged();\n      return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n      this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n      // If the directive is set without a name (updated programmatically), then this setter will\n      // trigger with an empty string and should not overwrite the programmatically set value.\n      if (value) {\n        this._name = value;\n        this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n        this._updateColumnCssClassName();\n      }\n    }\n    static {\n      this.ɵfac = function CdkColumnDef_Factory(t) {\n        return new (t || CdkColumnDef)(i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkColumnDef,\n        selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n        contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n            i0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n            i0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n          }\n        },\n        inputs: {\n          name: [i0.ɵɵInputFlags.None, \"cdkColumnDef\", \"name\"],\n          sticky: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"sticky\", \"sticky\", booleanAttribute],\n          stickyEnd: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"stickyEnd\", \"stickyEnd\", booleanAttribute]\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n          useExisting: CdkColumnDef\n        }]), i0.ɵɵInputTransformsFeature]\n      });\n    }\n  }\n  return CdkColumnDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n  }\n}\n/** Header cell template container that adds the right classes and role. */\nlet CdkHeaderCell = /*#__PURE__*/(() => {\n  class CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n      super(columnDef, elementRef);\n    }\n    static {\n      this.ɵfac = function CdkHeaderCell_Factory(t) {\n        return new (t || CdkHeaderCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkHeaderCell,\n        selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n        hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n        standalone: true,\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return CdkHeaderCell;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer cell template container that adds the right classes and role. */\nlet CdkFooterCell = /*#__PURE__*/(() => {\n  class CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n      super(columnDef, elementRef);\n      const role = columnDef._table?._getCellRole();\n      if (role) {\n        elementRef.nativeElement.setAttribute('role', role);\n      }\n    }\n    static {\n      this.ɵfac = function CdkFooterCell_Factory(t) {\n        return new (t || CdkFooterCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkFooterCell,\n        selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n        hostAttrs: [1, \"cdk-footer-cell\"],\n        standalone: true,\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return CdkFooterCell;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Cell template container that adds the right classes and role. */\nlet CdkCell = /*#__PURE__*/(() => {\n  class CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n      super(columnDef, elementRef);\n      const role = columnDef._table?._getCellRole();\n      if (role) {\n        elementRef.nativeElement.setAttribute('role', role);\n      }\n    }\n    static {\n      this.ɵfac = function CdkCell_Factory(t) {\n        return new (t || CdkCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkCell,\n        selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n        hostAttrs: [1, \"cdk-cell\"],\n        standalone: true,\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return CdkCell;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @docs-private\n */\nclass _Schedule {\n  constructor() {\n    this.tasks = [];\n    this.endTasks = [];\n  }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = /*#__PURE__*/new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nlet _CoalescedStyleScheduler = /*#__PURE__*/(() => {\n  class _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n      this._ngZone = _ngZone;\n      this._currentSchedule = null;\n      this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n      this._createScheduleIfNeeded();\n      this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n      this._createScheduleIfNeeded();\n      this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n      this._destroyed.next();\n      this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n      if (this._currentSchedule) {\n        return;\n      }\n      this._currentSchedule = new _Schedule();\n      this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n          const schedule = this._currentSchedule;\n          // Capture new tasks scheduled by the current set of tasks.\n          this._currentSchedule = new _Schedule();\n          for (const task of schedule.tasks) {\n            task();\n          }\n          for (const task of schedule.endTasks) {\n            task();\n          }\n        }\n        this._currentSchedule = null;\n      });\n    }\n    _getScheduleObservable() {\n      // Use onStable when in the context of an ongoing change detection cycle so that we\n      // do not accidentally trigger additional cycles.\n      return this._ngZone.isStable ? from(Promise.resolve(undefined)) : this._ngZone.onStable.pipe(take(1));\n    }\n    static {\n      this.ɵfac = function _CoalescedStyleScheduler_Factory(t) {\n        return new (t || _CoalescedStyleScheduler)(i0.ɵɵinject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: _CoalescedStyleScheduler,\n        factory: _CoalescedStyleScheduler.ɵfac\n      });\n    }\n  }\n  return _CoalescedStyleScheduler;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nlet BaseRowDef = /*#__PURE__*/(() => {\n  class BaseRowDef {\n    constructor( /** @docs-private */template, _differs) {\n      this.template = template;\n      this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n      // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n      // of the columns property or an empty array if none is provided.\n      if (!this._columnsDiffer) {\n        const columns = changes['columns'] && changes['columns'].currentValue || [];\n        this._columnsDiffer = this._differs.find(columns).create();\n        this._columnsDiffer.diff(columns);\n      }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n      return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n      if (this instanceof CdkHeaderRowDef) {\n        return column.headerCell.template;\n      }\n      if (this instanceof CdkFooterRowDef) {\n        return column.footerCell.template;\n      } else {\n        return column.cell.template;\n      }\n    }\n    static {\n      this.ɵfac = function BaseRowDef_Factory(t) {\n        return new (t || BaseRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: BaseRowDef,\n        features: [i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return BaseRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nlet CdkHeaderRowDef = /*#__PURE__*/(() => {\n  class CdkHeaderRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(value) {\n      if (value !== this._sticky) {\n        this._sticky = value;\n        this._hasStickyChanged = true;\n      }\n    }\n    constructor(template, _differs, _table) {\n      super(template, _differs);\n      this._table = _table;\n      this._hasStickyChanged = false;\n      this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this.resetStickyChanged();\n      return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n    static {\n      this.ɵfac = function CdkHeaderRowDef_Factory(t) {\n        return new (t || CdkHeaderRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkHeaderRowDef,\n        selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n        inputs: {\n          columns: [i0.ɵɵInputFlags.None, \"cdkHeaderRowDef\", \"columns\"],\n          sticky: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute]\n        },\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return CdkHeaderRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nlet CdkFooterRowDef = /*#__PURE__*/(() => {\n  class CdkFooterRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(value) {\n      if (value !== this._sticky) {\n        this._sticky = value;\n        this._hasStickyChanged = true;\n      }\n    }\n    constructor(template, _differs, _table) {\n      super(template, _differs);\n      this._table = _table;\n      this._hasStickyChanged = false;\n      this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this.resetStickyChanged();\n      return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n    static {\n      this.ɵfac = function CdkFooterRowDef_Factory(t) {\n        return new (t || CdkFooterRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkFooterRowDef,\n        selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n        inputs: {\n          columns: [i0.ɵɵInputFlags.None, \"cdkFooterRowDef\", \"columns\"],\n          sticky: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute]\n        },\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return CdkFooterRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nlet CdkRowDef = /*#__PURE__*/(() => {\n  class CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n      super(template, _differs);\n      this._table = _table;\n    }\n    static {\n      this.ɵfac = function CdkRowDef_Factory(t) {\n        return new (t || CdkRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkRowDef,\n        selectors: [[\"\", \"cdkRowDef\", \"\"]],\n        inputs: {\n          columns: [i0.ɵɵInputFlags.None, \"cdkRowDefColumns\", \"columns\"],\n          when: [i0.ɵɵInputFlags.None, \"cdkRowDefWhen\", \"when\"]\n        },\n        standalone: true,\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return CdkRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nlet CdkCellOutlet = /*#__PURE__*/(() => {\n  class CdkCellOutlet {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static {\n      this.mostRecentCellOutlet = null;\n    }\n    constructor(_viewContainer) {\n      this._viewContainer = _viewContainer;\n      CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n      // If this was the last outlet being rendered in the view, remove the reference\n      // from the static property after it has been destroyed to avoid leaking memory.\n      if (CdkCellOutlet.mostRecentCellOutlet === this) {\n        CdkCellOutlet.mostRecentCellOutlet = null;\n      }\n    }\n    static {\n      this.ɵfac = function CdkCellOutlet_Factory(t) {\n        return new (t || CdkCellOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkCellOutlet,\n        selectors: [[\"\", \"cdkCellOutlet\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return CdkCellOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nlet CdkHeaderRow = /*#__PURE__*/(() => {\n  class CdkHeaderRow {\n    static {\n      this.ɵfac = function CdkHeaderRow_Factory(t) {\n        return new (t || CdkHeaderRow)();\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: CdkHeaderRow,\n        selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n        hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 1,\n        vars: 0,\n        consts: [[\"cdkCellOutlet\", \"\"]],\n        template: function CdkHeaderRow_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementContainer(0, 0);\n          }\n        },\n        dependencies: [CdkCellOutlet],\n        encapsulation: 2\n      });\n    }\n  }\n  return CdkHeaderRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nlet CdkFooterRow = /*#__PURE__*/(() => {\n  class CdkFooterRow {\n    static {\n      this.ɵfac = function CdkFooterRow_Factory(t) {\n        return new (t || CdkFooterRow)();\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: CdkFooterRow,\n        selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n        hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 1,\n        vars: 0,\n        consts: [[\"cdkCellOutlet\", \"\"]],\n        template: function CdkFooterRow_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementContainer(0, 0);\n          }\n        },\n        dependencies: [CdkCellOutlet],\n        encapsulation: 2\n      });\n    }\n  }\n  return CdkFooterRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nlet CdkRow = /*#__PURE__*/(() => {\n  class CdkRow {\n    static {\n      this.ɵfac = function CdkRow_Factory(t) {\n        return new (t || CdkRow)();\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: CdkRow,\n        selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n        hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 1,\n        vars: 0,\n        consts: [[\"cdkCellOutlet\", \"\"]],\n        template: function CdkRow_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementContainer(0, 0);\n          }\n        },\n        dependencies: [CdkCellOutlet],\n        encapsulation: 2\n      });\n    }\n  }\n  return CdkRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\nlet CdkNoDataRow = /*#__PURE__*/(() => {\n  class CdkNoDataRow {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n      this._contentClassName = 'cdk-no-data-row';\n    }\n    static {\n      this.ɵfac = function CdkNoDataRow_Factory(t) {\n        return new (t || CdkNoDataRow)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkNoDataRow,\n        selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return CdkNoDataRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   */\n  constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._isBrowser = _isBrowser;\n    this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n    this._positionListener = _positionListener;\n    this._cachedCellWidths = [];\n    this._borderCellCss = {\n      'top': `${_stickCellCss}-border-elem-top`,\n      'bottom': `${_stickCellCss}-border-elem-bottom`,\n      'left': `${_stickCellCss}-border-elem-left`,\n      'right': `${_stickCellCss}-border-elem-right`\n    };\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n  clearStickyPositioning(rows, stickyDirections) {\n    const elementsToClear = [];\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n      elementsToClear.push(row);\n      for (let i = 0; i < row.children.length; i++) {\n        elementsToClear.push(row.children[i]);\n      }\n    }\n    // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      for (const element of elementsToClear) {\n        this._removeStickyStyle(element, stickyDirections);\n      }\n    });\n  }\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n   *     column cell. If `false` cached widths will be used instead.\n   */\n  updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n    if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes: []\n        });\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes: []\n        });\n      }\n      return;\n    }\n    // Coalesce with sticky row updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      const firstRow = rows[0];\n      const numCells = firstRow.children.length;\n      const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n      const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n      const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n      const lastStickyStart = stickyStartStates.lastIndexOf(true);\n      const firstStickyEnd = stickyEndStates.indexOf(true);\n      const isRtl = this.direction === 'rtl';\n      const start = isRtl ? 'right' : 'left';\n      const end = isRtl ? 'left' : 'right';\n      for (const row of rows) {\n        for (let i = 0; i < numCells; i++) {\n          const cell = row.children[i];\n          if (stickyStartStates[i]) {\n            this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n          }\n          if (stickyEndStates[i]) {\n            this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n          }\n        }\n      }\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes: lastStickyStart === -1 ? [] : cellWidths.slice(0, lastStickyStart + 1).map((width, index) => stickyStartStates[index] ? width : null)\n        });\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes: firstStickyEnd === -1 ? [] : cellWidths.slice(firstStickyEnd).map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null).reverse()\n        });\n      }\n    });\n  }\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   */\n  stickRows(rowsToStick, stickyStates, position) {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n    // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n    // (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n      // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n      // sticky states need to be reversed as well.\n      const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n      const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n      // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n      const stickyOffsets = [];\n      const stickyCellHeights = [];\n      const elementsToStick = [];\n      for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n        stickyOffsets[rowIndex] = stickyOffset;\n        const row = rows[rowIndex];\n        elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];\n        const height = row.getBoundingClientRect().height;\n        stickyOffset += height;\n        stickyCellHeights[rowIndex] = height;\n      }\n      const borderedRowIndex = states.lastIndexOf(true);\n      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n        const offset = stickyOffsets[rowIndex];\n        const isBorderedRowIndex = rowIndex === borderedRowIndex;\n        for (const element of elementsToStick[rowIndex]) {\n          this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n        }\n      }\n      if (position === 'top') {\n        this._positionListener?.stickyHeaderRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick\n        });\n      } else {\n        this._positionListener?.stickyFooterRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick\n        });\n      }\n    });\n  }\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   */\n  updateStickyFooterContainer(tableElement, stickyStates) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n    // Coalesce with other sticky updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      const tfoot = tableElement.querySelector('tfoot');\n      if (tfoot) {\n        if (stickyStates.some(state => !state)) {\n          this._removeStickyStyle(tfoot, ['bottom']);\n        } else {\n          this._addStickyStyle(tfoot, 'bottom', 0, false);\n        }\n      }\n    });\n  }\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   */\n  _removeStickyStyle(element, stickyDirections) {\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n      element.classList.remove(this._borderCellCss[dir]);\n    }\n    // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    // Short-circuit checking element.style[dir] for stickyDirections as they\n    // were already removed above.\n    const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n    if (hasDirection) {\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    } else {\n      // When not hasDirection, _getCalculatedZIndex will always return ''.\n      element.style.zIndex = '';\n      if (this._needsPositionStickyOnElement) {\n        element.style.position = '';\n      }\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   */\n  _addStickyStyle(element, dir, dirValue, isBorderElement) {\n    element.classList.add(this._stickCellCss);\n    if (isBorderElement) {\n      element.classList.add(this._borderCellCss[dir]);\n    }\n    element.style[dir] = `${dirValue}px`;\n    element.style.zIndex = this._getCalculatedZIndex(element);\n    if (this._needsPositionStickyOnElement) {\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    }\n  }\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   */\n  _getCalculatedZIndex(element) {\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1\n    };\n    let zIndex = 0;\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    for (const dir of STICKY_DIRECTIONS) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n    return zIndex ? `${zIndex}` : '';\n  }\n  /** Gets the widths for each cell in the provided row. */\n  _getCellWidths(row, recalculateCellWidths = true) {\n    if (!recalculateCellWidths && this._cachedCellWidths.length) {\n      return this._cachedCellWidths;\n    }\n    const cellWidths = [];\n    const firstRowCells = row.children;\n    for (let i = 0; i < firstRowCells.length; i++) {\n      let cell = firstRowCells[i];\n      cellWidths.push(cell.getBoundingClientRect().width);\n    }\n    this._cachedCellWidths = cellWidths;\n    return cellWidths;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyStartColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyEndColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(`Could not find a matching row definition for the` + `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n  return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = /*#__PURE__*/new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nlet CdkRecycleRows = /*#__PURE__*/(() => {\n  class CdkRecycleRows {\n    static {\n      this.ɵfac = function CdkRecycleRows_Factory(t) {\n        return new (t || CdkRecycleRows)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: CdkRecycleRows,\n        selectors: [[\"cdk-table\", \"recycleRows\", \"\"], [\"table\", \"cdk-table\", \"\", \"recycleRows\", \"\"]],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: _VIEW_REPEATER_STRATEGY,\n          useClass: _RecycleViewRepeaterStrategy\n        }])]\n      });\n    }\n  }\n  return CdkRecycleRows;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nlet DataRowOutlet = /*#__PURE__*/(() => {\n  class DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n      this.viewContainer = viewContainer;\n      this.elementRef = elementRef;\n      const table = inject(CDK_TABLE);\n      table._rowOutlet = this;\n      table._outletAssigned();\n    }\n    static {\n      this.ɵfac = function DataRowOutlet_Factory(t) {\n        return new (t || DataRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: DataRowOutlet,\n        selectors: [[\"\", \"rowOutlet\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return DataRowOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nlet HeaderRowOutlet = /*#__PURE__*/(() => {\n  class HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n      this.viewContainer = viewContainer;\n      this.elementRef = elementRef;\n      const table = inject(CDK_TABLE);\n      table._headerRowOutlet = this;\n      table._outletAssigned();\n    }\n    static {\n      this.ɵfac = function HeaderRowOutlet_Factory(t) {\n        return new (t || HeaderRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: HeaderRowOutlet,\n        selectors: [[\"\", \"headerRowOutlet\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return HeaderRowOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nlet FooterRowOutlet = /*#__PURE__*/(() => {\n  class FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n      this.viewContainer = viewContainer;\n      this.elementRef = elementRef;\n      const table = inject(CDK_TABLE);\n      table._footerRowOutlet = this;\n      table._outletAssigned();\n    }\n    static {\n      this.ɵfac = function FooterRowOutlet_Factory(t) {\n        return new (t || FooterRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: FooterRowOutlet,\n        selectors: [[\"\", \"footerRowOutlet\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return FooterRowOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nlet NoDataRowOutlet = /*#__PURE__*/(() => {\n  class NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n      this.viewContainer = viewContainer;\n      this.elementRef = elementRef;\n      const table = inject(CDK_TABLE);\n      table._noDataRowOutlet = this;\n      table._outletAssigned();\n    }\n    static {\n      this.ɵfac = function NoDataRowOutlet_Factory(t) {\n        return new (t || NoDataRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: NoDataRowOutlet,\n        selectors: [[\"\", \"noDataRowOutlet\", \"\"]],\n        standalone: true\n      });\n    }\n  }\n  return NoDataRowOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE =\n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nlet CdkTable = /*#__PURE__*/(() => {\n  class CdkTable {\n    /** Aria role to apply to the table's cells based on the table's own role. */\n    _getCellRole() {\n      if (this._cellRoleInternal === undefined) {\n        // Perform this lazily in case the table's role was updated by a directive after construction.\n        const role = this._elementRef.nativeElement.getAttribute('role');\n        const cellRole = role === 'grid' || role === 'treegrid' ? 'gridcell' : 'cell';\n        this._cellRoleInternal = this._isNativeHtmlTable && cellRole === 'cell' ? null : cellRole;\n      }\n      return this._cellRoleInternal;\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n      return this._trackByFn;\n    }\n    set trackBy(fn) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n      }\n      this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n      return this._dataSource;\n    }\n    set dataSource(dataSource) {\n      if (this._dataSource !== dataSource) {\n        this._switchDataSource(dataSource);\n      }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n      return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(value) {\n      this._multiTemplateDataRows = value;\n      // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n      // this setter will be invoked before the row outlet has been defined hence the null check.\n      if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n        this._forceRenderDataRows();\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n      return this._fixedLayout;\n    }\n    set fixedLayout(value) {\n      this._fixedLayout = value;\n      // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n      this._forceRecalculateCellWidths = true;\n      this._stickyColumnStylesNeedReset = true;\n    }\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler,\n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener,\n    /**\n     * @deprecated `_ngZone` parameter to become required.\n     * @breaking-change 14.0.0\n     */\n    _ngZone) {\n      this._differs = _differs;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._dir = _dir;\n      this._platform = _platform;\n      this._viewRepeater = _viewRepeater;\n      this._coalescedStyleScheduler = _coalescedStyleScheduler;\n      this._viewportRuler = _viewportRuler;\n      this._stickyPositioningListener = _stickyPositioningListener;\n      this._ngZone = _ngZone;\n      /** Subject that emits when the component has been destroyed. */\n      this._onDestroy = new Subject();\n      /**\n       * Map of all the user's defined columns (header, data, and footer cell template) identified by\n       * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n       * any custom column definitions added to `_customColumnDefs`.\n       */\n      this._columnDefsByName = new Map();\n      /**\n       * Column definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * column definitions as *its* content child.\n       */\n      this._customColumnDefs = new Set();\n      /**\n       * Data row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * built-in data rows as *its* content child.\n       */\n      this._customRowDefs = new Set();\n      /**\n       * Header row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * built-in header rows as *its* content child.\n       */\n      this._customHeaderRowDefs = new Set();\n      /**\n       * Footer row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n       * built-in footer row as *its* content child.\n       */\n      this._customFooterRowDefs = new Set();\n      /**\n       * Whether the header row definition has been changed. Triggers an update to the header row after\n       * content is checked. Initialized as true so that the table renders the initial set of rows.\n       */\n      this._headerRowDefChanged = true;\n      /**\n       * Whether the footer row definition has been changed. Triggers an update to the footer row after\n       * content is checked. Initialized as true so that the table renders the initial set of rows.\n       */\n      this._footerRowDefChanged = true;\n      /**\n       * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n       * change.\n       */\n      this._stickyColumnStylesNeedReset = true;\n      /**\n       * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n       * `false`, cached values will be used instead. This is only applicable to tables with\n       * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n       */\n      this._forceRecalculateCellWidths = true;\n      /**\n       * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n       * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n       * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n       * and row template matches, which allows the `IterableDiffer` to check rows by reference\n       * and understand which rows are added/moved/removed.\n       *\n       * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n       * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n       * contains an array of created pairs. The array is necessary to handle cases where the data\n       * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n       * stored.\n       */\n      this._cachedRenderRowsMap = new Map();\n      /**\n       * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n       * table subclasses.\n       */\n      this.stickyCssClass = 'cdk-table-sticky';\n      /**\n       * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n       * the position is set in a selector associated with the value of stickyCssClass. May be\n       * overridden by table subclasses\n       */\n      this.needsPositionStickyOnElement = true;\n      /** Whether the no data row is currently showing anything. */\n      this._isShowingNoDataRow = false;\n      /** Whether the table has rendered out all the outlets for the first time. */\n      this._hasAllOutlets = false;\n      /** Whether the table is done initializing. */\n      this._hasInitialized = false;\n      this._cellRoleInternal = undefined;\n      this._multiTemplateDataRows = false;\n      this._fixedLayout = false;\n      /**\n       * Emits when the table completes rendering a set of data rows based on the latest data from the\n       * data source, even if the set of rows is empty.\n       */\n      this.contentChanged = new EventEmitter();\n      // TODO(andrewseguin): Remove max value as the end index\n      //   and instead calculate the view on init and scroll.\n      /**\n       * Stream containing the latest information on what rows are being displayed on screen.\n       * Can be used by the data source to as a heuristic of what data should be provided.\n       *\n       * @docs-private\n       */\n      this.viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE\n      });\n      if (!role) {\n        _elementRef.nativeElement.setAttribute('role', 'table');\n      }\n      this._document = _document;\n      this._isServer = !_platform.isBrowser;\n      this._isNativeHtmlTable = _elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    ngOnInit() {\n      this._setupStickyStyler();\n      // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n      // the user has provided a custom trackBy, return the result of that function as evaluated\n      // with the values of the `RenderRow`'s data and index.\n      this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n        return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n      });\n      this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n        this._forceRecalculateCellWidths = true;\n      });\n    }\n    ngAfterContentInit() {\n      this._hasInitialized = true;\n    }\n    ngAfterContentChecked() {\n      // Only start re-rendering in `ngAfterContentChecked` after the first render.\n      if (this._canRender()) {\n        this._render();\n      }\n    }\n    ngOnDestroy() {\n      [this._rowOutlet?.viewContainer, this._headerRowOutlet?.viewContainer, this._footerRowOutlet?.viewContainer, this._cachedRenderRowsMap, this._customColumnDefs, this._customRowDefs, this._customHeaderRowDefs, this._customFooterRowDefs, this._columnDefsByName].forEach(def => {\n        def?.clear();\n      });\n      this._headerRowDefs = [];\n      this._footerRowDefs = [];\n      this._defaultRowDef = null;\n      this._onDestroy.next();\n      this._onDestroy.complete();\n      if (isDataSource(this.dataSource)) {\n        this.dataSource.disconnect(this);\n      }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n      this._renderRows = this._getAllRenderRows();\n      const changes = this._dataDiffer.diff(this._renderRows);\n      if (!changes) {\n        this._updateNoDataRow();\n        this.contentChanged.next();\n        return;\n      }\n      const viewContainer = this._rowOutlet.viewContainer;\n      this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, change => {\n        if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n          this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n        }\n      });\n      // Update the meta context of a row's context data (index, count, first, last, ...)\n      this._updateRowIndexContext();\n      // Update rows that did not get added/removed/moved but may have had their identity changed,\n      // e.g. if trackBy matched data on some property but the actual data reference changed.\n      changes.forEachIdentityChange(record => {\n        const rowView = viewContainer.get(record.currentIndex);\n        rowView.context.$implicit = record.item.data;\n      });\n      this._updateNoDataRow();\n      // Allow the new row data to render before measuring it.\n      // @breaking-change 14.0.0 Remove undefined check once _ngZone is required.\n      if (this._ngZone && NgZone.isInAngularZone()) {\n        this._ngZone.onStable.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {\n          this.updateStickyColumnStyles();\n        });\n      } else {\n        this.updateStickyColumnStyles();\n      }\n      this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n      this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n      this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n      this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n      this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.add(headerRowDef);\n      this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.delete(headerRowDef);\n      this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.add(footerRowDef);\n      this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.delete(footerRowDef);\n      this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n      this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n      const headerRows = this._getRenderedRows(this._headerRowOutlet);\n      // Hide the thead element if there are no header rows. This is necessary to satisfy\n      // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n      // required child `row`.\n      if (this._isNativeHtmlTable) {\n        const thead = closestTableSection(this._headerRowOutlet, 'thead');\n        if (thead) {\n          thead.style.display = headerRows.length ? '' : 'none';\n        }\n      }\n      const stickyStates = this._headerRowDefs.map(def => def.sticky);\n      this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n      this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n      // Reset the dirty state of the sticky input change since it has been used.\n      this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n      const footerRows = this._getRenderedRows(this._footerRowOutlet);\n      // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n      // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n      // required child `row`.\n      if (this._isNativeHtmlTable) {\n        const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n        if (tfoot) {\n          tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n      }\n      const stickyStates = this._footerRowDefs.map(def => def.sticky);\n      this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n      this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n      this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n      // Reset the dirty state of the sticky input change since it has been used.\n      this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n      const headerRows = this._getRenderedRows(this._headerRowOutlet);\n      const dataRows = this._getRenderedRows(this._rowOutlet);\n      const footerRows = this._getRenderedRows(this._footerRowOutlet);\n      // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n      // In a table using a fixed layout, row content won't affect column width, so sticky styles\n      // don't need to be cleared unless either the sticky column config changes or one of the row\n      // defs change.\n      if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        this._stickyColumnStylesNeedReset = false;\n      }\n      // Update the sticky styles for each header row depending on the def's sticky state\n      headerRows.forEach((headerRow, i) => {\n        this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n      });\n      // Update the sticky styles for each data row depending on its def's sticky state\n      this._rowDefs.forEach(rowDef => {\n        // Collect all the rows rendered with this row definition.\n        const rows = [];\n        for (let i = 0; i < dataRows.length; i++) {\n          if (this._renderRows[i].rowDef === rowDef) {\n            rows.push(dataRows[i]);\n          }\n        }\n        this._addStickyColumnStyles(rows, rowDef);\n      });\n      // Update the sticky styles for each footer row depending on the def's sticky state\n      footerRows.forEach((footerRow, i) => {\n        this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n      });\n      // Reset the dirty state of the sticky input change since it has been used.\n      Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /** Invoked whenever an outlet is created and has been assigned to the table. */\n    _outletAssigned() {\n      // Trigger the first render once all outlets have been assigned. We do it this way, as\n      // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n      // the next change detection will happen.\n      // Also we can't use queries to resolve the outlets, because they're wrapped in a\n      // conditional, so we have to rely on them being assigned via DI.\n      if (!this._hasAllOutlets && this._rowOutlet && this._headerRowOutlet && this._footerRowOutlet && this._noDataRowOutlet) {\n        this._hasAllOutlets = true;\n        // In some setups this may fire before `ngAfterContentInit`\n        // so we need a check here. See #28538.\n        if (this._canRender()) {\n          this._render();\n        }\n      }\n    }\n    /** Whether the table has all the information to start rendering. */\n    _canRender() {\n      return this._hasAllOutlets && this._hasInitialized;\n    }\n    /** Renders the table if its state has changed. */\n    _render() {\n      // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n      this._cacheRowDefs();\n      this._cacheColumnDefs();\n      // Make sure that the user has at least added header, footer, or data row def.\n      if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMissingRowDefsError();\n      }\n      // Render updates if the list of columns have been changed for the header, row, or footer defs.\n      const columnsChanged = this._renderUpdatedColumns();\n      const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n      // Ensure sticky column styles are reset if set to `true` elsewhere.\n      this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n      this._forceRecalculateCellWidths = rowDefsChanged;\n      // If the header row definition has been changed, trigger a render to the header row.\n      if (this._headerRowDefChanged) {\n        this._forceRenderHeaderRows();\n        this._headerRowDefChanged = false;\n      }\n      // If the footer row definition has been changed, trigger a render to the footer row.\n      if (this._footerRowDefChanged) {\n        this._forceRenderFooterRows();\n        this._footerRowDefChanged = false;\n      }\n      // If there is a data source and row definitions, connect to the data source unless a\n      // connection has already been made.\n      if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n        this._observeRenderChanges();\n      } else if (this._stickyColumnStylesNeedReset) {\n        // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n        // called when it row data arrives. Otherwise, we need to call it proactively.\n        this.updateStickyColumnStyles();\n      }\n      this._checkStickyStates();\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n      const renderRows = [];\n      // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n      // new cache while unused ones can be picked up by garbage collection.\n      const prevCachedRenderRows = this._cachedRenderRowsMap;\n      this._cachedRenderRowsMap = new Map();\n      // For each data object, get the list of rows that should be rendered, represented by the\n      // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n      for (let i = 0; i < this._data.length; i++) {\n        let data = this._data[i];\n        const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n        if (!this._cachedRenderRowsMap.has(data)) {\n          this._cachedRenderRowsMap.set(data, new WeakMap());\n        }\n        for (let j = 0; j < renderRowsForData.length; j++) {\n          let renderRow = renderRowsForData[j];\n          const cache = this._cachedRenderRowsMap.get(renderRow.data);\n          if (cache.has(renderRow.rowDef)) {\n            cache.get(renderRow.rowDef).push(renderRow);\n          } else {\n            cache.set(renderRow.rowDef, [renderRow]);\n          }\n          renderRows.push(renderRow);\n        }\n      }\n      return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n      const rowDefs = this._getRowDefs(data, dataIndex);\n      return rowDefs.map(rowDef => {\n        const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n        if (cachedRenderRows.length) {\n          const dataRow = cachedRenderRows.shift();\n          dataRow.dataIndex = dataIndex;\n          return dataRow;\n        } else {\n          return {\n            data,\n            rowDef,\n            dataIndex\n          };\n        }\n      });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n      this._columnDefsByName.clear();\n      const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n      columnDefs.forEach(columnDef => {\n        if (this._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableDuplicateColumnNameError(columnDef.name);\n        }\n        this._columnDefsByName.set(columnDef.name, columnDef);\n      });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n      this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n      this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n      this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n      // After all row definitions are determined, find the row definition to be considered default.\n      const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n      if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMultipleDefaultRowDefsError();\n      }\n      this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n      const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n      // Force re-render data rows if the list of column definitions have changed.\n      const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n      if (dataColumnsChanged) {\n        this._forceRenderDataRows();\n      }\n      // Force re-render header/footer rows if the list of column definitions have changed.\n      const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n      if (headerColumnsChanged) {\n        this._forceRenderHeaderRows();\n      }\n      const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n      if (footerColumnsChanged) {\n        this._forceRenderFooterRows();\n      }\n      return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n      this._data = [];\n      if (isDataSource(this.dataSource)) {\n        this.dataSource.disconnect(this);\n      }\n      // Stop listening for data from the previous data source.\n      if (this._renderChangeSubscription) {\n        this._renderChangeSubscription.unsubscribe();\n        this._renderChangeSubscription = null;\n      }\n      if (!dataSource) {\n        if (this._dataDiffer) {\n          this._dataDiffer.diff([]);\n        }\n        if (this._rowOutlet) {\n          this._rowOutlet.viewContainer.clear();\n        }\n      }\n      this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n      // If no data source has been set, there is nothing to observe for changes.\n      if (!this.dataSource) {\n        return;\n      }\n      let dataStream;\n      if (isDataSource(this.dataSource)) {\n        dataStream = this.dataSource.connect(this);\n      } else if (isObservable(this.dataSource)) {\n        dataStream = this.dataSource;\n      } else if (Array.isArray(this.dataSource)) {\n        dataStream = of(this.dataSource);\n      }\n      if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownDataSourceError();\n      }\n      this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n        this._data = data || [];\n        this.renderRows();\n      });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n      // Clear the header row outlet if any content exists.\n      if (this._headerRowOutlet.viewContainer.length > 0) {\n        this._headerRowOutlet.viewContainer.clear();\n      }\n      this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n      this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n      // Clear the footer row outlet if any content exists.\n      if (this._footerRowOutlet.viewContainer.length > 0) {\n        this._footerRowOutlet.viewContainer.clear();\n      }\n      this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n      this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n      const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n        const columnDef = this._columnDefsByName.get(columnName);\n        if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownColumnError(columnName);\n        }\n        return columnDef;\n      });\n      const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n      const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n      this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n      const renderedRows = [];\n      for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n        const viewRef = rowOutlet.viewContainer.get(i);\n        renderedRows.push(viewRef.rootNodes[0]);\n      }\n      return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n      if (this._rowDefs.length == 1) {\n        return [this._rowDefs[0]];\n      }\n      let rowDefs = [];\n      if (this.multiTemplateDataRows) {\n        rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n      } else {\n        let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n        if (rowDef) {\n          rowDefs.push(rowDef);\n        }\n      }\n      if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMissingMatchingRowDefError(data);\n      }\n      return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n      const rowDef = renderRow.rowDef;\n      const context = {\n        $implicit: renderRow.data\n      };\n      return {\n        templateRef: rowDef.template,\n        context,\n        index\n      };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n      // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n      const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n      this._renderCellTemplateForItem(rowDef, context);\n      return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n      for (let cellTemplate of this._getCellTemplates(rowDef)) {\n        if (CdkCellOutlet.mostRecentCellOutlet) {\n          CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n        }\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n      const viewContainer = this._rowOutlet.viewContainer;\n      for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n        const viewRef = viewContainer.get(renderIndex);\n        const context = viewRef.context;\n        context.count = count;\n        context.first = renderIndex === 0;\n        context.last = renderIndex === count - 1;\n        context.even = renderIndex % 2 === 0;\n        context.odd = !context.even;\n        if (this.multiTemplateDataRows) {\n          context.dataIndex = this._renderRows[renderIndex].dataIndex;\n          context.renderIndex = renderIndex;\n        } else {\n          context.index = this._renderRows[renderIndex].dataIndex;\n        }\n      }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n      if (!rowDef || !rowDef.columns) {\n        return [];\n      }\n      return Array.from(rowDef.columns, columnId => {\n        const column = this._columnDefsByName.get(columnId);\n        if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownColumnError(columnId);\n        }\n        return rowDef.extractCellTemplate(column);\n      });\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n      this._dataDiffer.diff([]);\n      this._rowOutlet.viewContainer.clear();\n      this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n      const stickyCheckReducer = (acc, d) => {\n        return acc || d.hasStickyChanged();\n      };\n      // Note that the check needs to occur for every definition since it notifies the definition\n      // that it can reset its dirty state. Using another operator like `some` may short-circuit\n      // remaining definitions and leave them in an unchecked state.\n      if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyHeaderRowStyles();\n      }\n      if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyFooterRowStyles();\n      }\n      if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n        this._stickyColumnStylesNeedReset = true;\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n      const direction = this._dir ? this._dir.value : 'ltr';\n      this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n      (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(value => {\n        this._stickyStyler.direction = value;\n        this.updateStickyColumnStyles();\n      });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n      return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n      const noDataRow = this._customNoDataRow || this._noDataRow;\n      if (!noDataRow) {\n        return;\n      }\n      const shouldShow = this._rowOutlet.viewContainer.length === 0;\n      if (shouldShow === this._isShowingNoDataRow) {\n        return;\n      }\n      const container = this._noDataRowOutlet.viewContainer;\n      if (shouldShow) {\n        const view = container.createEmbeddedView(noDataRow.templateRef);\n        const rootNode = view.rootNodes[0];\n        // Only add the attributes if we have a single root node since it's hard\n        // to figure out which one to add it to when there are multiple.\n        if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n          rootNode.setAttribute('role', 'row');\n          rootNode.classList.add(noDataRow._contentClassName);\n        }\n      } else {\n        container.clear();\n      }\n      this._isShowingNoDataRow = shouldShow;\n      this._changeDetectorRef.markForCheck();\n    }\n    static {\n      this.ɵfac = function CdkTable_Factory(t) {\n        return new (t || CdkTable)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵinjectAttribute('role'), i0.ɵɵdirectiveInject(i1.Directionality, 8), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), i0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER), i0.ɵɵdirectiveInject(i3.ViewportRuler), i0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12), i0.ɵɵdirectiveInject(i0.NgZone, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: CdkTable,\n        selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n        contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\n            i0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\n            i0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\n            i0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\n            i0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n          }\n        },\n        hostAttrs: [1, \"cdk-table\"],\n        hostVars: 2,\n        hostBindings: function CdkTable_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n          }\n        },\n        inputs: {\n          trackBy: \"trackBy\",\n          dataSource: \"dataSource\",\n          multiTemplateDataRows: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute],\n          fixedLayout: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"fixedLayout\", \"fixedLayout\", booleanAttribute]\n        },\n        outputs: {\n          contentChanged: \"contentChanged\"\n        },\n        exportAs: [\"cdkTable\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CDK_TABLE,\n          useExisting: CdkTable\n        }, {\n          provide: _VIEW_REPEATER_STRATEGY,\n          useClass: _DisposeViewRepeaterStrategy\n        }, {\n          provide: _COALESCED_STYLE_SCHEDULER,\n          useClass: _CoalescedStyleScheduler\n        },\n        // Prevent nested tables from seeing this table's StickyPositioningListener.\n        {\n          provide: STICKY_POSITIONING_LISTENER,\n          useValue: null\n        }]), i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c1,\n        decls: 5,\n        vars: 2,\n        consts: [[\"role\", \"rowgroup\"], [\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n        template: function CdkTable_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c0);\n            i0.ɵɵprojection(0);\n            i0.ɵɵprojection(1, 1);\n            i0.ɵɵtemplate(2, CdkTable_Conditional_2_Template, 1, 0)(3, CdkTable_Conditional_3_Template, 7, 0)(4, CdkTable_Conditional_4_Template, 4, 0);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(2, ctx._isServer ? 2 : -1);\n            i0.ɵɵadvance();\n            i0.ɵɵconditional(3, ctx._isNativeHtmlTable ? 3 : 4);\n          }\n        },\n        dependencies: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n        styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"],\n        encapsulation: 2\n      });\n    }\n  }\n  return CdkTable;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n  return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n  const uppercaseSection = section.toUpperCase();\n  let current = outlet.viewContainer.element.nativeElement;\n  while (current) {\n    // 1 is an element node.\n    const nodeName = current.nodeType === 1 ? current.nodeName : null;\n    if (nodeName === uppercaseSection) {\n      return current;\n    } else if (nodeName === 'TABLE') {\n      // Stop traversing past the `table` node.\n      break;\n    }\n    current = current.parentNode;\n  }\n  return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nlet CdkTextColumn = /*#__PURE__*/(() => {\n  class CdkTextColumn {\n    /** Column name that should be used to reference this column. */\n    get name() {\n      return this._name;\n    }\n    set name(name) {\n      this._name = name;\n      // With Ivy, inputs can be initialized before static query results are\n      // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n      this._syncColumnDefName();\n    }\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n      this._table = _table;\n      this._options = _options;\n      /** Alignment of the cell values. */\n      this.justify = 'start';\n      this._options = _options || {};\n    }\n    ngOnInit() {\n      this._syncColumnDefName();\n      if (this.headerText === undefined) {\n        this.headerText = this._createDefaultHeaderText();\n      }\n      if (!this.dataAccessor) {\n        this.dataAccessor = this._options.defaultDataAccessor || ((data, name) => data[name]);\n      }\n      if (this._table) {\n        // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n        // since the columnDef will not pick up its content by the time the table finishes checking\n        // its content and initializing the rows.\n        this.columnDef.cell = this.cell;\n        this.columnDef.headerCell = this.headerCell;\n        this._table.addColumnDef(this.columnDef);\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getTableTextColumnMissingParentTableError();\n      }\n    }\n    ngOnDestroy() {\n      if (this._table) {\n        this._table.removeColumnDef(this.columnDef);\n      }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n      const name = this.name;\n      if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableTextColumnMissingNameError();\n      }\n      if (this._options && this._options.defaultHeaderTextTransform) {\n        return this._options.defaultHeaderTextTransform(name);\n      }\n      return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n      if (this.columnDef) {\n        this.columnDef.name = this.name;\n      }\n    }\n    static {\n      this.ɵfac = function CdkTextColumn_Factory(t) {\n        return new (t || CdkTextColumn)(i0.ɵɵdirectiveInject(CdkTable, 8), i0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: CdkTextColumn,\n        selectors: [[\"cdk-text-column\"]],\n        viewQuery: function CdkTextColumn_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(CdkColumnDef, 7);\n            i0.ɵɵviewQuery(CdkCellDef, 7);\n            i0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n          }\n        },\n        inputs: {\n          name: \"name\",\n          headerText: \"headerText\",\n          dataAccessor: \"dataAccessor\",\n          justify: \"justify\"\n        },\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 3,\n        vars: 0,\n        consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]],\n        template: function CdkTextColumn_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementContainerStart(0, 0);\n            i0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1)(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n            i0.ɵɵelementContainerEnd();\n          }\n        },\n        dependencies: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n        encapsulation: 2\n      });\n    }\n  }\n  return CdkTextColumn;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\nlet CdkTableModule = /*#__PURE__*/(() => {\n  class CdkTableModule {\n    static {\n      this.ɵfac = function CdkTableModule_Factory(t) {\n        return new (t || CdkTableModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: CdkTableModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [ScrollingModule]\n      });\n    }\n  }\n  return CdkTableModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n * @deprecated Implement the `CanStick` interface instead.\n * @breaking-change 19.0.0\n */\nfunction mixinHasStickyInput(base) {\n  return class extends base {\n    /** Whether sticky positioning should be applied. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(v) {\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    /** Whether the sticky value has changed since this was last called. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n    constructor(...args) {\n      super(...args);\n      this._sticky = false;\n      /** Whether the sticky input has changed since it was last checked. */\n      this._hasStickyChanged = false;\n    }\n  };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, booleanAttribute, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkCellOutlet, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]], \"*\"];\nconst _c1 = [\"caption\", \"colgroup, col\", \"*\"];\nfunction MatTable_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2);\n  }\n}\nfunction MatTable_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"thead\", 0);\n    i0.ɵɵelementContainer(1, 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"tbody\", 2);\n    i0.ɵɵelementContainer(3, 3)(4, 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"tfoot\", 0);\n    i0.ɵɵelementContainer(6, 5);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatTable_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 1)(1, 3)(2, 4)(3, 5);\n  }\n}\nfunction MatTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\nfunction MatTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.dataAccessor(data_r2, ctx_r0.name), \" \");\n  }\n}\nlet MatRecycleRows = /*#__PURE__*/(() => {\n  class MatRecycleRows {\n    static {\n      this.ɵfac = function MatRecycleRows_Factory(t) {\n        return new (t || MatRecycleRows)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatRecycleRows,\n        selectors: [[\"mat-table\", \"recycleRows\", \"\"], [\"table\", \"mat-table\", \"\", \"recycleRows\", \"\"]],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: _VIEW_REPEATER_STRATEGY,\n          useClass: _RecycleViewRepeaterStrategy\n        }])]\n      });\n    }\n  }\n  return MatRecycleRows;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatTable = /*#__PURE__*/(() => {\n  class MatTable extends CdkTable {\n    constructor() {\n      super(...arguments);\n      /** Overrides the sticky CSS class set by the `CdkTable`. */\n      this.stickyCssClass = 'mat-mdc-table-sticky';\n      /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n      this.needsPositionStickyOnElement = false;\n    }\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatTable_BaseFactory;\n        return function MatTable_Factory(t) {\n          return (ɵMatTable_BaseFactory || (ɵMatTable_BaseFactory = i0.ɵɵgetInheritedFactory(MatTable)))(t || MatTable);\n        };\n      })();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatTable,\n        selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]],\n        hostAttrs: [1, \"mat-mdc-table\", \"mdc-data-table__table\"],\n        hostVars: 2,\n        hostBindings: function MatTable_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"mdc-table-fixed-layout\", ctx.fixedLayout);\n          }\n        },\n        exportAs: [\"matTable\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkTable,\n          useExisting: MatTable\n        }, {\n          provide: CDK_TABLE,\n          useExisting: MatTable\n        }, {\n          provide: _COALESCED_STYLE_SCHEDULER,\n          useClass: _CoalescedStyleScheduler\n        },\n        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n        //  is only included in the build if used.\n        {\n          provide: _VIEW_REPEATER_STRATEGY,\n          useClass: _DisposeViewRepeaterStrategy\n        },\n        // Prevent nested tables from seeing this table's StickyPositioningListener.\n        {\n          provide: STICKY_POSITIONING_LISTENER,\n          useValue: null\n        }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c1,\n        decls: 5,\n        vars: 2,\n        consts: [[\"role\", \"rowgroup\"], [\"headerRowOutlet\", \"\"], [\"role\", \"rowgroup\", 1, \"mdc-data-table__content\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n        template: function MatTable_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef(_c0);\n            i0.ɵɵprojection(0);\n            i0.ɵɵprojection(1, 1);\n            i0.ɵɵtemplate(2, MatTable_Conditional_2_Template, 1, 0)(3, MatTable_Conditional_3_Template, 7, 0)(4, MatTable_Conditional_4_Template, 4, 0);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(2, ctx._isServer ? 2 : -1);\n            i0.ɵɵadvance();\n            i0.ɵɵconditional(3, ctx._isNativeHtmlTable ? 3 : 4);\n          }\n        },\n        dependencies: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n        styles: [\".mat-mdc-table-sticky{position:sticky !important}.mdc-data-table{-webkit-overflow-scrolling:touch;display:inline-flex;flex-direction:column;box-sizing:border-box;position:relative}.mdc-data-table__table-container{-webkit-overflow-scrolling:touch;overflow-x:auto;width:100%}.mdc-data-table__table{min-width:100%;border:0;white-space:nowrap;border-spacing:0;table-layout:fixed}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px 0 16px}.mdc-data-table__header-cell--checkbox,.mdc-data-table__cell--checkbox{padding-left:4px;padding-right:0}[dir=rtl] .mdc-data-table__header-cell--checkbox,[dir=rtl] .mdc-data-table__cell--checkbox,.mdc-data-table__header-cell--checkbox[dir=rtl],.mdc-data-table__cell--checkbox[dir=rtl]{padding-left:0;padding-right:4px}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color)}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-header-headline-font, Roboto, sans-serif);line-height:var(--mat-table-header-headline-line-height);font-size:var(--mat-table-header-headline-size, 14px);font-weight:var(--mat-table-header-headline-weight, 500)}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, Roboto, sans-serif);line-height:var(--mat-table-row-item-label-text-line-height);font-size:var(--mat-table-row-item-label-text-size, 14px);font-weight:var(--mat-table-row-item-label-text-weight)}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-footer-supporting-text-font, Roboto, sans-serif);line-height:var(--mat-table-footer-supporting-text-line-height);font-size:var(--mat-table-footer-supporting-text-size, 14px);font-weight:var(--mat-table-footer-supporting-text-weight);letter-spacing:var(--mat-table-footer-supporting-text-tracking)}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking);font-weight:inherit;line-height:inherit}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking);line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking)}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"],\n        encapsulation: 2\n      });\n    }\n  }\n  return MatTable;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nlet MatCellDef = /*#__PURE__*/(() => {\n  class MatCellDef extends CdkCellDef {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatCellDef_BaseFactory;\n        return function MatCellDef_Factory(t) {\n          return (ɵMatCellDef_BaseFactory || (ɵMatCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatCellDef)))(t || MatCellDef);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatCellDef,\n        selectors: [[\"\", \"matCellDef\", \"\"]],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkCellDef,\n          useExisting: MatCellDef\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatCellDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nlet MatHeaderCellDef = /*#__PURE__*/(() => {\n  class MatHeaderCellDef extends CdkHeaderCellDef {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatHeaderCellDef_BaseFactory;\n        return function MatHeaderCellDef_Factory(t) {\n          return (ɵMatHeaderCellDef_BaseFactory || (ɵMatHeaderCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderCellDef)))(t || MatHeaderCellDef);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatHeaderCellDef,\n        selectors: [[\"\", \"matHeaderCellDef\", \"\"]],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkHeaderCellDef,\n          useExisting: MatHeaderCellDef\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatHeaderCellDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nlet MatFooterCellDef = /*#__PURE__*/(() => {\n  class MatFooterCellDef extends CdkFooterCellDef {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatFooterCellDef_BaseFactory;\n        return function MatFooterCellDef_Factory(t) {\n          return (ɵMatFooterCellDef_BaseFactory || (ɵMatFooterCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterCellDef)))(t || MatFooterCellDef);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatFooterCellDef,\n        selectors: [[\"\", \"matFooterCellDef\", \"\"]],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkFooterCellDef,\n          useExisting: MatFooterCellDef\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatFooterCellDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nlet MatColumnDef = /*#__PURE__*/(() => {\n  class MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n      return this._name;\n    }\n    set name(name) {\n      this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n      super._updateColumnCssClassName();\n      this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatColumnDef_BaseFactory;\n        return function MatColumnDef_Factory(t) {\n          return (ɵMatColumnDef_BaseFactory || (ɵMatColumnDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatColumnDef)))(t || MatColumnDef);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatColumnDef,\n        selectors: [[\"\", \"matColumnDef\", \"\"]],\n        inputs: {\n          name: [i0.ɵɵInputFlags.None, \"matColumnDef\", \"name\"]\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkColumnDef,\n          useExisting: MatColumnDef\n        }, {\n          provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n          useExisting: MatColumnDef\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatColumnDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Header cell template container that adds the right classes and role. */\nlet MatHeaderCell = /*#__PURE__*/(() => {\n  class MatHeaderCell extends CdkHeaderCell {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatHeaderCell_BaseFactory;\n        return function MatHeaderCell_Factory(t) {\n          return (ɵMatHeaderCell_BaseFactory || (ɵMatHeaderCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderCell)))(t || MatHeaderCell);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatHeaderCell,\n        selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]],\n        hostAttrs: [\"role\", \"columnheader\", 1, \"mat-mdc-header-cell\", \"mdc-data-table__header-cell\"],\n        standalone: true,\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatHeaderCell;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer cell template container that adds the right classes and role. */\nlet MatFooterCell = /*#__PURE__*/(() => {\n  class MatFooterCell extends CdkFooterCell {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatFooterCell_BaseFactory;\n        return function MatFooterCell_Factory(t) {\n          return (ɵMatFooterCell_BaseFactory || (ɵMatFooterCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterCell)))(t || MatFooterCell);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatFooterCell,\n        selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]],\n        hostAttrs: [1, \"mat-mdc-footer-cell\", \"mdc-data-table__cell\"],\n        standalone: true,\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatFooterCell;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Cell template container that adds the right classes and role. */\nlet MatCell = /*#__PURE__*/(() => {\n  class MatCell extends CdkCell {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatCell_BaseFactory;\n        return function MatCell_Factory(t) {\n          return (ɵMatCell_BaseFactory || (ɵMatCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatCell)))(t || MatCell);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatCell,\n        selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]],\n        hostAttrs: [1, \"mat-mdc-cell\", \"mdc-data-table__cell\"],\n        standalone: true,\n        features: [i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatCell;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nlet MatHeaderRowDef = /*#__PURE__*/(() => {\n  class MatHeaderRowDef extends CdkHeaderRowDef {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatHeaderRowDef_BaseFactory;\n        return function MatHeaderRowDef_Factory(t) {\n          return (ɵMatHeaderRowDef_BaseFactory || (ɵMatHeaderRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderRowDef)))(t || MatHeaderRowDef);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatHeaderRowDef,\n        selectors: [[\"\", \"matHeaderRowDef\", \"\"]],\n        inputs: {\n          columns: [i0.ɵɵInputFlags.None, \"matHeaderRowDef\", \"columns\"],\n          sticky: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"matHeaderRowDefSticky\", \"sticky\", booleanAttribute]\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkHeaderRowDef,\n          useExisting: MatHeaderRowDef\n        }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatHeaderRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nlet MatFooterRowDef = /*#__PURE__*/(() => {\n  class MatFooterRowDef extends CdkFooterRowDef {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatFooterRowDef_BaseFactory;\n        return function MatFooterRowDef_Factory(t) {\n          return (ɵMatFooterRowDef_BaseFactory || (ɵMatFooterRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterRowDef)))(t || MatFooterRowDef);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatFooterRowDef,\n        selectors: [[\"\", \"matFooterRowDef\", \"\"]],\n        inputs: {\n          columns: [i0.ɵɵInputFlags.None, \"matFooterRowDef\", \"columns\"],\n          sticky: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"matFooterRowDefSticky\", \"sticky\", booleanAttribute]\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkFooterRowDef,\n          useExisting: MatFooterRowDef\n        }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatFooterRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nlet MatRowDef = /*#__PURE__*/(() => {\n  class MatRowDef extends CdkRowDef {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatRowDef_BaseFactory;\n        return function MatRowDef_Factory(t) {\n          return (ɵMatRowDef_BaseFactory || (ɵMatRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatRowDef)))(t || MatRowDef);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatRowDef,\n        selectors: [[\"\", \"matRowDef\", \"\"]],\n        inputs: {\n          columns: [i0.ɵɵInputFlags.None, \"matRowDefColumns\", \"columns\"],\n          when: [i0.ɵɵInputFlags.None, \"matRowDefWhen\", \"when\"]\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkRowDef,\n          useExisting: MatRowDef\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nlet MatHeaderRow = /*#__PURE__*/(() => {\n  class MatHeaderRow extends CdkHeaderRow {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatHeaderRow_BaseFactory;\n        return function MatHeaderRow_Factory(t) {\n          return (ɵMatHeaderRow_BaseFactory || (ɵMatHeaderRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderRow)))(t || MatHeaderRow);\n        };\n      })();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatHeaderRow,\n        selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]],\n        hostAttrs: [\"role\", \"row\", 1, \"mat-mdc-header-row\", \"mdc-data-table__header-row\"],\n        exportAs: [\"matHeaderRow\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkHeaderRow,\n          useExisting: MatHeaderRow\n        }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n        decls: 1,\n        vars: 0,\n        consts: [[\"cdkCellOutlet\", \"\"]],\n        template: function MatHeaderRow_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementContainer(0, 0);\n          }\n        },\n        dependencies: [CdkCellOutlet],\n        encapsulation: 2\n      });\n    }\n  }\n  return MatHeaderRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nlet MatFooterRow = /*#__PURE__*/(() => {\n  class MatFooterRow extends CdkFooterRow {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatFooterRow_BaseFactory;\n        return function MatFooterRow_Factory(t) {\n          return (ɵMatFooterRow_BaseFactory || (ɵMatFooterRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterRow)))(t || MatFooterRow);\n        };\n      })();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatFooterRow,\n        selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]],\n        hostAttrs: [\"role\", \"row\", 1, \"mat-mdc-footer-row\", \"mdc-data-table__row\"],\n        exportAs: [\"matFooterRow\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkFooterRow,\n          useExisting: MatFooterRow\n        }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n        decls: 1,\n        vars: 0,\n        consts: [[\"cdkCellOutlet\", \"\"]],\n        template: function MatFooterRow_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementContainer(0, 0);\n          }\n        },\n        dependencies: [CdkCellOutlet],\n        encapsulation: 2\n      });\n    }\n  }\n  return MatFooterRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nlet MatRow = /*#__PURE__*/(() => {\n  class MatRow extends CdkRow {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatRow_BaseFactory;\n        return function MatRow_Factory(t) {\n          return (ɵMatRow_BaseFactory || (ɵMatRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatRow)))(t || MatRow);\n        };\n      })();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatRow,\n        selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]],\n        hostAttrs: [\"role\", \"row\", 1, \"mat-mdc-row\", \"mdc-data-table__row\"],\n        exportAs: [\"matRow\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkRow,\n          useExisting: MatRow\n        }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n        decls: 1,\n        vars: 0,\n        consts: [[\"cdkCellOutlet\", \"\"]],\n        template: function MatRow_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementContainer(0, 0);\n          }\n        },\n        dependencies: [CdkCellOutlet],\n        encapsulation: 2\n      });\n    }\n  }\n  return MatRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\nlet MatNoDataRow = /*#__PURE__*/(() => {\n  class MatNoDataRow extends CdkNoDataRow {\n    constructor() {\n      super(...arguments);\n      this._contentClassName = 'mat-mdc-no-data-row';\n    }\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatNoDataRow_BaseFactory;\n        return function MatNoDataRow_Factory(t) {\n          return (ɵMatNoDataRow_BaseFactory || (ɵMatNoDataRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatNoDataRow)))(t || MatNoDataRow);\n        };\n      })();\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatNoDataRow,\n        selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: CdkNoDataRow,\n          useExisting: MatNoDataRow\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatNoDataRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nlet MatTextColumn = /*#__PURE__*/(() => {\n  class MatTextColumn extends CdkTextColumn {\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵMatTextColumn_BaseFactory;\n        return function MatTextColumn_Factory(t) {\n          return (ɵMatTextColumn_BaseFactory || (ɵMatTextColumn_BaseFactory = i0.ɵɵgetInheritedFactory(MatTextColumn)))(t || MatTextColumn);\n        };\n      })();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatTextColumn,\n        selectors: [[\"mat-text-column\"]],\n        standalone: true,\n        features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n        decls: 3,\n        vars: 0,\n        consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]],\n        template: function MatTextColumn_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementContainerStart(0, 0);\n            i0.ɵɵtemplate(1, MatTextColumn_th_1_Template, 2, 3, \"th\", 1)(2, MatTextColumn_td_2_Template, 2, 3, \"td\", 2);\n            i0.ɵɵelementContainerEnd();\n          }\n        },\n        dependencies: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell],\n        encapsulation: 2\n      });\n    }\n  }\n  return MatTextColumn;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst EXPORTED_DECLARATIONS = [\n// Table\nMatTable, MatRecycleRows,\n// Template defs\nMatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef,\n// Cell directives\nMatHeaderCell, MatCell, MatFooterCell,\n// Row directives\nMatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\nlet MatTableModule = /*#__PURE__*/(() => {\n  class MatTableModule {\n    static {\n      this.ɵfac = function MatTableModule_Factory(t) {\n        return new (t || MatTableModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatTableModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatCommonModule, CdkTableModule, MatCommonModule]\n      });\n    }\n  }\n  return MatTableModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends DataSource {\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() {\n    return this._data.value;\n  }\n  set data(data) {\n    data = Array.isArray(data) ? data : [];\n    this._data.next(data);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(data);\n    }\n  }\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter() {\n    return this._filter.value;\n  }\n  set filter(filter) {\n    this._filter.next(filter);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(this.data);\n    }\n  }\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort() {\n    return this._sort;\n  }\n  set sort(sort) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  /**\n   * Instance of the paginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the paginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator() {\n    return this._paginator;\n  }\n  set paginator(paginator) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  constructor(initialData = []) {\n    super();\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    this._renderData = new BehaviorSubject([]);\n    /** Stream that emits when a new filter string is set on the data source. */\n    this._filter = new BehaviorSubject('');\n    /** Used to react to internal changes of the paginator that are made by the data source itself. */\n    this._internalPageChanges = new Subject();\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n    this._renderChangesSubscription = null;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n    this.sortingDataAccessor = (data, sortHeaderId) => {\n      const value = data[sortHeaderId];\n      if (_isNumberValue(value)) {\n        const numberValue = Number(value);\n        // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n      }\n      return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n    this.sortData = (data, sort) => {\n      const active = sort.active;\n      const direction = sort.direction;\n      if (!active || direction == '') {\n        return data;\n      }\n      return data.sort((a, b) => {\n        let valueA = this.sortingDataAccessor(a, active);\n        let valueB = this.sortingDataAccessor(b, active);\n        // If there are data in the column that can be converted to a number,\n        // it must be ensured that the rest of the data\n        // is of the same type so as not to order incorrectly.\n        const valueAType = typeof valueA;\n        const valueBType = typeof valueB;\n        if (valueAType !== valueBType) {\n          if (valueAType === 'number') {\n            valueA += '';\n          }\n          if (valueBType === 'number') {\n            valueB += '';\n          }\n        }\n        // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n        // one value exists while the other doesn't. In this case, existing value should come last.\n        // This avoids inconsistent results when comparing values to undefined/null.\n        // If neither value exists, return 0 (equal).\n        let comparatorResult = 0;\n        if (valueA != null && valueB != null) {\n          // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n          if (valueA > valueB) {\n            comparatorResult = 1;\n          } else if (valueA < valueB) {\n            comparatorResult = -1;\n          }\n        } else if (valueA != null) {\n          comparatorResult = 1;\n        } else if (valueB != null) {\n          comparatorResult = -1;\n        }\n        return comparatorResult * (direction == 'asc' ? 1 : -1);\n      });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n    this.filterPredicate = (data, filter) => {\n      // Transform the data into a lowercase string of all property values.\n      const dataStr = Object.keys(data).reduce((currentTerm, key) => {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        return currentTerm + data[key] + '◬';\n      }, '').toLowerCase();\n      // Transform the filter by converting it to lowercase and removing whitespace.\n      const transformedFilter = filter.trim().toLowerCase();\n      return dataStr.indexOf(transformedFilter) != -1;\n    };\n    this._data = new BehaviorSubject(initialData);\n    this._updateChangeSubscription();\n  }\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange = this._sort ? merge(this._sort.sortChange, this._sort.initialized) : of(null);\n    const pageChange = this._paginator ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) : of(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterPredicate function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterPredicate.\n    // May be overridden for customization.\n    this.filteredData = this.filter == null || this.filter === '' ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n    if (this.paginator) {\n      this._updatePaginator(this.filteredData.length);\n    }\n    return this.filteredData;\n  }\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data) {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) {\n      return data;\n    }\n    return this.sortData(data.slice(), this.sort);\n  }\n  /**\n   * Returns a paged slice of the provided data array according to the provided paginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data) {\n    if (!this.paginator) {\n      return data;\n    }\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n      if (!paginator) {\n        return;\n      }\n      paginator.length = filteredDataLength;\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() {\n    if (!this._renderChangesSubscription) {\n      this._updateChangeSubscription();\n    }\n    return this._renderData;\n  }\n  /**\n   * Used by the MatTable. Called when it disconnects from the data source.\n   * @docs-private\n   */\n  disconnect() {\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { LiveTimeSpanDirective } from '../directives/LiveTimeSpan/live-time-span.directive';\n\n@Pipe({\n    name: 'timeSpanPipe',\n    standalone: true\n})\nexport class TimeSpanPipe implements PipeTransform {\n\n    transform(value: number, ...args: unknown[]): string\n    {\n        let timeParts = LiveTimeSpanDirective.SplitMillisecondsIntoParts(value);\n\n        return `${timeParts.Hours.toString().padStart(2, \"0\")}:${timeParts.Minutes.toString().padStart(2, \"0\")}`;\n    }\n\n}\n","import { LiveTimeSpanDirective } from \"../directives/LiveTimeSpan/live-time-span.directive\";\nimport { WorkDayOverview } from \"../entities/HistoryDay\";\n\n/**\n * Hilfsklasse mit Funktionen zu Datum\n */\nexport class DateHelper\n{\n    // #region FormatDate\n    /**\n     * Formatiert das Datum anhand vom String\n     * \n     * @param date Das Datum, das formatiert werden soll\n     * @param format Das Fromat in dem das Datum formartiert werden soll\n     */\n    public static FormatDate(date: Date | null, format: string): string\n    {\n        if (date == null)\n        {\n            return \"\";\n        }\n\n        let result = format;\n\n        if (result.indexOf(\"dd\") != -1)\n        {\n            result = result.replaceAll(\"dd\", date.getDate().toString().padStart(2, \"0\"));\n        }\n\n        if (result.indexOf(\"MM\") != -1)\n        {\n            result = result.replaceAll(\"MM\", (date.getMonth() + 1).toString().padStart(2, \"0\"));\n        }\n\n        if (result.indexOf(\"yyyy\") != -1)\n        {\n            result = result.replaceAll(\"yyyy\", date.getFullYear().toString().padStart(4, \"0\"));\n        }\n\n        if (result.indexOf(\"HH\") != -1)\n        {\n            result = result.replaceAll(\"HH\", date.getHours().toString().padStart(2, \"0\"));\n        }\n\n        if (result.indexOf(\"mm\") != -1)\n        {\n            result = result.replaceAll(\"mm\", date.getMinutes().toString().padStart(2, \"0\"));\n        }\n\n        if (result.indexOf(\"ss\") != -1)\n        {\n            result = result.replaceAll(\"ss\", date.getSeconds().toString().padStart(2, \"0\"));\n        }\n\n        return result;\n    }\n    // #endregion\n}","import { LiveTimeSpanDirective } from \"../directives/LiveTimeSpan/live-time-span.directive\";\nimport { WorkDayOverview } from \"../entities/HistoryDay\";\nimport { DateHelper } from \"./DateHelper\";\n\n/**\n * Hilfsklasse mit Funktionen zum Exportieren\n */\nexport class ExportHelper\n{\n    // #region WorkDayToCsv\n    /**\n     * Wandelt die Arbeitstage in eine CSV-Datei um\n     * \n     * @param workDays Die Arbeitstage die in die CSV-Datei eingefügt werden sollen\n     * @param separater Der Zellenseparator in der CSV-Datei\n     * @returns Gibt den Blob von der CSV-Datei zurück\n     */\n    public static WorkDayToCsv(workDays: Array<WorkDayOverview>, separater: string = ','): Blob\n    {\n        let stringBuilder = new Array<string>(\n            \"Datum\",\n            separater,\n            \"Fahrtweg hin\",\n            separater,\n            \"Arbeitszeit\",\n            separater,\n            \"Fahrtweg zurück\",\n            separater,\n            \"Arbeitsstunden\",\n            separater,\n            \"Fahrtzeitstunden\",\n            \"\\n\"\n        );\n\n        for (let workDay of workDays)\n        {\n            stringBuilder.push(DateHelper.FormatDate(workDay.Date, \"dd.MM.yyyy\"));\n            stringBuilder.push(separater);\n\n            stringBuilder.push(DateHelper.FormatDate(workDay.StartToHome, \"HH:mm\"));\n            stringBuilder.push(\" - \");\n            stringBuilder.push(DateHelper.FormatDate(workDay.EndToWork, \"HH:mm\"));\n            stringBuilder.push(separater);\n\n            stringBuilder.push(DateHelper.FormatDate(workDay.StartWork, \"HH:mm\"));\n            stringBuilder.push(\" - \");\n            stringBuilder.push(DateHelper.FormatDate(workDay.EndWork, \"HH:mm\"));\n            stringBuilder.push(separater);\n\n            stringBuilder.push(DateHelper.FormatDate(workDay.StartToHome, \"HH:mm\"));\n            stringBuilder.push(\" - \");\n            stringBuilder.push(DateHelper.FormatDate(workDay.EndToHome, \"HH:mm\"));\n            stringBuilder.push(separater);\n\n            let workTimeSplit = LiveTimeSpanDirective.SplitMillisecondsIntoParts(workDay.WorkTimeMs);\n            stringBuilder.push(`${workTimeSplit.Hours.toString().padStart(2, \"0\")}:${workTimeSplit.Minutes.toString().padEnd(2, \"0\")}`);\n            stringBuilder.push(separater);\n\n            let transferTimeSplit = LiveTimeSpanDirective.SplitMillisecondsIntoParts(workDay.DriveTimeMs);\n            stringBuilder.push(`${transferTimeSplit.Hours.toString().padStart(2, \"0\")}:${transferTimeSplit.Minutes.toString().padEnd(2, \"0\")}`);\n\n            stringBuilder.push(\"\\n\");\n        }\n\n        return new Blob([stringBuilder.join(\"\")], { type: 'text/csv' });\n    }\n    // #endregion\n}","/**\n * Beinhaltet Funktionen, welche beim Download nützlich sind\n */\nexport class DownloadHelper\n{\n    // #region DownloadFileBlob\n    /**\n     * Öffnet für den Datei-Blob den Speicherdialg/Downloaddialog\n     * \n     * @param fileBlob Der Datei-Blob, welcher gepsichert werden soll\n     * @param displayFileName Der Dateiname unter dem der Blob gespeichert werden soll\n     */\n    public static async DownloadFileBlob(fileBlob: Blob, displayFileName: string): Promise<void>\n    {\n        // Erstellt ein aElement. Nur aElemente können nativ downloaden\n        let aElement = document.createElement(\"a\");\n\n        // Erstellt für den Blob eine lokale temporäre Url\n        let objectUrl = URL.createObjectURL(fileBlob);\n\n        // Weise dem aElement die lokale temporäre Url zu\n        aElement.href = objectUrl;\n\n        // Weise dem aElement dne Namen zu, unter dem die Datei heruntergeladen werden soll\n        aElement.download = displayFileName;\n\n        // this is necessary as link.click() does not work on the latest firefox\n        aElement.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, view: window }));\n\n        // Skip to end of execution queue, to give the click a chance to be processed\n        await new Promise<void>((success, fail) =>\n        {\n            setTimeout(() => success(), 0);\n        });\n\n        // Entferne die lokale temporäre Url wieder. Der bereits aktive Download wird amit nicht abgebrochen.\n        URL.revokeObjectURL(objectUrl);\n\n        // Entferene das aElement aus dem Speicher\n        aElement.remove();\n    }\n    // #endregion\n}","import { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { MatSort, Sort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { DatePipe } from '@angular/common';\nimport { TimeRepositoryService } from '../../services/time-repository/time-repository.service';\nimport { WorkDayOverview } from '../../entities/HistoryDay';\nimport { TimeSpanPipe } from '../../Pipes/time-span.pipe';\nimport { ExportHelper } from '../../Helper/ExportHelper';\nimport { DownloadHelper } from '../../Helper/DownloadHelper';\nimport { DateHelper } from '../../Helper/DateHelper';\n\n@Component({\n    selector: 'app-history',\n    standalone: true,\n    imports: [MatTableModule, MatSortModule, DatePipe, TimeSpanPipe],\n    templateUrl: './history.component.html',\n    styleUrl: './history.component.less'\n})\nexport class HistoryComponent implements AfterViewInit\n{\n    // #region fields\n    /**\n     * Repository für Arbeitszeiten\n     */\n    private readonly timeRepositoryService: TimeRepositoryService;\n    // #endregion\n\n    // #region ctor\n    /**\n     * Initialisiert die Komponente\n     */\n    public constructor(timeRepositoryService: TimeRepositoryService)\n    {\n        this.timeRepositoryService = timeRepositoryService;\n\n        this.DataSource = new MatTableDataSource<WorkDayOverview>();\n\n        this.DisplayedColumns = new Array<string>(\n            \"Date\",\n            \"ToWork\",\n            \"Work\",\n            \"ToHome\",\n            \"WorkTime\",\n            \"DriveTime\",\n            \"Remove\"\n        );\n\n        this.FillDataSource();\n    }\n    // #endregion\n\n    // #region ngAfterViewInit\n    /**\n     * Wird aufgerufen, nach dem die View initialsiert wurde\n     */\n    public ngAfterViewInit()\n    {\n        this.DataSource.sort = this.Sort;\n    }\n    // #endregion\n\n    // #region Sort\n    /**\n     * Container for MatSortables to manage the sort state and provide default sort parameters.\n     */\n    @ViewChild(MatSort) Sort!: MatSort;\n    // #endregion\n\n    // #region DisplayedColumns\n    /**\n     * Array mit den Namen von den Spalten, die angezeigt werden sollen\n     */\n    public DisplayedColumns: Array<string>;\n    // #endregion\n\n    // #region DataSource\n    /**\n     * Die Datenquelle von der Tabelle\n     */\n    public DataSource: MatTableDataSource<WorkDayOverview>;\n    // #endregion\n\n    // #region DeleteWorkDayEntry\n    /**\n     * Löscht den Arbeitstag mit dem angegeben Datum\n     * \n     * @param date Das Datum vom Arbeitstag, der gelöscht werden soll\n     */\n    public async DeleteWorkDayEntry(date: Date): Promise<void>\n    {\n        let dateString = `${date.getDate().toString().padStart(2, \"0\")}.${(date.getMonth() + 1).toString().padStart(2, \"0\")}.${date.getFullYear()}`;\n\n        if (confirm(`Element löschen (${dateString})?`))\n        {\n            await this.timeRepositoryService.DeleteWorkDay(date);\n\n            this.FillDataSource();\n        }\n    }\n    // #endregion\n\n    // #region ExportAsCsv\n    /**\n     * Exportiert die angezeigten Arbeitstage als CSV-Datei (und startet den Download)\n     */\n    public async ExportAsCsv(): Promise<void>\n    {\n        let csvBlob = ExportHelper.WorkDayToCsv(this.DataSource.data);\n\n        let oldestWorkDate: Date | null = null;\n        let latestWorkDate: Date | null = null;\n\n        for (let workDay of this.DataSource.data)\n        {\n            if (oldestWorkDate == null || workDay.Date < <Date>oldestWorkDate)\n            {\n                oldestWorkDate = workDay.Date;\n            }\n\n            if (latestWorkDate == null || workDay.Date > <Date>latestWorkDate)\n            {\n                latestWorkDate = workDay.Date;\n            }\n        }\n\n        await DownloadHelper.DownloadFileBlob(\n            csvBlob,\n            `Arbeitszeiten_${DateHelper.FormatDate(oldestWorkDate, \"yyyy_MM_dd\")}-${DateHelper.FormatDate(latestWorkDate, \"yyyy_MM_dd\")}.csv`\n        );\n    }\n    // #endregion\n\n    // #region FillDataSource\n    /**\n     * Füllt die DatenQuelle von der Tabelle mit den letzten Zeiten\n     */\n    private async FillDataSource(): Promise<void>\n    {\n        let workDays = await this.timeRepositoryService.GetWorkDays(new Date(2000, 1, 1), new Date());\n\n        let historyDays = new Array<WorkDayOverview>();\n\n        for (let workDay of workDays)\n        {\n            historyDays.push(TimeRepositoryService.ConvertWorkDayToHistoryDay(workDay));\n        }\n\n        this.DataSource.data = historyDays;\n    }\n    // #endregion\n}","<div class=\"Header\">\n    <p class=\"Text\">Letzen Arbeitszeiten</p>\n    <button (click)=\"this.ExportAsCsv()\">Export</button>\n</div>\n<table mat-table [dataSource]=\"this.DataSource\" matSort>\n\n    <!-- Date Column -->\n    <ng-container matColumnDef=\"Date\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Datum</th>\n        <td mat-cell *matCellDef=\"let element\">{{element.Date | date:\"dd.MM&nbsp;.yyyy\"}}</td>\n    </ng-container>\n\n    <!-- ToWork Column -->\n    <ng-container matColumnDef=\"ToWork\">\n        <th mat-header-cell *matHeaderCellDef>Fahrtweg</th>\n        <td mat-cell *matCellDef=\"let element\">{{element.StartToWork | date:\"HH:mm\"}} - {{element.EndToWork | date:\"HH:mm\"}}</td>\n    </ng-container>\n\n    <!-- Work Column -->\n    <ng-container matColumnDef=\"Work\">\n        <th mat-header-cell *matHeaderCellDef>Arbeit</th>\n        <td mat-cell *matCellDef=\"let element\">{{element.StartWork | date:\"HH:mm\"}} - {{element.EndWork | date:\"HH:mm\"}}</td>\n    </ng-container>\n\n    <!-- ToHome Column -->\n    <ng-container matColumnDef=\"ToHome\">\n        <th mat-header-cell *matHeaderCellDef>Fahrzeit</th>\n        <td mat-cell *matCellDef=\"let element\">{{element.StartToHome | date:\"HH:mm\"}} - {{element.EndToHome | date:\"HH:mm\"}}</td>\n    </ng-container>\n\n    <!-- WorkTime Column -->\n    <ng-container matColumnDef=\"WorkTime\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Arbeitszeit</th>\n        <td mat-cell *matCellDef=\"let element\">{{element.WorkTimeMs | timeSpanPipe}} h</td>\n    </ng-container>\n\n    <!-- DriveTime Column -->\n    <ng-container matColumnDef=\"DriveTime\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Fahrzeit</th>\n        <td mat-cell *matCellDef=\"let element\">{{element.DriveTimeMs | timeSpanPipe}} h</td>\n    </ng-container>\n\n    <!-- Remove Column -->\n    <ng-container matColumnDef=\"Remove\">\n        <th mat-header-cell *matHeaderCellDef></th>\n        <td mat-cell *matCellDef=\"let element\" (click)=\"this.DeleteWorkDayEntry(element.Date)\">X</td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"this.DisplayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: this.DisplayedColumns;\"></tr>\n</table>","import { Routes } from '@angular/router';\nimport { CurrentWorkComponent } from './components/current-work/current-work.component';\nimport { HistoryComponent } from './components/history/history.component';\n\nexport const routes: Routes = [\n    { path: \"Current\", component: CurrentWorkComponent },\n    { path: \"History\", component: HistoryComponent },\n    { path: \"**\", redirectTo: \"Current\" }\n];","/**\n * @license Angular v17.3.12\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgZone, ApplicationRef, makeEnvironmentProviders, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\nfunction errorObservable(message) {\n  return defer(() => throwError(new Error(message)));\n}\n/**\n * @publicApi\n */\nclass NgswCommChannel {\n  constructor(serviceWorker) {\n    this.serviceWorker = serviceWorker;\n    if (!serviceWorker) {\n      this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n    } else {\n      const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n      const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n      const currentController = defer(() => of(serviceWorker.controller));\n      const controllerWithChanges = concat(currentController, controllerChanges);\n      this.worker = controllerWithChanges.pipe(filter(c => !!c));\n      this.registration = this.worker.pipe(switchMap(() => serviceWorker.getRegistration()));\n      const rawEvents = fromEvent(serviceWorker, 'message');\n      const rawEventPayload = rawEvents.pipe(map(event => event.data));\n      const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n      const events = eventsUnconnected.pipe(publish());\n      events.connect();\n      this.events = events;\n    }\n  }\n  postMessage(action, payload) {\n    return this.worker.pipe(take(1), tap(sw => {\n      sw.postMessage({\n        action,\n        ...payload\n      });\n    })).toPromise().then(() => undefined);\n  }\n  postMessageWithOperation(type, payload, operationNonce) {\n    const waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\n    const postMessage = this.postMessage(type, payload);\n    return Promise.all([postMessage, waitForOperationCompleted]).then(([, result]) => result);\n  }\n  generateNonce() {\n    return Math.round(Math.random() * 10000000);\n  }\n  eventsOfType(type) {\n    let filterFn;\n    if (typeof type === 'string') {\n      filterFn = event => event.type === type;\n    } else {\n      filterFn = event => type.includes(event.type);\n    }\n    return this.events.pipe(filter(filterFn));\n  }\n  nextEventOfType(type) {\n    return this.eventsOfType(type).pipe(take(1));\n  }\n  waitForOperationCompleted(nonce) {\n    return this.eventsOfType('OPERATION_COMPLETED').pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n      if (event.result !== undefined) {\n        return event.result;\n      }\n      throw new Error(event.error);\n    })).toPromise();\n  }\n  get isEnabled() {\n    return !!this.serviceWorker;\n  }\n}\n\n/**\n * Subscribe and listen to\n * [Web Push\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\n * Angular Service Worker.\n *\n * @usageNotes\n *\n * You can inject a `SwPush` instance into any component or service\n * as a dependency.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\n * The call returns a `Promise` with a new\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n * instance.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * A request is rejected if the user denies permission, or if the browser\n * blocks or does not support the Push API or ServiceWorkers.\n * Check `SwPush.isEnabled` to confirm status.\n *\n * Invoke Push Notifications by pushing a message with the following payload.\n *\n * ```ts\n * {\n *   \"notification\": {\n *     \"actions\": NotificationAction[],\n *     \"badge\": USVString,\n *     \"body\": DOMString,\n *     \"data\": any,\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\n *     \"icon\": USVString,\n *     \"image\": USVString,\n *     \"lang\": DOMString,\n *     \"renotify\": boolean,\n *     \"requireInteraction\": boolean,\n *     \"silent\": boolean,\n *     \"tag\": DOMString,\n *     \"timestamp\": DOMTimeStamp,\n *     \"title\": DOMString,\n *     \"vibrate\": number[]\n *   }\n * }\n * ```\n *\n * Only `title` is required. See `Notification`\n * [instance\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\n *\n * While the subscription is active, Service Worker listens for\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\n * occurrences and creates\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\n * instances in response.\n *\n * Unsubscribe using `SwPush.unsubscribe()`.\n *\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\n * clicks on a notification. For example:\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\n * header=\"app.component.ts\"></code-example>\n *\n * You can read more on handling notification clicks in the [Service worker notifications\n * guide](guide/service-worker-notifications).\n *\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n *\n * @publicApi\n */\nlet SwPush = /*#__PURE__*/(() => {\n  class SwPush {\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     */\n    get isEnabled() {\n      return this.sw.isEnabled;\n    }\n    constructor(sw) {\n      this.sw = sw;\n      this.pushManager = null;\n      this.subscriptionChanges = new Subject();\n      if (!sw.isEnabled) {\n        this.messages = NEVER;\n        this.notificationClicks = NEVER;\n        this.subscription = NEVER;\n        return;\n      }\n      this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n      this.notificationClicks = this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map(message => message.data));\n      this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n      const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n      this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    /**\n     * Subscribes to Web Push Notifications,\n     * after requesting and receiving user permission.\n     *\n     * @param options An object containing the `serverPublicKey` string.\n     * @returns A Promise that resolves to the new subscription object.\n     */\n    requestSubscription(options) {\n      if (!this.sw.isEnabled || this.pushManager === null) {\n        return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n      }\n      const pushOptions = {\n        userVisibleOnly: true\n      };\n      let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n      let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n      for (let i = 0; i < key.length; i++) {\n        applicationServerKey[i] = key.charCodeAt(i);\n      }\n      pushOptions.applicationServerKey = applicationServerKey;\n      return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1)).toPromise().then(sub => {\n        this.subscriptionChanges.next(sub);\n        return sub;\n      });\n    }\n    /**\n     * Unsubscribes from Service Worker push notifications.\n     *\n     * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\n     *          active subscription or the unsubscribe operation fails.\n     */\n    unsubscribe() {\n      if (!this.sw.isEnabled) {\n        return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n      }\n      const doUnsubscribe = sub => {\n        if (sub === null) {\n          throw new Error('Not subscribed to push notifications.');\n        }\n        return sub.unsubscribe().then(success => {\n          if (!success) {\n            throw new Error('Unsubscribe failed!');\n          }\n          this.subscriptionChanges.next(null);\n        });\n      };\n      return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n    }\n    decodeBase64(input) {\n      return atob(input);\n    }\n    static {\n      this.ɵfac = function SwPush_Factory(t) {\n        return new (t || SwPush)(i0.ɵɵinject(NgswCommChannel));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: SwPush,\n        factory: SwPush.ɵfac\n      });\n    }\n  }\n  return SwPush;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @see {@link guide/service-worker-communications Service worker communication guide}\n *\n * @publicApi\n */\nlet SwUpdate = /*#__PURE__*/(() => {\n  class SwUpdate {\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     */\n    get isEnabled() {\n      return this.sw.isEnabled;\n    }\n    constructor(sw) {\n      this.sw = sw;\n      if (!sw.isEnabled) {\n        this.versionUpdates = NEVER;\n        this.unrecoverable = NEVER;\n        return;\n      }\n      this.versionUpdates = this.sw.eventsOfType(['VERSION_DETECTED', 'VERSION_INSTALLATION_FAILED', 'VERSION_READY', 'NO_NEW_VERSION_DETECTED']);\n      this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\n    }\n    /**\n     * Checks for an update and waits until the new version is downloaded from the server and ready\n     * for activation.\n     *\n     * @returns a promise that\n     * - resolves to `true` if a new version was found and is ready to be activated.\n     * - resolves to `false` if no new version was found\n     * - rejects if any error occurs\n     */\n    checkForUpdate() {\n      if (!this.sw.isEnabled) {\n        return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n      }\n      const nonce = this.sw.generateNonce();\n      return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', {\n        nonce\n      }, nonce);\n    }\n    /**\n     * Updates the current client (i.e. browser tab) to the latest version that is ready for\n     * activation.\n     *\n     * In most cases, you should not use this method and instead should update a client by reloading\n     * the page.\n     *\n     * <div class=\"alert is-important\">\n     *\n     * Updating a client without reloading can easily result in a broken application due to a version\n     * mismatch between the [application shell](guide/glossary#app-shell) and other page resources,\n     * such as [lazy-loaded chunks](guide/glossary#lazy-loading), whose filenames may change between\n     * versions.\n     *\n     * Only use this method, if you are certain it is safe for your specific use case.\n     *\n     * </div>\n     *\n     * @returns a promise that\n     *  - resolves to `true` if an update was activated successfully\n     *  - resolves to `false` if no update was available (for example, the client was already on the\n     *    latest version).\n     *  - rejects if any error occurs\n     */\n    activateUpdate() {\n      if (!this.sw.isEnabled) {\n        return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n      }\n      const nonce = this.sw.generateNonce();\n      return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', {\n        nonce\n      }, nonce);\n    }\n    static {\n      this.ɵfac = function SwUpdate_Factory(t) {\n        return new (t || SwUpdate)(i0.ɵɵinject(NgswCommChannel));\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: SwUpdate,\n        factory: SwUpdate.ɵfac\n      });\n    }\n  }\n  return SwUpdate;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SCRIPT = /*#__PURE__*/new InjectionToken(ngDevMode ? 'NGSW_REGISTER_SCRIPT' : '');\nfunction ngswAppInitializer(injector, script, options, platformId) {\n  return () => {\n    if (!(isPlatformBrowser(platformId) && 'serviceWorker' in navigator && options.enabled !== false)) {\n      return;\n    }\n    // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n    // becomes active. This allows the SW to initialize itself even if there is no application\n    // traffic.\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (navigator.serviceWorker.controller !== null) {\n        navigator.serviceWorker.controller.postMessage({\n          action: 'INITIALIZE'\n        });\n      }\n    });\n    let readyToRegister$;\n    if (typeof options.registrationStrategy === 'function') {\n      readyToRegister$ = options.registrationStrategy();\n    } else {\n      const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable:30000').split(':');\n      switch (strategy) {\n        case 'registerImmediately':\n          readyToRegister$ = of(null);\n          break;\n        case 'registerWithDelay':\n          readyToRegister$ = delayWithTimeout(+args[0] || 0);\n          break;\n        case 'registerWhenStable':\n          readyToRegister$ = !args[0] ? whenStable(injector) : merge(whenStable(injector), delayWithTimeout(+args[0]));\n          break;\n        default:\n          // Unknown strategy.\n          throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n      }\n    }\n    // Don't return anything to avoid blocking the application until the SW is registered.\n    // Also, run outside the Angular zone to avoid preventing the app from stabilizing (especially\n    // given that some registration strategies wait for the app to stabilize).\n    // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n    const ngZone = injector.get(NgZone);\n    ngZone.runOutsideAngular(() => readyToRegister$.pipe(take(1)).subscribe(() => navigator.serviceWorker.register(script, {\n      scope: options.scope\n    }).catch(err => console.error('Service worker registration failed with:', err))));\n  };\n}\nfunction delayWithTimeout(timeout) {\n  return of(null).pipe(delay(timeout));\n}\nfunction whenStable(injector) {\n  const appRef = injector.get(ApplicationRef);\n  return appRef.isStable.pipe(filter(stable => stable));\n}\nfunction ngswCommChannelFactory(opts, platformId) {\n  return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker : undefined);\n}\n/**\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\n * `ServiceWorkerModule.register()`.\n *\n * You can use this token to define a provider that generates the registration options at runtime,\n * for example via a function call:\n *\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\n *     header=\"app.module.ts\"}\n *\n * @publicApi\n */\nclass SwRegistrationOptions {}\n/**\n * @publicApi\n *\n * Sets up providers to register the given Angular Service Worker script.\n *\n * If `enabled` is set to `false` in the given options, the module will behave as if service\n * workers are not supported by the browser, and the service worker will not be registered.\n *\n * Example usage:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideServiceWorker('ngsw-worker.js')\n *   ],\n * });\n * ```\n */\nfunction provideServiceWorker(script, options = {}) {\n  return makeEnvironmentProviders([SwPush, SwUpdate, {\n    provide: SCRIPT,\n    useValue: script\n  }, {\n    provide: SwRegistrationOptions,\n    useValue: options\n  }, {\n    provide: NgswCommChannel,\n    useFactory: ngswCommChannelFactory,\n    deps: [SwRegistrationOptions, PLATFORM_ID]\n  }, {\n    provide: APP_INITIALIZER,\n    useFactory: ngswAppInitializer,\n    deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n    multi: true\n  }]);\n}\n\n/**\n * @publicApi\n */\nlet ServiceWorkerModule = /*#__PURE__*/(() => {\n  class ServiceWorkerModule {\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     */\n    static register(script, options = {}) {\n      return {\n        ngModule: ServiceWorkerModule,\n        providers: [provideServiceWorker(script, options)]\n      };\n    }\n    static {\n      this.ɵfac = function ServiceWorkerModule_Factory(t) {\n        return new (t || ServiceWorkerModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: ServiceWorkerModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        providers: [SwPush, SwUpdate]\n      });\n    }\n  }\n  return ServiceWorkerModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate, provideServiceWorker };\n","/**\n * @license Angular v17.3.12\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ɵChangeDetectionScheduler, ɵRuntimeError, Injectable, ɵperformanceMarkFeature, makeEnvironmentProviders, RendererFactory2, NgZone, ANIMATION_MODULE_TYPE } from '@angular/core';\nimport { ɵDomRendererFactory2 } from '@angular/platform-browser';\nconst ANIMATION_PREFIX = '@';\nlet AsyncAnimationRendererFactory = /*#__PURE__*/(() => {\n  class AsyncAnimationRendererFactory {\n    /**\n     *\n     * @param moduleImpl allows to provide a mock implmentation (or will load the animation module)\n     */\n    constructor(doc, delegate, zone, animationType, moduleImpl) {\n      this.doc = doc;\n      this.delegate = delegate;\n      this.zone = zone;\n      this.animationType = animationType;\n      this.moduleImpl = moduleImpl;\n      this._rendererFactoryPromise = null;\n      this.scheduler = inject(ɵChangeDetectionScheduler, {\n        optional: true\n      });\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n      // When the root view is removed, the renderer defers the actual work to the\n      // `TransitionAnimationEngine` to do this, and the `TransitionAnimationEngine` doesn't actually\n      // remove the DOM node, but just calls `markElementAsRemoved()`. The actual DOM node is not\n      // removed until `TransitionAnimationEngine` \"flushes\".\n      // Note: we already flush on destroy within the `InjectableAnimationEngine`. The injectable\n      // engine is not provided when async animations are used.\n      this._engine?.flush();\n    }\n    /**\n     * @internal\n     */\n    loadImpl() {\n      const moduleImpl = this.moduleImpl ?? import('@angular/animations/browser');\n      return moduleImpl.catch(e => {\n        throw new ɵRuntimeError(5300 /* RuntimeErrorCode.ANIMATION_RENDERER_ASYNC_LOADING_FAILURE */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Async loading for animations package was ' + 'enabled, but loading failed. Angular falls back to using regular rendering. ' + 'No animations will be displayed and their styles won\\'t be applied.');\n      }).then(({\n        ɵcreateEngine,\n        ɵAnimationRendererFactory\n      }) => {\n        // We can't create the renderer yet because we might need the hostElement and the type\n        // Both are provided in createRenderer().\n        this._engine = ɵcreateEngine(this.animationType, this.doc, this.scheduler);\n        const rendererFactory = new ɵAnimationRendererFactory(this.delegate, this._engine, this.zone);\n        this.delegate = rendererFactory;\n        return rendererFactory;\n      });\n    }\n    /**\n     * This method is delegating the renderer creation to the factories.\n     * It uses default factory while the animation factory isn't loaded\n     * and will rely on the animation factory once it is loaded.\n     *\n     * Calling this method will trigger as side effect the loading of the animation module\n     * if the renderered component uses animations.\n     */\n    createRenderer(hostElement, rendererType) {\n      const renderer = this.delegate.createRenderer(hostElement, rendererType);\n      if (renderer.ɵtype === 0 /* AnimationRendererType.Regular */) {\n        // The factory is already loaded, this is an animation renderer\n        return renderer;\n      }\n      // We need to prevent the DomRenderer to throw an error because of synthetic properties\n      if (typeof renderer.throwOnSyntheticProps === 'boolean') {\n        renderer.throwOnSyntheticProps = false;\n      }\n      // Using a dynamic renderer to switch the renderer implementation once the module is loaded.\n      const dynamicRenderer = new DynamicDelegationRenderer(renderer);\n      // Kick off the module loading if the component uses animations but the module hasn't been\n      // loaded yet.\n      if (rendererType?.data?.['animation'] && !this._rendererFactoryPromise) {\n        this._rendererFactoryPromise = this.loadImpl();\n      }\n      this._rendererFactoryPromise?.then(animationRendererFactory => {\n        const animationRenderer = animationRendererFactory.createRenderer(hostElement, rendererType);\n        dynamicRenderer.use(animationRenderer);\n      }).catch(e => {\n        // Permanently use regular renderer when loading fails.\n        dynamicRenderer.use(renderer);\n      });\n      return dynamicRenderer;\n    }\n    begin() {\n      this.delegate.begin?.();\n    }\n    end() {\n      this.delegate.end?.();\n    }\n    whenRenderingDone() {\n      return this.delegate.whenRenderingDone?.() ?? Promise.resolve();\n    }\n    static {\n      this.ɵfac = function AsyncAnimationRendererFactory_Factory(t) {\n        i0.ɵɵinvalidFactory();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: AsyncAnimationRendererFactory,\n        factory: AsyncAnimationRendererFactory.ɵfac\n      });\n    }\n  }\n  return AsyncAnimationRendererFactory;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The class allows to dynamicly switch between different renderer implementations\n * by changing the delegate renderer.\n */\nclass DynamicDelegationRenderer {\n  constructor(delegate) {\n    this.delegate = delegate;\n    // List of callbacks that need to be replayed on the animation renderer once its loaded\n    this.replay = [];\n    this.ɵtype = 1 /* AnimationRendererType.Delegated */;\n  }\n  use(impl) {\n    this.delegate = impl;\n    if (this.replay !== null) {\n      // Replay queued actions using the animation renderer to apply\n      // all events and properties collected while loading was in progress.\n      for (const fn of this.replay) {\n        fn(impl);\n      }\n      // Set to `null` to indicate that the queue was processed\n      // and we no longer need to collect events and properties.\n      this.replay = null;\n    }\n  }\n  get data() {\n    return this.delegate.data;\n  }\n  destroy() {\n    this.replay = null;\n    this.delegate.destroy();\n  }\n  createElement(name, namespace) {\n    return this.delegate.createElement(name, namespace);\n  }\n  createComment(value) {\n    return this.delegate.createComment(value);\n  }\n  createText(value) {\n    return this.delegate.createText(value);\n  }\n  get destroyNode() {\n    return this.delegate.destroyNode;\n  }\n  appendChild(parent, newChild) {\n    this.delegate.appendChild(parent, newChild);\n  }\n  insertBefore(parent, newChild, refChild, isMove) {\n    this.delegate.insertBefore(parent, newChild, refChild, isMove);\n  }\n  removeChild(parent, oldChild, isHostElement) {\n    this.delegate.removeChild(parent, oldChild, isHostElement);\n  }\n  selectRootElement(selectorOrNode, preserveContent) {\n    return this.delegate.selectRootElement(selectorOrNode, preserveContent);\n  }\n  parentNode(node) {\n    return this.delegate.parentNode(node);\n  }\n  nextSibling(node) {\n    return this.delegate.nextSibling(node);\n  }\n  setAttribute(el, name, value, namespace) {\n    this.delegate.setAttribute(el, name, value, namespace);\n  }\n  removeAttribute(el, name, namespace) {\n    this.delegate.removeAttribute(el, name, namespace);\n  }\n  addClass(el, name) {\n    this.delegate.addClass(el, name);\n  }\n  removeClass(el, name) {\n    this.delegate.removeClass(el, name);\n  }\n  setStyle(el, style, value, flags) {\n    this.delegate.setStyle(el, style, value, flags);\n  }\n  removeStyle(el, style, flags) {\n    this.delegate.removeStyle(el, style, flags);\n  }\n  setProperty(el, name, value) {\n    // We need to keep track of animation properties set on default renderer\n    // So we can also set them also on the animation renderer\n    if (this.shouldReplay(name)) {\n      this.replay.push(renderer => renderer.setProperty(el, name, value));\n    }\n    this.delegate.setProperty(el, name, value);\n  }\n  setValue(node, value) {\n    this.delegate.setValue(node, value);\n  }\n  listen(target, eventName, callback) {\n    // We need to keep track of animation events registred by the default renderer\n    // So we can also register them against the animation renderer\n    if (this.shouldReplay(eventName)) {\n      this.replay.push(renderer => renderer.listen(target, eventName, callback));\n    }\n    return this.delegate.listen(target, eventName, callback);\n  }\n  shouldReplay(propOrEventName) {\n    //`null` indicates that we no longer need to collect events and properties\n    return this.replay !== null && propOrEventName.startsWith(ANIMATION_PREFIX);\n  }\n}\n\n/**\n * Returns the set of [dependency-injection providers](guide/glossary#provider)\n * to enable animations in an application. See [animations guide](guide/animations)\n * to learn more about animations in Angular.\n *\n * When you use this function instead of the eager `provideAnimations()`, animations won't be\n * renderered until the renderer is loaded.\n *\n * @usageNotes\n *\n * The function is useful when you want to enable animations in an application\n * bootstrapped using the `bootstrapApplication` function. In this scenario there\n * is no need to import the `BrowserAnimationsModule` NgModule at all, just add\n * providers returned by this function to the `providers` list as show below.\n *\n * ```typescript\n * bootstrapApplication(RootComponent, {\n *   providers: [\n *     provideAnimationsAsync()\n *   ]\n * });\n * ```\n *\n * @param type pass `'noop'` as argument to disable animations.\n *\n * @publicApi\n * @developerPreview\n */\nfunction provideAnimationsAsync(type = 'animations') {\n  ɵperformanceMarkFeature('NgAsyncAnimations');\n  return makeEnvironmentProviders([{\n    provide: RendererFactory2,\n    useFactory: (doc, renderer, zone) => {\n      return new AsyncAnimationRendererFactory(doc, renderer, zone, type);\n    },\n    deps: [DOCUMENT, ɵDomRendererFactory2, NgZone]\n  }, {\n    provide: ANIMATION_MODULE_TYPE,\n    useValue: type === 'noop' ? 'NoopAnimations' : 'BrowserAnimations'\n  }]);\n}\n\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { provideAnimationsAsync, AsyncAnimationRendererFactory as ɵAsyncAnimationRendererFactory };\n","import { ApplicationConfig, isDevMode } from '@angular/core';\nimport { provideRouter, withHashLocation } from '@angular/router';\n\nimport { routes } from './app.routes';\nimport { provideServiceWorker } from '@angular/service-worker';\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\n\nexport const appConfig: ApplicationConfig = {\n    providers: [\n        provideRouter(routes, withHashLocation()), \n        provideServiceWorker(\n            'ngsw-worker.js', \n            {\n                enabled: !isDevMode(),\n                registrationStrategy: 'registerWhenStable:30000'\n            }\n        ), provideAnimationsAsync()\n    ]\n};\n","import { Component } from '@angular/core';\nimport { NavigationEnd, Router, RouterOutlet } from '@angular/router';\n\n/**\n * Die Haupt-Komponente\n */\n@Component({\n    selector: 'app-root',\n    standalone: true,\n    imports: [RouterOutlet],\n    templateUrl: './app.component.html',\n    styleUrl: './app.component.less'\n})\nexport class AppComponent\n{\n    public constructor(router: Router)\n    {\n        this.CurrentTab = \"Current\";\n\n        router.events.subscribe(\n            (event) => {\n                if (event instanceof NavigationEnd)\n                {\n                    if (event.url.indexOf(\"Current\") !== -1)\n                    {\n                        this.CurrentTab = \"Current\";\n                    }\n                    else if (event.url.indexOf(\"History\") !== -1)\n                    {\n                        this.CurrentTab = \"History\";\n                    }\n                }\n            }\n        );\n\n    }\n\n    public CurrentTab: string;\n}","<div class=\"TabBar\">\n    <a href=\"#/Current\">\n        <div [class.Active]=\"this.CurrentTab == 'Current'\">Current</div>\n    </a>\n    <a href=\"#/History\">\n        <div [class.Active]=\"this.CurrentTab == 'History'\">History</div>\n    </a>\n</div>\n<div class=\"Body\">\n    <router-outlet />\n</div>","import { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { AppComponent } from './app/app.component';\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) => console.error(err));\n"],"mappings":"u+CAkBA,IAAMA,GAAN,cAAuCC,EAAY,CACjD,aAAc,CACZ,MAAM,GAAG,SAAS,EAClB,KAAK,kBAAoB,EAC3B,CACF,EASMC,GAAN,MAAMC,UAA0BH,EAAyB,CACvD,OAAO,aAAc,CACnBI,GAAmB,IAAID,CAAmB,CAC5C,CACA,YAAYE,EAAIC,EAAKC,EAAU,CAC7B,OAAAF,EAAG,iBAAiBC,EAAKC,CAAQ,EAC1B,IAAM,CACXF,EAAG,oBAAoBC,EAAKC,CAAQ,CACtC,CACF,CACA,cAAcF,EAAIC,EAAK,CACrBD,EAAG,cAAcC,CAAG,CACtB,CACA,OAAOE,EAAM,CACPA,EAAK,YACPA,EAAK,WAAW,YAAYA,CAAI,CAEpC,CACA,cAAcC,EAASC,EAAK,CAC1B,OAAAA,EAAMA,GAAO,KAAK,mBAAmB,EAC9BA,EAAI,cAAcD,CAAO,CAClC,CACA,oBAAqB,CACnB,OAAO,SAAS,eAAe,mBAAmB,WAAW,CAC/D,CACA,oBAAqB,CACnB,OAAO,QACT,CACA,cAAcD,EAAM,CAClB,OAAOA,EAAK,WAAa,KAAK,YAChC,CACA,aAAaA,EAAM,CACjB,OAAOA,aAAgB,gBACzB,CAEA,qBAAqBE,EAAKC,EAAQ,CAChC,OAAIA,IAAW,SACN,OAELA,IAAW,WACND,EAELC,IAAW,OACND,EAAI,KAEN,IACT,CACA,YAAYA,EAAK,CACf,IAAME,EAAOC,GAAmB,EAChC,OAAOD,GAAQ,KAAO,KAAOE,GAAaF,CAAI,CAChD,CACA,kBAAmB,CACjBG,GAAc,IAChB,CACA,cAAe,CACb,OAAO,OAAO,UAAU,SAC1B,CACA,UAAUC,EAAM,CACd,OAAOC,GAAkB,SAAS,OAAQD,CAAI,CAChD,CACF,EACID,GAAc,KAClB,SAASF,IAAqB,CAC5B,OAAAE,GAAcA,IAAe,SAAS,cAAc,MAAM,EACnDA,GAAcA,GAAY,aAAa,MAAM,EAAI,IAC1D,CACA,SAASD,GAAaI,EAAK,CAGzB,OAAO,IAAI,IAAIA,EAAK,SAAS,OAAO,EAAE,QACxC,CAkDA,IAAIC,IAA2B,IAAM,CACnC,MAAMA,CAAW,CACf,OAAQ,CACN,OAAO,IAAI,cACb,CACA,MAAO,CACL,KAAK,UAAO,SAA4B,EAAG,CACzC,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOD,EACP,QAASA,EAAW,SACtB,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAUGE,GAAqC,IAAIC,EAAmD,EAAE,EAOhGC,IAA6B,IAAM,CACrC,MAAMA,CAAa,CAIjB,YAAYC,EAASC,EAAO,CAC1B,KAAK,MAAQA,EACb,KAAK,mBAAqB,IAAI,IAC9BD,EAAQ,QAAQE,GAAU,CACxBA,EAAO,QAAU,IACnB,CAAC,EACD,KAAK,SAAWF,EAAQ,MAAM,EAAE,QAAQ,CAC1C,CAUA,iBAAiBG,EAASC,EAAWC,EAAS,CAE5C,OADe,KAAK,eAAeD,CAAS,EAC9B,iBAAiBD,EAASC,EAAWC,CAAO,CAC5D,CAIA,SAAU,CACR,OAAO,KAAK,KACd,CAEA,eAAeD,EAAW,CACxB,IAAIF,EAAS,KAAK,mBAAmB,IAAIE,CAAS,EAClD,GAAIF,EACF,OAAOA,EAIT,GADAA,EADgB,KAAK,SACJ,KAAKA,GAAUA,EAAO,SAASE,CAAS,CAAC,EACtD,CAACF,EACH,MAAM,IAAII,EAAc,KAAsF,EAAoE,EAEpL,YAAK,mBAAmB,IAAIF,EAAWF,CAAM,EACtCA,CACT,CACA,MAAO,CACL,KAAK,UAAO,SAA8B,EAAG,CAC3C,OAAO,IAAK,GAAKH,GAAiBQ,EAASV,EAAqB,EAAMU,EAAYC,CAAM,CAAC,CAC3F,CACF,CACA,MAAO,CACL,KAAK,WAA0BZ,EAAmB,CAChD,MAAOG,EACP,QAASA,EAAa,SACxB,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAYGU,GAAN,KAAyB,CAEvB,YAAYC,EAAM,CAChB,KAAK,KAAOA,CACd,CACF,EAGMC,GAAwB,YAC1BC,IAAiC,IAAM,CACzC,MAAMA,CAAiB,CACrB,YAAYC,EAAKC,EAAOC,EAAOC,EAAa,CAAC,EAAG,CAC9C,KAAK,IAAMH,EACX,KAAK,MAAQC,EACb,KAAK,MAAQC,EACb,KAAK,WAAaC,EAElB,KAAK,SAAW,IAAI,IACpB,KAAK,UAAY,IAAI,IACrB,KAAK,gBAAkB,KAAK,4BAA4B,EACxD,KAAK,iBAAmBC,GAAiBD,CAAU,EACnD,KAAK,eAAe,CACtB,CACA,UAAUE,EAAQ,CAChB,QAAWC,KAASD,EACC,KAAK,iBAAiBC,EAAO,CAAC,IAC9B,GACjB,KAAK,aAAaA,CAAK,CAG7B,CACA,aAAaD,EAAQ,CACnB,QAAWC,KAASD,EACC,KAAK,iBAAiBC,EAAO,EAAE,GAChC,GAChB,KAAK,eAAeA,CAAK,CAG/B,CACA,aAAc,CACZ,IAAMC,EAAkB,KAAK,gBACzBA,IACFA,EAAgB,QAAQC,GAAQA,EAAK,OAAO,CAAC,EAC7CD,EAAgB,MAAM,GAExB,QAAWD,KAAS,KAAK,aAAa,EACpC,KAAK,eAAeA,CAAK,EAE3B,KAAK,eAAe,CACtB,CACA,QAAQG,EAAU,CAChB,KAAK,UAAU,IAAIA,CAAQ,EAC3B,QAAWH,KAAS,KAAK,aAAa,EACpC,KAAK,eAAeG,EAAUH,CAAK,CAEvC,CACA,WAAWG,EAAU,CACnB,KAAK,UAAU,OAAOA,CAAQ,CAChC,CACA,cAAe,CACb,OAAO,KAAK,SAAS,KAAK,CAC5B,CACA,aAAaH,EAAO,CAClB,QAAWI,KAAQ,KAAK,UACtB,KAAK,eAAeA,EAAMJ,CAAK,CAEnC,CACA,eAAeA,EAAO,CACpB,IAAMK,EAAW,KAAK,SACtBA,EAAS,IAAIL,CAAK,GAAG,UAAU,QAAQE,GAAQA,EAAK,OAAO,CAAC,EAC5DG,EAAS,OAAOL,CAAK,CACvB,CACA,6BAA8B,CAC5B,IAAMD,EAAS,KAAK,IAAI,MAAM,iBAAiB,SAASP,EAAqB,KAAK,KAAK,KAAK,IAAI,EAChG,GAAIO,GAAQ,OAAQ,CAClB,IAAMO,EAAW,IAAI,IACrB,OAAAP,EAAO,QAAQC,GAAS,CAClBA,EAAM,aAAe,MACvBM,EAAS,IAAIN,EAAM,YAAaA,CAAK,CAEzC,CAAC,EACMM,CACT,CACA,OAAO,IACT,CACA,iBAAiBN,EAAOO,EAAO,CAC7B,IAAMC,EAAM,KAAK,SACjB,GAAIA,EAAI,IAAIR,CAAK,EAAG,CAClB,IAAMS,EAAgBD,EAAI,IAAIR,CAAK,EACnC,OAAAS,EAAc,OAASF,EAChBE,EAAc,KACvB,CACA,OAAAD,EAAI,IAAIR,EAAO,CACb,MAAOO,EACP,SAAU,CAAC,CACb,CAAC,EACMA,CACT,CACA,gBAAgBH,EAAMJ,EAAO,CAC3B,IAAMC,EAAkB,KAAK,gBACvBS,EAAUT,GAAiB,IAAID,CAAK,EAC1C,GAAIU,GAAS,aAAeN,EAE1B,OAAAH,EAAgB,OAAOD,CAAK,EAC5BU,EAAQ,gBAAgBlB,EAAqB,EAKtCkB,EACF,CACL,IAAMA,EAAU,KAAK,IAAI,cAAc,OAAO,EAC9C,OAAI,KAAK,OACPA,EAAQ,aAAa,QAAS,KAAK,KAAK,EAE1CA,EAAQ,YAAcV,EAClB,KAAK,kBACPU,EAAQ,aAAalB,GAAuB,KAAK,KAAK,EAExDY,EAAK,YAAYM,CAAO,EACjBA,CACT,CACF,CACA,eAAeN,EAAMJ,EAAO,CAC1B,IAAMU,EAAU,KAAK,gBAAgBN,EAAMJ,CAAK,EAC1CK,EAAW,KAAK,SAChBM,EAAaN,EAAS,IAAIL,CAAK,GAAG,SACpCW,EACFA,EAAW,KAAKD,CAAO,EAEvBL,EAAS,IAAIL,EAAO,CAClB,SAAU,CAACU,CAAO,EAClB,MAAO,CACT,CAAC,CAEL,CACA,gBAAiB,CACf,IAAME,EAAY,KAAK,UACvBA,EAAU,MAAM,EAEhBA,EAAU,IAAI,KAAK,IAAI,IAAI,CAC7B,CACA,MAAO,CACL,KAAK,UAAO,SAAkC,EAAG,CAC/C,OAAO,IAAK,GAAKnB,GAAqBL,EAASyB,CAAQ,EAAMzB,EAAS0B,EAAM,EAAM1B,EAAS2B,GAAW,CAAC,EAAM3B,EAAS4B,EAAW,CAAC,CACpI,CACF,CACA,MAAO,CACL,KAAK,WAA0BvC,EAAmB,CAChD,MAAOgB,EACP,QAASA,EAAiB,SAC5B,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAIGwB,GAAiB,CACrB,IAAO,6BACP,MAAS,+BACT,MAAS,+BACT,IAAO,uCACP,MAAS,gCACT,KAAQ,gCACV,EACMC,GAAkB,UAClBC,GAAqB,SACrBC,GAAY,WAAWD,EAAkB,GACzCE,GAAe,cAAcF,EAAkB,GAI/CG,GAA6C,GAQ7CC,GAAkD,IAAI5C,EAAyD,GAAI,CACvH,WAAY,OACZ,QAAS,IAAM2C,EACjB,CAAC,EACD,SAASE,GAAqBC,EAAkB,CAC9C,OAAOJ,GAAa,QAAQH,GAAiBO,CAAgB,CAC/D,CACA,SAASC,GAAkBD,EAAkB,CAC3C,OAAOL,GAAU,QAAQF,GAAiBO,CAAgB,CAC5D,CACA,SAASE,GAAkBC,EAAQ7B,EAAQ,CACzC,OAAOA,EAAO,IAAI8B,GAAKA,EAAE,QAAQX,GAAiBU,CAAM,CAAC,CAC3D,CACA,IAAIE,IAAoC,IAAM,CAC5C,MAAMA,CAAoB,CACxB,YAAYC,EAAcC,EAAkBrC,EAAOsC,EAA2BvC,EAAKG,EAAYqC,EAAQtC,EAAQ,KAAM,CACnH,KAAK,aAAemC,EACpB,KAAK,iBAAmBC,EACxB,KAAK,MAAQrC,EACb,KAAK,0BAA4BsC,EACjC,KAAK,IAAMvC,EACX,KAAK,WAAaG,EAClB,KAAK,OAASqC,EACd,KAAK,MAAQtC,EACb,KAAK,iBAAmB,IAAI,IAC5B,KAAK,iBAAmBE,GAAiBD,CAAU,EACnD,KAAK,gBAAkB,IAAIsC,GAAoBJ,EAAcrC,EAAKwC,EAAQ,KAAK,gBAAgB,CACjG,CACA,eAAelD,EAASoD,EAAM,CAC5B,GAAI,CAACpD,GAAW,CAACoD,EACf,OAAO,KAAK,gBAEV,KAAK,kBAAoBA,EAAK,gBAAkBC,GAAkB,YAEpED,EAAOE,GAAAC,EAAA,GACFH,GADE,CAEL,cAAeC,GAAkB,QACnC,IAEF,IAAMG,EAAW,KAAK,oBAAoBxD,EAASoD,CAAI,EAGvD,OAAII,aAAoBC,GACtBD,EAAS,YAAYxD,CAAO,EACnBwD,aAAoBE,IAC7BF,EAAS,YAAY,EAEhBA,CACT,CACA,oBAAoBxD,EAASoD,EAAM,CACjC,IAAMO,EAAmB,KAAK,iBAC1BH,EAAWG,EAAiB,IAAIP,EAAK,EAAE,EAC3C,GAAI,CAACI,EAAU,CACb,IAAM9C,EAAM,KAAK,IACXwC,EAAS,KAAK,OACdH,EAAe,KAAK,aACpBC,EAAmB,KAAK,iBACxBC,EAA4B,KAAK,0BACjCW,EAAmB,KAAK,iBAC9B,OAAQR,EAAK,cAAe,CAC1B,KAAKC,GAAkB,SACrBG,EAAW,IAAIC,GAAkCV,EAAcC,EAAkBI,EAAM,KAAK,MAAOH,EAA2BvC,EAAKwC,EAAQU,CAAgB,EAC3J,MACF,KAAKP,GAAkB,UACrB,OAAO,IAAIQ,GAAkBd,EAAcC,EAAkBhD,EAASoD,EAAM1C,EAAKwC,EAAQ,KAAK,MAAOU,CAAgB,EACvH,QACEJ,EAAW,IAAIE,GAA6BX,EAAcC,EAAkBI,EAAMH,EAA2BvC,EAAKwC,EAAQU,CAAgB,EAC1I,KACJ,CACAD,EAAiB,IAAIP,EAAK,GAAII,CAAQ,CACxC,CACA,OAAOA,CACT,CACA,aAAc,CACZ,KAAK,iBAAiB,MAAM,CAC9B,CACA,MAAO,CACL,KAAK,UAAO,SAAqC,EAAG,CAClD,OAAO,IAAK,GAAKV,GAAwB1C,EAASR,EAAY,EAAMQ,EAASK,EAAgB,EAAML,EAAS0B,EAAM,EAAM1B,EAASmC,EAAkC,EAAMnC,EAASyB,CAAQ,EAAMzB,EAAS4B,EAAW,EAAM5B,EAAYC,CAAM,EAAMD,EAAS2B,EAAS,CAAC,CACvQ,CACF,CACA,MAAO,CACL,KAAK,WAA0BtC,EAAmB,CAChD,MAAOqD,EACP,QAASA,EAAoB,SAC/B,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAIGK,GAAN,KAA0B,CACxB,YAAYJ,EAAcrC,EAAKwC,EAAQU,EAAkB,CACvD,KAAK,aAAeb,EACpB,KAAK,IAAMrC,EACX,KAAK,OAASwC,EACd,KAAK,iBAAmBU,EACxB,KAAK,KAAO,OAAO,OAAO,IAAI,EAK9B,KAAK,sBAAwB,GAC7B,KAAK,YAAc,IACrB,CACA,SAAU,CAAC,CACX,cAAcE,EAAMC,EAAW,CAC7B,OAAIA,EAUK,KAAK,IAAI,gBAAgB9B,GAAe8B,CAAS,GAAKA,EAAWD,CAAI,EAEvE,KAAK,IAAI,cAAcA,CAAI,CACpC,CACA,cAAcE,EAAO,CACnB,OAAO,KAAK,IAAI,cAAcA,CAAK,CACrC,CACA,WAAWA,EAAO,CAChB,OAAO,KAAK,IAAI,eAAeA,CAAK,CACtC,CACA,YAAYC,EAAQC,EAAU,EACPC,GAAeF,CAAM,EAAIA,EAAO,QAAUA,GAClD,YAAYC,CAAQ,CACnC,CACA,aAAaD,EAAQC,EAAUE,EAAU,CACnCH,IACmBE,GAAeF,CAAM,EAAIA,EAAO,QAAUA,GAClD,aAAaC,EAAUE,CAAQ,CAEhD,CACA,YAAYH,EAAQI,EAAU,CACxBJ,GACFA,EAAO,YAAYI,CAAQ,CAE/B,CACA,kBAAkBC,EAAgBC,EAAiB,CACjD,IAAIC,EAAK,OAAOF,GAAmB,SAAW,KAAK,IAAI,cAAcA,CAAc,EAAIA,EACvF,GAAI,CAACE,EACH,MAAM,IAAIrE,EAAc,MAAuF,EAA2E,EAE5L,OAAKoE,IACHC,EAAG,YAAc,IAEZA,CACT,CACA,WAAWtD,EAAM,CACf,OAAOA,EAAK,UACd,CACA,YAAYA,EAAM,CAChB,OAAOA,EAAK,WACd,CACA,aAAasD,EAAIV,EAAME,EAAOD,EAAW,CACvC,GAAIA,EAAW,CACbD,EAAOC,EAAY,IAAMD,EACzB,IAAMW,EAAexC,GAAe8B,CAAS,EACzCU,EACFD,EAAG,eAAeC,EAAcX,EAAME,CAAK,EAE3CQ,EAAG,aAAaV,EAAME,CAAK,CAE/B,MACEQ,EAAG,aAAaV,EAAME,CAAK,CAE/B,CACA,gBAAgBQ,EAAIV,EAAMC,EAAW,CACnC,GAAIA,EAAW,CACb,IAAMU,EAAexC,GAAe8B,CAAS,EACzCU,EACFD,EAAG,kBAAkBC,EAAcX,CAAI,EAEvCU,EAAG,gBAAgB,GAAGT,CAAS,IAAID,CAAI,EAAE,CAE7C,MACEU,EAAG,gBAAgBV,CAAI,CAE3B,CACA,SAASU,EAAIV,EAAM,CACjBU,EAAG,UAAU,IAAIV,CAAI,CACvB,CACA,YAAYU,EAAIV,EAAM,CACpBU,EAAG,UAAU,OAAOV,CAAI,CAC1B,CACA,SAASU,EAAIxD,EAAOgD,EAAOU,EAAO,CAC5BA,GAASC,GAAoB,SAAWA,GAAoB,WAC9DH,EAAG,MAAM,YAAYxD,EAAOgD,EAAOU,EAAQC,GAAoB,UAAY,YAAc,EAAE,EAE3FH,EAAG,MAAMxD,CAAK,EAAIgD,CAEtB,CACA,YAAYQ,EAAIxD,EAAO0D,EAAO,CACxBA,EAAQC,GAAoB,SAE9BH,EAAG,MAAM,eAAexD,CAAK,EAE7BwD,EAAG,MAAMxD,CAAK,EAAI,EAEtB,CACA,YAAYwD,EAAIV,EAAME,EAAO,CACvBQ,GAAM,OAIVA,EAAGV,CAAI,EAAIE,EACb,CACA,SAAS9C,EAAM8C,EAAO,CACpB9C,EAAK,UAAY8C,CACnB,CACA,OAAOY,EAAQC,EAAOC,EAAU,CAE9B,GAAI,OAAOF,GAAW,WACpBA,EAASG,GAAQ,EAAE,qBAAqB,KAAK,IAAKH,CAAM,EACpD,CAACA,GACH,MAAM,IAAI,MAAM,4BAA4BA,CAAM,cAAcC,CAAK,EAAE,EAG3E,OAAO,KAAK,aAAa,iBAAiBD,EAAQC,EAAO,KAAK,uBAAuBC,CAAQ,CAAC,CAChG,CACA,uBAAuBE,EAAc,CAKnC,OAAOH,GAAS,CAMd,GAAIA,IAAU,eACZ,OAAOG,GAIoB,KAAK,iBAAmB,KAAK,OAAO,WAAW,IAAMA,EAAaH,CAAK,CAAC,EAAIG,EAAaH,CAAK,KAC9F,IAC3BA,EAAM,eAAe,CAGzB,CACF,CACF,EASA,SAASI,GAAeC,EAAM,CAC5B,OAAOA,EAAK,UAAY,YAAcA,EAAK,UAAY,MACzD,CACA,IAAMC,GAAN,cAAgCC,EAAoB,CAClD,YAAYC,EAAcC,EAAkBC,EAAQC,EAAWC,EAAKC,EAAQC,EAAOC,EAAkB,CACnG,MAAMP,EAAcI,EAAKC,EAAQE,CAAgB,EACjD,KAAK,iBAAmBN,EACxB,KAAK,OAASC,EACd,KAAK,WAAaA,EAAO,aAAa,CACpC,KAAM,MACR,CAAC,EACD,KAAK,iBAAiB,QAAQ,KAAK,UAAU,EAC7C,IAAMM,EAASC,GAAkBN,EAAU,GAAIA,EAAU,MAAM,EAC/D,QAAWO,KAASF,EAAQ,CAC1B,IAAMG,EAAU,SAAS,cAAc,OAAO,EAC1CL,GACFK,EAAQ,aAAa,QAASL,CAAK,EAErCK,EAAQ,YAAcD,EACtB,KAAK,WAAW,YAAYC,CAAO,CACrC,CACF,CACA,iBAAiBd,EAAM,CACrB,OAAOA,IAAS,KAAK,OAAS,KAAK,WAAaA,CAClD,CACA,YAAYe,EAAQC,EAAU,CAC5B,OAAO,MAAM,YAAY,KAAK,iBAAiBD,CAAM,EAAGC,CAAQ,CAClE,CACA,aAAaD,EAAQC,EAAUC,EAAU,CACvC,OAAO,MAAM,aAAa,KAAK,iBAAiBF,CAAM,EAAGC,EAAUC,CAAQ,CAC7E,CACA,YAAYF,EAAQG,EAAU,CAC5B,OAAO,MAAM,YAAY,KAAK,iBAAiBH,CAAM,EAAGG,CAAQ,CAClE,CACA,WAAWlB,EAAM,CACf,OAAO,KAAK,iBAAiB,MAAM,WAAW,KAAK,iBAAiBA,CAAI,CAAC,CAAC,CAC5E,CACA,SAAU,CACR,KAAK,iBAAiB,WAAW,KAAK,UAAU,CAClD,CACF,EACMmB,GAAN,cAA2CjB,EAAoB,CAC7D,YAAYC,EAAcC,EAAkBE,EAAWc,EAA2Bb,EAAKC,EAAQE,EAAkBW,EAAQ,CACvH,MAAMlB,EAAcI,EAAKC,EAAQE,CAAgB,EACjD,KAAK,iBAAmBN,EACxB,KAAK,0BAA4BgB,EACjC,KAAK,OAASC,EAAST,GAAkBS,EAAQf,EAAU,MAAM,EAAIA,EAAU,MACjF,CACA,aAAc,CACZ,KAAK,iBAAiB,UAAU,KAAK,MAAM,CAC7C,CACA,SAAU,CACH,KAAK,2BAGV,KAAK,iBAAiB,aAAa,KAAK,MAAM,CAChD,CACF,EACMgB,GAAN,cAAgDH,EAA6B,CAC3E,YAAYhB,EAAcC,EAAkBE,EAAWiB,EAAOH,EAA2Bb,EAAKC,EAAQE,EAAkB,CACtH,IAAMW,EAASE,EAAQ,IAAMjB,EAAU,GACvC,MAAMH,EAAcC,EAAkBE,EAAWc,EAA2Bb,EAAKC,EAAQE,EAAkBW,CAAM,EACjH,KAAK,YAAcG,GAAqBH,CAAM,EAC9C,KAAK,SAAWI,GAAkBJ,CAAM,CAC1C,CACA,YAAYK,EAAS,CACnB,KAAK,YAAY,EACjB,KAAK,aAAaA,EAAS,KAAK,SAAU,EAAE,CAC9C,CACA,cAAcX,EAAQY,EAAM,CAC1B,IAAMC,EAAK,MAAM,cAAcb,EAAQY,CAAI,EAC3C,aAAM,aAAaC,EAAI,KAAK,YAAa,EAAE,EACpCA,CACT,CACF,EACIC,IAAgC,IAAM,CACxC,MAAMA,UAAwBC,EAAmB,CAC/C,YAAYvB,EAAK,CACf,MAAMA,CAAG,CACX,CAGA,SAASwB,EAAW,CAClB,MAAO,EACT,CACA,iBAAiBL,EAASK,EAAWC,EAAS,CAC5C,OAAAN,EAAQ,iBAAiBK,EAAWC,EAAS,EAAK,EAC3C,IAAM,KAAK,oBAAoBN,EAASK,EAAWC,CAAO,CACnE,CACA,oBAAoBC,EAAQF,EAAWG,EAAU,CAC/C,OAAOD,EAAO,oBAAoBF,EAAWG,CAAQ,CACvD,CACA,MAAO,CACL,KAAK,UAAO,SAAiC,EAAG,CAC9C,OAAO,IAAK,GAAKL,GAAoBM,EAASC,CAAQ,CAAC,CACzD,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOR,EACP,QAASA,EAAgB,SAC3B,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAQGS,GAAgB,CAAC,MAAO,UAAW,OAAQ,OAAO,EAGlDC,GAAU,CACd,KAAM,YACN,IAAM,MACN,OAAQ,SACR,OAAQ,SACR,IAAO,SACP,IAAO,SACP,KAAQ,YACR,MAAS,aACT,GAAM,UACN,KAAQ,YACR,KAAQ,cACR,OAAU,aACV,IAAO,IACT,EAIMC,GAAuB,CAC3B,IAAOC,GAASA,EAAM,OACtB,QAAWA,GAASA,EAAM,QAC1B,KAAQA,GAASA,EAAM,QACvB,MAASA,GAASA,EAAM,QAC1B,EAIIC,IAAgC,IAAM,CACxC,MAAMA,UAAwBZ,EAAmB,CAK/C,YAAYvB,EAAK,CACf,MAAMA,CAAG,CACX,CAMA,SAASwB,EAAW,CAClB,OAAOW,EAAgB,eAAeX,CAAS,GAAK,IACtD,CASA,iBAAiBL,EAASK,EAAWC,EAAS,CAC5C,IAAMW,EAAcD,EAAgB,eAAeX,CAAS,EACtDa,EAAiBF,EAAgB,cAAcC,EAAY,QAAYX,EAAS,KAAK,QAAQ,QAAQ,CAAC,EAC5G,OAAO,KAAK,QAAQ,QAAQ,EAAE,kBAAkB,IACvCa,GAAQ,EAAE,YAAYnB,EAASiB,EAAY,aAAiBC,CAAc,CAClF,CACH,CAUA,OAAO,eAAeb,EAAW,CAC/B,IAAMe,EAAQf,EAAU,YAAY,EAAE,MAAM,GAAG,EACzCgB,EAAeD,EAAM,MAAM,EACjC,GAAIA,EAAM,SAAW,GAAK,EAAEC,IAAiB,WAAaA,IAAiB,SACzE,OAAO,KAET,IAAMC,EAAMN,EAAgB,cAAcI,EAAM,IAAI,CAAC,EACjDG,EAAU,GACVC,EAASJ,EAAM,QAAQ,MAAM,EAajC,GAZII,EAAS,KACXJ,EAAM,OAAOI,EAAQ,CAAC,EACtBD,EAAU,SAEZX,GAAc,QAAQa,GAAgB,CACpC,IAAMC,EAAQN,EAAM,QAAQK,CAAY,EACpCC,EAAQ,KACVN,EAAM,OAAOM,EAAO,CAAC,EACrBH,GAAWE,EAAe,IAE9B,CAAC,EACDF,GAAWD,EACPF,EAAM,QAAU,GAAKE,EAAI,SAAW,EAEtC,OAAO,KAKT,IAAMK,EAAS,CAAC,EAChB,OAAAA,EAAO,aAAkBN,EACzBM,EAAO,QAAaJ,EACbI,CACT,CAWA,OAAO,sBAAsBZ,EAAOa,EAAa,CAC/C,IAAIC,EAAUhB,GAAQE,EAAM,GAAG,GAAKA,EAAM,IACtCO,EAAM,GAMV,OALIM,EAAY,QAAQ,OAAO,EAAI,KACjCC,EAAUd,EAAM,KAChBO,EAAM,SAGJO,GAAW,MAAQ,CAACA,EAAgB,IACxCA,EAAUA,EAAQ,YAAY,EAC1BA,IAAY,IACdA,EAAU,QACDA,IAAY,MACrBA,EAAU,OAEZjB,GAAc,QAAQa,GAAgB,CACpC,GAAIA,IAAiBI,EAAS,CAC5B,IAAMC,EAAiBhB,GAAqBW,CAAY,EACpDK,EAAef,CAAK,IACtBO,GAAOG,EAAe,IAE1B,CACF,CAAC,EACDH,GAAOO,EACAP,IAAQM,EACjB,CAQA,OAAO,cAAcL,EAASjB,EAASyB,EAAM,CAC3C,OAAOhB,GAAS,CACVC,EAAgB,sBAAsBD,EAAOQ,CAAO,GACtDQ,EAAK,WAAW,IAAMzB,EAAQS,CAAK,CAAC,CAExC,CACF,CAEA,OAAO,cAAciB,EAAS,CAC5B,OAAOA,IAAY,MAAQ,SAAWA,CACxC,CACA,MAAO,CACL,KAAK,UAAO,SAAiC,EAAG,CAC9C,OAAO,IAAK,GAAKhB,GAAoBP,EAASC,CAAQ,CAAC,CACzD,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOK,EACP,QAASA,EAAgB,SAC3B,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAgEH,SAASiB,GAAqBC,EAAeC,EAAS,CACpD,OAAOC,GAA2BC,EAAA,CAChC,cAAAH,GACGI,GAAsBH,CAAO,EACjC,CACH,CAgBA,SAASI,GAAsBC,EAAS,CACtC,MAAO,CACL,aAAc,CAAC,GAAGC,GAA0B,GAAID,GAAS,WAAa,CAAC,CAAE,EACzE,kBAAmBE,EACrB,CACF,CAkBA,SAASC,IAAiB,CACxBC,GAAkB,YAAY,CAChC,CACA,SAASC,IAAe,CACtB,OAAO,IAAIC,EACb,CACA,SAASC,IAAY,CAEnB,OAAAC,GAAa,QAAQ,EACd,QACT,CACA,IAAMC,GAAsC,CAAC,CAC3C,QAASC,GACT,SAAUC,EACZ,EAAG,CACD,QAASC,GACT,SAAUT,GACV,MAAO,EACT,EAAG,CACD,QAASU,EACT,WAAYN,GACZ,KAAM,CAAC,CACT,CAAC,EA6BD,IAAMO,GAA2B,CAAC,CAChC,QAASC,GACT,SAAU,MACZ,EAAG,CACD,QAASC,GACT,WAAYC,GACZ,KAAM,CAAC,CACT,EAAG,CACD,QAASC,GACT,SAAUC,GACV,MAAO,GACP,KAAM,CAACC,EAAUC,EAAQC,EAAW,CACtC,EAAG,CACD,QAASJ,GACT,SAAUK,GACV,MAAO,GACP,KAAM,CAACH,CAAQ,CACjB,EAAGI,GAAqBC,GAAkBC,GAAc,CACtD,QAASC,GACT,YAAaH,EACf,EAAG,CACD,QAASI,GACT,SAAUC,GACV,KAAM,CAAC,CACT,EAGI,CAAC,CAAC,EA8ON,IAAIC,IAAsB,IAAM,CAC9B,MAAMA,CAAM,CACV,YAAYC,EAAM,CAChB,KAAK,KAAOA,CACd,CAIA,UAAW,CACT,OAAO,KAAK,KAAK,KACnB,CAKA,SAASC,EAAU,CACjB,KAAK,KAAK,MAAQA,GAAY,EAChC,CACA,MAAO,CACL,KAAK,UAAO,SAAuB,EAAG,CACpC,OAAO,IAAK,GAAKF,GAAUG,EAASC,CAAQ,CAAC,CAC/C,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOL,EACP,QAASA,EAAM,UACf,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAwcH,IAAIM,IAA6B,IAAM,CACrC,MAAMA,CAAa,CACjB,MAAO,CACL,KAAK,UAAO,SAA8B,EAAG,CAC3C,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOD,EACP,QAAS,SAA8B,EAAG,CACxC,IAAI,EAAI,KACR,OAAI,EACF,EAAI,IAAK,GAAKA,GAEd,EAAOE,EAASC,EAAgB,EAE3B,CACT,EACA,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOH,CACT,GAAG,EAICG,IAAiC,IAAM,CACzC,MAAMA,UAAyBH,EAAa,CAC1C,YAAYI,EAAM,CAChB,MAAM,EACN,KAAK,KAAOA,CACd,CACA,SAASC,EAAKC,EAAO,CACnB,GAAIA,GAAS,KAAM,OAAO,KAC1B,OAAQD,EAAK,CACX,KAAKE,GAAgB,KACnB,OAAOD,EACT,KAAKC,GAAgB,KACnB,OAAIC,GAAiCF,EAAO,MAA4B,EAC/DG,GAAiBH,CAAK,EAExBI,GAAe,KAAK,KAAM,OAAOJ,CAAK,CAAC,EAAE,SAAS,EAC3D,KAAKC,GAAgB,MACnB,OAAIC,GAAiCF,EAAO,OAA8B,EACjEG,GAAiBH,CAAK,EAExBA,EACT,KAAKC,GAAgB,OACnB,GAAIC,GAAiCF,EAAO,QAAgC,EAC1E,OAAOG,GAAiBH,CAAK,EAE/B,MAAM,IAAIK,EAAc,KAA6F,EAAqD,EAC5K,KAAKJ,GAAgB,IACnB,OAAIC,GAAiCF,EAAO,KAA0B,EAC7DG,GAAiBH,CAAK,EAExBM,GAAc,OAAON,CAAK,CAAC,EACpC,KAAKC,GAAgB,aACnB,GAAIC,GAAiCF,EAAO,aAA0C,EACpF,OAAOG,GAAiBH,CAAK,EAE/B,MAAM,IAAIK,EAAc,KAAmG,EAAsF,EACnN,QACE,MAAM,IAAIA,EAAc,KAA8F,EAA4E,CACtM,CACF,CACA,wBAAwBL,EAAO,CAC7B,OAAOO,GAA6BP,CAAK,CAC3C,CACA,yBAAyBA,EAAO,CAC9B,OAAOQ,GAA8BR,CAAK,CAC5C,CACA,0BAA0BA,EAAO,CAC/B,OAAOS,GAA+BT,CAAK,CAC7C,CACA,uBAAuBA,EAAO,CAC5B,OAAOU,GAA4BV,CAAK,CAC1C,CACA,+BAA+BA,EAAO,CACpC,OAAOW,GAAoCX,CAAK,CAClD,CACA,MAAO,CACL,KAAK,UAAO,SAAkC,EAAG,CAC/C,OAAO,IAAK,GAAKH,GAAqBD,EAASgB,CAAQ,CAAC,CAC1D,CACF,CACA,MAAO,CACL,KAAK,WAA0BjB,EAAmB,CAChD,MAAOE,EACP,QAASA,EAAiB,UAC1B,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,ECp7DH,IAAMgB,EAAiB,UAMjBC,GAA+B,OAAO,YAAY,EAClDC,GAAN,KAAkB,CAChB,YAAYC,EAAQ,CAClB,KAAK,OAASA,GAAU,CAAC,CAC3B,CACA,IAAIC,EAAM,CACR,OAAO,OAAO,UAAU,eAAe,KAAK,KAAK,OAAQA,CAAI,CAC/D,CACA,IAAIA,EAAM,CACR,GAAI,KAAK,IAAIA,CAAI,EAAG,CAClB,IAAMC,EAAI,KAAK,OAAOD,CAAI,EAC1B,OAAO,MAAM,QAAQC,CAAC,EAAIA,EAAE,CAAC,EAAIA,CACnC,CACA,OAAO,IACT,CACA,OAAOD,EAAM,CACX,GAAI,KAAK,IAAIA,CAAI,EAAG,CAClB,IAAMC,EAAI,KAAK,OAAOD,CAAI,EAC1B,OAAO,MAAM,QAAQC,CAAC,EAAIA,EAAI,CAACA,CAAC,CAClC,CACA,MAAO,CAAC,CACV,CACA,IAAI,MAAO,CACT,OAAO,OAAO,KAAK,KAAK,MAAM,CAChC,CACF,EAQA,SAASC,GAAkBH,EAAQ,CACjC,OAAO,IAAID,GAAYC,CAAM,CAC/B,CAgBA,SAASI,GAAkBC,EAAUC,EAAcC,EAAO,CACxD,IAAMC,EAAQD,EAAM,KAAK,MAAM,GAAG,EAKlC,GAJIC,EAAM,OAASH,EAAS,QAIxBE,EAAM,YAAc,SAAWD,EAAa,YAAY,GAAKE,EAAM,OAASH,EAAS,QAEvF,OAAO,KAET,IAAMI,EAAY,CAAC,EAEnB,QAASC,EAAQ,EAAGA,EAAQF,EAAM,OAAQE,IAAS,CACjD,IAAMC,EAAOH,EAAME,CAAK,EAClBE,EAAUP,EAASK,CAAK,EAE9B,GADoBC,EAAK,WAAW,GAAG,EAErCF,EAAUE,EAAK,UAAU,CAAC,CAAC,EAAIC,UACtBD,IAASC,EAAQ,KAE1B,OAAO,IAEX,CACA,MAAO,CACL,SAAUP,EAAS,MAAM,EAAGG,EAAM,MAAM,EACxC,UAAAC,CACF,CACF,CACA,SAASI,GAAmBC,EAAGC,EAAG,CAChC,GAAID,EAAE,SAAWC,EAAE,OAAQ,MAAO,GAClC,QAASC,EAAI,EAAGA,EAAIF,EAAE,OAAQ,EAAEE,EAC9B,GAAI,CAACC,GAAaH,EAAEE,CAAC,EAAGD,EAAEC,CAAC,CAAC,EAAG,MAAO,GAExC,MAAO,EACT,CACA,SAASC,GAAaH,EAAGC,EAAG,CAG1B,IAAMG,EAAKJ,EAAIK,GAAYL,CAAC,EAAI,OAC1BM,EAAKL,EAAII,GAAYJ,CAAC,EAAI,OAChC,GAAI,CAACG,GAAM,CAACE,GAAMF,EAAG,QAAUE,EAAG,OAChC,MAAO,GAET,IAAIC,EACJ,QAASL,EAAI,EAAGA,EAAIE,EAAG,OAAQF,IAE7B,GADAK,EAAMH,EAAGF,CAAC,EACN,CAACM,GAAoBR,EAAEO,CAAG,EAAGN,EAAEM,CAAG,CAAC,EACrC,MAAO,GAGX,MAAO,EACT,CAIA,SAASF,GAAYI,EAAK,CACxB,MAAO,CAAC,GAAG,OAAO,KAAKA,CAAG,EAAG,GAAG,OAAO,sBAAsBA,CAAG,CAAC,CACnE,CAIA,SAASD,GAAoBR,EAAGC,EAAG,CACjC,GAAI,MAAM,QAAQD,CAAC,GAAK,MAAM,QAAQC,CAAC,EAAG,CACxC,GAAID,EAAE,SAAWC,EAAE,OAAQ,MAAO,GAClC,IAAMS,EAAU,CAAC,GAAGV,CAAC,EAAE,KAAK,EACtBW,EAAU,CAAC,GAAGV,CAAC,EAAE,KAAK,EAC5B,OAAOS,EAAQ,MAAM,CAACE,EAAKhB,IAAUe,EAAQf,CAAK,IAAMgB,CAAG,CAC7D,KACE,QAAOZ,IAAMC,CAEjB,CAIA,SAASY,GAAKb,EAAG,CACf,OAAOA,EAAE,OAAS,EAAIA,EAAEA,EAAE,OAAS,CAAC,EAAI,IAC1C,CACA,SAASc,GAAmBC,EAAO,CACjC,OAAIC,GAAaD,CAAK,EACbA,EAELE,GAAWF,CAAK,EAIXG,GAAK,QAAQ,QAAQH,CAAK,CAAC,EAE7BI,EAAGJ,CAAK,CACjB,CACA,IAAMK,GAAiB,CACrB,MAASC,GACT,OAAUC,EACZ,EACMC,GAAkB,CACtB,MAASC,GACT,OAAUC,GACV,QAAW,IAAM,EACnB,EACA,SAASC,GAAaC,EAAWC,EAAWC,EAAS,CACnD,OAAOT,GAAeS,EAAQ,KAAK,EAAEF,EAAU,KAAMC,EAAU,KAAMC,EAAQ,YAAY,GAAKN,GAAgBM,EAAQ,WAAW,EAAEF,EAAU,YAAaC,EAAU,WAAW,GAAK,EAAEC,EAAQ,WAAa,SAAWF,EAAU,WAAaC,EAAU,SACzP,CACA,SAASJ,GAAYG,EAAWC,EAAW,CAEzC,OAAOzB,GAAawB,EAAWC,CAAS,CAC1C,CACA,SAASP,GAAmBM,EAAWC,EAAWE,EAAc,CAK9D,GAJI,CAACC,GAAUJ,EAAU,SAAUC,EAAU,QAAQ,GACjD,CAACI,GAAkBL,EAAU,SAAUC,EAAU,SAAUE,CAAY,GAGvEH,EAAU,mBAAqBC,EAAU,iBAAkB,MAAO,GACtE,QAAWK,KAAKL,EAAU,SAExB,GADI,CAACD,EAAU,SAASM,CAAC,GACrB,CAACZ,GAAmBM,EAAU,SAASM,CAAC,EAAGL,EAAU,SAASK,CAAC,EAAGH,CAAY,EAAG,MAAO,GAE9F,MAAO,EACT,CACA,SAASL,GAAeE,EAAWC,EAAW,CAC5C,OAAO,OAAO,KAAKA,CAAS,EAAE,QAAU,OAAO,KAAKD,CAAS,EAAE,QAAU,OAAO,KAAKC,CAAS,EAAE,MAAMrB,GAAOC,GAAoBmB,EAAUpB,CAAG,EAAGqB,EAAUrB,CAAG,CAAC,CAAC,CAClK,CACA,SAASe,GAAqBK,EAAWC,EAAWE,EAAc,CAChE,OAAOI,GAA2BP,EAAWC,EAAWA,EAAU,SAAUE,CAAY,CAC1F,CACA,SAASI,GAA2BP,EAAWC,EAAWO,EAAgBL,EAAc,CACtF,GAAIH,EAAU,SAAS,OAASQ,EAAe,OAAQ,CACrD,IAAMC,EAAUT,EAAU,SAAS,MAAM,EAAGQ,EAAe,MAAM,EAGjE,MAFI,GAACJ,GAAUK,EAASD,CAAc,GAClCP,EAAU,YAAY,GACtB,CAACI,GAAkBI,EAASD,EAAgBL,CAAY,EAE9D,SAAWH,EAAU,SAAS,SAAWQ,EAAe,OAAQ,CAE9D,GADI,CAACJ,GAAUJ,EAAU,SAAUQ,CAAc,GAC7C,CAACH,GAAkBL,EAAU,SAAUQ,EAAgBL,CAAY,EAAG,MAAO,GACjF,QAAWG,KAAKL,EAAU,SAExB,GADI,CAACD,EAAU,SAASM,CAAC,GACrB,CAACX,GAAqBK,EAAU,SAASM,CAAC,EAAGL,EAAU,SAASK,CAAC,EAAGH,CAAY,EAClF,MAAO,GAGX,MAAO,EACT,KAAO,CACL,IAAMM,EAAUD,EAAe,MAAM,EAAGR,EAAU,SAAS,MAAM,EAC3DU,EAAOF,EAAe,MAAMR,EAAU,SAAS,MAAM,EAG3D,MAFI,CAACI,GAAUJ,EAAU,SAAUS,CAAO,GACtC,CAACJ,GAAkBL,EAAU,SAAUS,EAASN,CAAY,GAC5D,CAACH,EAAU,SAAS5C,CAAc,EAAU,GACzCmD,GAA2BP,EAAU,SAAS5C,CAAc,EAAG6C,EAAWS,EAAMP,CAAY,CACrG,CACF,CACA,SAASE,GAAkBM,EAAgBH,EAAgBN,EAAS,CAClE,OAAOM,EAAe,MAAM,CAACI,EAAkBrC,IACtCqB,GAAgBM,CAAO,EAAES,EAAepC,CAAC,EAAE,WAAYqC,EAAiB,UAAU,CAC1F,CACH,CA+BA,IAAMC,GAAN,KAAc,CACZ,YACAC,EAAO,IAAIC,EAAgB,CAAC,EAAG,CAAC,CAAC,EACjCC,EAAc,CAAC,EACfC,EAAW,KAAM,CACf,KAAK,KAAOH,EACZ,KAAK,YAAcE,EACnB,KAAK,SAAWC,CAMlB,CACA,IAAI,eAAgB,CAClB,YAAK,iBAAmBvD,GAAkB,KAAK,WAAW,EACnD,KAAK,cACd,CAEA,UAAW,CACT,OAAOwD,GAAmB,UAAU,IAAI,CAC1C,CACF,EAUMH,EAAN,KAAsB,CACpB,YACAnD,EACAuD,EAAU,CACR,KAAK,SAAWvD,EAChB,KAAK,SAAWuD,EAEhB,KAAK,OAAS,KACd,OAAO,OAAOA,CAAQ,EAAE,QAAQ1D,GAAKA,EAAE,OAAS,IAAI,CACtD,CAEA,aAAc,CACZ,OAAO,KAAK,iBAAmB,CACjC,CAEA,IAAI,kBAAmB,CACrB,OAAO,OAAO,KAAK,KAAK,QAAQ,EAAE,MACpC,CAEA,UAAW,CACT,OAAO2D,GAAe,IAAI,CAC5B,CACF,EA2BMC,GAAN,KAAiB,CACf,YACAC,EACAC,EAAY,CACV,KAAK,KAAOD,EACZ,KAAK,WAAaC,CACpB,CACA,IAAI,cAAe,CACjB,YAAK,gBAAkB7D,GAAkB,KAAK,UAAU,EACjD,KAAK,aACd,CAEA,UAAW,CACT,OAAO8D,GAAc,IAAI,CAC3B,CACF,EACA,SAASC,GAAcC,EAAIC,EAAI,CAC7B,OAAOvB,GAAUsB,EAAIC,CAAE,GAAKD,EAAG,MAAM,CAACrD,EAAGE,IAAMC,GAAaH,EAAE,WAAYsD,EAAGpD,CAAC,EAAE,UAAU,CAAC,CAC7F,CACA,SAAS6B,GAAUsB,EAAIC,EAAI,CACzB,OAAID,EAAG,SAAWC,EAAG,OAAe,GAC7BD,EAAG,MAAM,CAACrD,EAAGE,IAAMF,EAAE,OAASsD,EAAGpD,CAAC,EAAE,IAAI,CACjD,CACA,SAASqD,GAAqBzD,EAAS0D,EAAI,CACzC,IAAIC,EAAM,CAAC,EACX,cAAO,QAAQ3D,EAAQ,QAAQ,EAAE,QAAQ,CAAC,CAAC4D,EAAaC,CAAK,IAAM,CAC7DD,IAAgB3E,IAClB0E,EAAMA,EAAI,OAAOD,EAAGG,EAAOD,CAAW,CAAC,EAE3C,CAAC,EACD,OAAO,QAAQ5D,EAAQ,QAAQ,EAAE,QAAQ,CAAC,CAAC4D,EAAaC,CAAK,IAAM,CAC7DD,IAAgB3E,IAClB0E,EAAMA,EAAI,OAAOD,EAAGG,EAAOD,CAAW,CAAC,EAE3C,CAAC,EACMD,CACT,CAaA,IAAIG,IAA8B,IAAM,CACtC,MAAMA,CAAc,CAClB,MAAO,CACL,KAAK,UAAO,SAA+B,EAAG,CAC5C,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOD,EACP,QAAS,IAAa,IAAIE,GAC1B,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOF,CACT,GAAG,EAsBGE,GAAN,KAA2B,CAEzB,MAAMC,EAAK,CACT,IAAMC,EAAI,IAAIC,GAAUF,CAAG,EAC3B,OAAO,IAAIvB,GAAQwB,EAAE,iBAAiB,EAAGA,EAAE,iBAAiB,EAAGA,EAAE,cAAc,CAAC,CAClF,CAEA,UAAUE,EAAM,CACd,IAAMpE,EAAU,IAAIqE,GAAiBD,EAAK,KAAM,EAAI,CAAC,GAC/CE,EAAQC,GAAqBH,EAAK,WAAW,EAC7CtB,EAAW,OAAOsB,EAAK,UAAa,SAAW,IAAII,GAAkBJ,EAAK,QAAQ,CAAC,GAAK,GAC9F,MAAO,GAAGpE,CAAO,GAAGsE,CAAK,GAAGxB,CAAQ,EACtC,CACF,EACMC,GAAkC,IAAIiB,GAC5C,SAASf,GAAejD,EAAS,CAC/B,OAAOA,EAAQ,SAAS,IAAIkE,GAAKb,GAAca,CAAC,CAAC,EAAE,KAAK,GAAG,CAC7D,CACA,SAASG,GAAiBrE,EAAS2C,EAAM,CACvC,GAAI,CAAC3C,EAAQ,YAAY,EACvB,OAAOiD,GAAejD,CAAO,EAE/B,GAAI2C,EAAM,CACR,IAAM8B,EAAUzE,EAAQ,SAASf,CAAc,EAAIoF,GAAiBrE,EAAQ,SAASf,CAAc,EAAG,EAAK,EAAI,GACzG+D,EAAW,CAAC,EAClB,cAAO,QAAQhD,EAAQ,QAAQ,EAAE,QAAQ,CAAC,CAAC0E,EAAGpF,CAAC,IAAM,CAC/CoF,IAAMzF,GACR+D,EAAS,KAAK,GAAG0B,CAAC,IAAIL,GAAiB/E,EAAG,EAAK,CAAC,EAAE,CAEtD,CAAC,EACM0D,EAAS,OAAS,EAAI,GAAGyB,CAAO,IAAIzB,EAAS,KAAK,IAAI,CAAC,IAAMyB,CACtE,KAAO,CACL,IAAMzB,EAAWS,GAAqBzD,EAAS,CAACV,EAAGoF,IAC7CA,IAAMzF,EACD,CAACoF,GAAiBrE,EAAQ,SAASf,CAAc,EAAG,EAAK,CAAC,EAE5D,CAAC,GAAGyF,CAAC,IAAIL,GAAiB/E,EAAG,EAAK,CAAC,EAAE,CAC7C,EAED,OAAI,OAAO,KAAKU,EAAQ,QAAQ,EAAE,SAAW,GAAKA,EAAQ,SAASf,CAAc,GAAK,KAC7E,GAAGgE,GAAejD,CAAO,CAAC,IAAIgD,EAAS,CAAC,CAAC,GAE3C,GAAGC,GAAejD,CAAO,CAAC,KAAKgD,EAAS,KAAK,IAAI,CAAC,GAC3D,CACF,CAOA,SAAS2B,GAAgBC,EAAG,CAC1B,OAAO,mBAAmBA,CAAC,EAAE,QAAQ,OAAQ,GAAG,EAAE,QAAQ,QAAS,GAAG,EAAE,QAAQ,OAAQ,GAAG,EAAE,QAAQ,QAAS,GAAG,CACnH,CAOA,SAASC,GAAeD,EAAG,CACzB,OAAOD,GAAgBC,CAAC,EAAE,QAAQ,QAAS,GAAG,CAChD,CAOA,SAASJ,GAAkBI,EAAG,CAC5B,OAAO,UAAUA,CAAC,CACpB,CAQA,SAASE,GAAiBF,EAAG,CAC3B,OAAOD,GAAgBC,CAAC,EAAE,QAAQ,MAAO,KAAK,EAAE,QAAQ,MAAO,KAAK,EAAE,QAAQ,QAAS,GAAG,CAC5F,CACA,SAASG,GAAOH,EAAG,CACjB,OAAO,mBAAmBA,CAAC,CAC7B,CAGA,SAASI,GAAYJ,EAAG,CACtB,OAAOG,GAAOH,EAAE,QAAQ,MAAO,KAAK,CAAC,CACvC,CACA,SAASvB,GAAcF,EAAM,CAC3B,MAAO,GAAG2B,GAAiB3B,EAAK,IAAI,CAAC,GAAG8B,GAAsB9B,EAAK,UAAU,CAAC,EAChF,CACA,SAAS8B,GAAsB7F,EAAQ,CACrC,OAAO,OAAO,QAAQA,CAAM,EAAE,IAAI,CAAC,CAACqB,EAAKQ,CAAK,IAAM,IAAI6D,GAAiBrE,CAAG,CAAC,IAAIqE,GAAiB7D,CAAK,CAAC,EAAE,EAAE,KAAK,EAAE,CACrH,CACA,SAASsD,GAAqBnF,EAAQ,CACpC,IAAM8F,EAAY,OAAO,QAAQ9F,CAAM,EAAE,IAAI,CAAC,CAACC,EAAM4B,CAAK,IACjD,MAAM,QAAQA,CAAK,EAAIA,EAAM,IAAI3B,GAAK,GAAGuF,GAAexF,CAAI,CAAC,IAAIwF,GAAevF,CAAC,CAAC,EAAE,EAAE,KAAK,GAAG,EAAI,GAAGuF,GAAexF,CAAI,CAAC,IAAIwF,GAAe5D,CAAK,CAAC,EAC1J,EAAE,OAAO2D,GAAKA,CAAC,EAChB,OAAOM,EAAU,OAAS,IAAIA,EAAU,KAAK,GAAG,CAAC,GAAK,EACxD,CACA,IAAMC,GAAa,eACnB,SAASC,GAAcC,EAAK,CAC1B,IAAMC,EAAQD,EAAI,MAAMF,EAAU,EAClC,OAAOG,EAAQA,EAAM,CAAC,EAAI,EAC5B,CACA,IAAMC,GAA0B,gBAChC,SAASC,GAAuBH,EAAK,CACnC,IAAMC,EAAQD,EAAI,MAAME,EAAuB,EAC/C,OAAOD,EAAQA,EAAM,CAAC,EAAI,EAC5B,CACA,IAAMG,GAAiB,YAEvB,SAASC,GAAiBL,EAAK,CAC7B,IAAMC,EAAQD,EAAI,MAAMI,EAAc,EACtC,OAAOH,EAAQA,EAAM,CAAC,EAAI,EAC5B,CACA,IAAMK,GAAuB,UAE7B,SAASC,GAAwBP,EAAK,CACpC,IAAMC,EAAQD,EAAI,MAAMM,EAAoB,EAC5C,OAAOL,EAAQA,EAAM,CAAC,EAAI,EAC5B,CACA,IAAMnB,GAAN,KAAgB,CACd,YAAYF,EAAK,CACf,KAAK,IAAMA,EACX,KAAK,UAAYA,CACnB,CACA,kBAAmB,CAEjB,OADA,KAAK,gBAAgB,GAAG,EACpB,KAAK,YAAc,IAAM,KAAK,eAAe,GAAG,GAAK,KAAK,eAAe,GAAG,EACvE,IAAIrB,EAAgB,CAAC,EAAG,CAAC,CAAC,EAG5B,IAAIA,EAAgB,CAAC,EAAG,KAAK,cAAc,CAAC,CACrD,CACA,kBAAmB,CACjB,IAAMxD,EAAS,CAAC,EAChB,GAAI,KAAK,gBAAgB,GAAG,EAC1B,GACE,KAAK,gBAAgBA,CAAM,QACpB,KAAK,gBAAgB,GAAG,GAEnC,OAAOA,CACT,CACA,eAAgB,CACd,OAAO,KAAK,gBAAgB,GAAG,EAAI,mBAAmB,KAAK,SAAS,EAAI,IAC1E,CACA,eAAgB,CACd,GAAI,KAAK,YAAc,GACrB,MAAO,CAAC,EAEV,KAAK,gBAAgB,GAAG,EACxB,IAAMK,EAAW,CAAC,EAIlB,IAHK,KAAK,eAAe,GAAG,GAC1BA,EAAS,KAAK,KAAK,aAAa,CAAC,EAE5B,KAAK,eAAe,GAAG,GAAK,CAAC,KAAK,eAAe,IAAI,GAAK,CAAC,KAAK,eAAe,IAAI,GACxF,KAAK,QAAQ,GAAG,EAChBA,EAAS,KAAK,KAAK,aAAa,CAAC,EAEnC,IAAIuD,EAAW,CAAC,EACZ,KAAK,eAAe,IAAI,IAC1B,KAAK,QAAQ,GAAG,EAChBA,EAAW,KAAK,YAAY,EAAI,GAElC,IAAIW,EAAM,CAAC,EACX,OAAI,KAAK,eAAe,GAAG,IACzBA,EAAM,KAAK,YAAY,EAAK,IAE1BlE,EAAS,OAAS,GAAK,OAAO,KAAKuD,CAAQ,EAAE,OAAS,KACxDW,EAAI1E,CAAc,EAAI,IAAI2D,EAAgBnD,EAAUuD,CAAQ,GAEvDW,CACT,CAGA,cAAe,CACb,IAAMR,EAAOiC,GAAc,KAAK,SAAS,EACzC,GAAIjC,IAAS,IAAM,KAAK,eAAe,GAAG,EACxC,MAAM,IAAI0C,EAAc,KAAyF,EAAmF,EAEtM,YAAK,QAAQ1C,CAAI,EACV,IAAID,GAAW6B,GAAO5B,CAAI,EAAG,KAAK,kBAAkB,CAAC,CAC9D,CACA,mBAAoB,CAClB,IAAM/D,EAAS,CAAC,EAChB,KAAO,KAAK,gBAAgB,GAAG,GAC7B,KAAK,WAAWA,CAAM,EAExB,OAAOA,CACT,CACA,WAAWA,EAAQ,CACjB,IAAMqB,EAAM+E,GAAuB,KAAK,SAAS,EACjD,GAAI,CAAC/E,EACH,OAEF,KAAK,QAAQA,CAAG,EAChB,IAAIQ,EAAQ,GACZ,GAAI,KAAK,gBAAgB,GAAG,EAAG,CAC7B,IAAM6E,EAAaV,GAAc,KAAK,SAAS,EAC3CU,IACF7E,EAAQ6E,EACR,KAAK,QAAQ7E,CAAK,EAEtB,CACA7B,EAAO2F,GAAOtE,CAAG,CAAC,EAAIsE,GAAO9D,CAAK,CACpC,CAEA,gBAAgB7B,EAAQ,CACtB,IAAMqB,EAAMiF,GAAiB,KAAK,SAAS,EAC3C,GAAI,CAACjF,EACH,OAEF,KAAK,QAAQA,CAAG,EAChB,IAAIQ,EAAQ,GACZ,GAAI,KAAK,gBAAgB,GAAG,EAAG,CAC7B,IAAM6E,EAAaF,GAAwB,KAAK,SAAS,EACrDE,IACF7E,EAAQ6E,EACR,KAAK,QAAQ7E,CAAK,EAEtB,CACA,IAAM8E,EAAaf,GAAYvE,CAAG,EAC5BuF,EAAahB,GAAY/D,CAAK,EACpC,GAAI7B,EAAO,eAAe2G,CAAU,EAAG,CAErC,IAAIE,EAAa7G,EAAO2G,CAAU,EAC7B,MAAM,QAAQE,CAAU,IAC3BA,EAAa,CAACA,CAAU,EACxB7G,EAAO2G,CAAU,EAAIE,GAEvBA,EAAW,KAAKD,CAAU,CAC5B,MAEE5G,EAAO2G,CAAU,EAAIC,CAEzB,CAEA,YAAYE,EAAc,CACxB,IAAMzG,EAAW,CAAC,EAElB,IADA,KAAK,QAAQ,GAAG,EACT,CAAC,KAAK,gBAAgB,GAAG,GAAK,KAAK,UAAU,OAAS,GAAG,CAC9D,IAAM0D,EAAOiC,GAAc,KAAK,SAAS,EACnC7C,EAAO,KAAK,UAAUY,EAAK,MAAM,EAGvC,GAAIZ,IAAS,KAAOA,IAAS,KAAOA,IAAS,IAC3C,MAAM,IAAIsD,EAAc,KAAiF,EAA8C,EAEzJ,IAAIM,EACAhD,EAAK,QAAQ,GAAG,EAAI,IACtBgD,EAAahD,EAAK,MAAM,EAAGA,EAAK,QAAQ,GAAG,CAAC,EAC5C,KAAK,QAAQgD,CAAU,EACvB,KAAK,QAAQ,GAAG,GACPD,IACTC,EAAalH,GAEf,IAAM+D,EAAW,KAAK,cAAc,EACpCvD,EAAS0G,CAAU,EAAI,OAAO,KAAKnD,CAAQ,EAAE,SAAW,EAAIA,EAAS/D,CAAc,EAAI,IAAI2D,EAAgB,CAAC,EAAGI,CAAQ,EACvH,KAAK,gBAAgB,IAAI,CAC3B,CACA,OAAOvD,CACT,CACA,eAAe4F,EAAK,CAClB,OAAO,KAAK,UAAU,WAAWA,CAAG,CACtC,CAEA,gBAAgBA,EAAK,CACnB,OAAI,KAAK,eAAeA,CAAG,GACzB,KAAK,UAAY,KAAK,UAAU,UAAUA,EAAI,MAAM,EAC7C,IAEF,EACT,CACA,QAAQA,EAAK,CACX,GAAI,CAAC,KAAK,gBAAgBA,CAAG,EAC3B,MAAM,IAAIQ,EAAc,KAA0F,EAAkC,CAExJ,CACF,EACA,SAASO,GAAWC,EAAe,CACjC,OAAOA,EAAc,SAAS,OAAS,EAAI,IAAIzD,EAAgB,CAAC,EAAG,CACjE,CAAC3D,CAAc,EAAGoH,CACpB,CAAC,EAAIA,CACP,CAWA,SAASC,GAAmB5G,EAAc,CACxC,IAAM6G,EAAc,CAAC,EACrB,OAAW,CAAC3C,EAAaC,CAAK,IAAK,OAAO,QAAQnE,EAAa,QAAQ,EAAG,CACxE,IAAM8G,EAAiBF,GAAmBzC,CAAK,EAE/C,GAAID,IAAgB3E,GAAkBuH,EAAe,SAAS,SAAW,GAAKA,EAAe,YAAY,EACvG,OAAW,CAACC,EAAkBC,CAAU,IAAK,OAAO,QAAQF,EAAe,QAAQ,EACjFD,EAAYE,CAAgB,EAAIC,OAG3BF,EAAe,SAAS,OAAS,GAAKA,EAAe,YAAY,KACxED,EAAY3C,CAAW,EAAI4C,EAE/B,CACA,IAAM5B,EAAI,IAAIhC,EAAgBlD,EAAa,SAAU6G,CAAW,EAChE,OAAOI,GAAqB/B,CAAC,CAC/B,CASA,SAAS+B,GAAqB/B,EAAG,CAC/B,GAAIA,EAAE,mBAAqB,GAAKA,EAAE,SAAS3F,CAAc,EAAG,CAC1D,IAAMkD,EAAIyC,EAAE,SAAS3F,CAAc,EACnC,OAAO,IAAI2D,EAAgBgC,EAAE,SAAS,OAAOzC,EAAE,QAAQ,EAAGA,EAAE,QAAQ,CACtE,CACA,OAAOyC,CACT,CACA,SAASgC,GAAUtH,EAAG,CACpB,OAAOA,aAAaoD,EACtB,CAqDA,SAASmE,GAA0BC,EAAYC,EAAUlE,EAAc,KAAMC,EAAW,KAAM,CAC5F,IAAMkE,EAA4BC,GAA4BH,CAAU,EACxE,OAAOI,GAA8BF,EAA2BD,EAAUlE,EAAaC,CAAQ,CACjG,CACA,SAASmE,GAA4BtH,EAAO,CAC1C,IAAIwH,EACJ,SAASC,EAAqCC,EAAc,CAC1D,IAAMC,EAAe,CAAC,EACtB,QAAWC,KAAiBF,EAAa,SAAU,CACjD,IAAM1E,EAAOyE,EAAqCG,CAAa,EAC/DD,EAAaC,EAAc,MAAM,EAAI5E,CACvC,CACA,IAAMjD,EAAe,IAAIkD,EAAgByE,EAAa,IAAKC,CAAY,EACvE,OAAID,IAAiB1H,IACnBwH,EAAczH,GAETA,CACT,CACA,IAAM2G,EAAgBe,EAAqCzH,EAAM,IAAI,EAC/D6H,EAAmBpB,GAAWC,CAAa,EACjD,OAAOc,GAAeK,CACxB,CACA,SAASN,GAA8BJ,EAAYC,EAAUlE,EAAaC,EAAU,CAClF,IAAIH,EAAOmE,EACX,KAAOnE,EAAK,QACVA,EAAOA,EAAK,OAKd,GAAIoE,EAAS,SAAW,EACtB,OAAO3C,GAAKzB,EAAMA,EAAMA,EAAME,EAAaC,CAAQ,EAErD,IAAM2E,EAAMC,GAAkBX,CAAQ,EACtC,GAAIU,EAAI,OAAO,EACb,OAAOrD,GAAKzB,EAAMA,EAAM,IAAIC,EAAgB,CAAC,EAAG,CAAC,CAAC,EAAGC,EAAaC,CAAQ,EAE5E,IAAM6E,EAAWC,GAAmCH,EAAK9E,EAAMmE,CAAU,EACnEe,EAAkBF,EAAS,gBAAkBG,GAA2BH,EAAS,aAAcA,EAAS,MAAOF,EAAI,QAAQ,EAAIM,GAAmBJ,EAAS,aAAcA,EAAS,MAAOF,EAAI,QAAQ,EAC3M,OAAOrD,GAAKzB,EAAMgF,EAAS,aAAcE,EAAiBhF,EAAaC,CAAQ,CACjF,CACA,SAASkF,GAAeC,EAAS,CAC/B,OAAO,OAAOA,GAAY,UAAYA,GAAW,MAAQ,CAACA,EAAQ,SAAW,CAACA,EAAQ,WACxF,CAKA,SAASC,GAAqBD,EAAS,CACrC,OAAO,OAAOA,GAAY,UAAYA,GAAW,MAAQA,EAAQ,OACnE,CACA,SAAS7D,GAAK+D,EAASC,EAAiBP,EAAiBhF,EAAaC,EAAU,CAC9E,IAAIuF,EAAK,CAAC,EACNxF,GACF,OAAO,QAAQA,CAAW,EAAE,QAAQ,CAAC,CAACxD,EAAM4B,CAAK,IAAM,CACrDoH,EAAGhJ,CAAI,EAAI,MAAM,QAAQ4B,CAAK,EAAIA,EAAM,IAAI3B,GAAK,GAAGA,CAAC,EAAE,EAAI,GAAG2B,CAAK,EACrE,CAAC,EAEH,IAAIoF,EACA8B,IAAYC,EACd/B,EAAgBwB,EAEhBxB,EAAgBiC,GAAeH,EAASC,EAAiBP,CAAe,EAE1E,IAAMU,EAAUnC,GAAWE,GAAmBD,CAAa,CAAC,EAC5D,OAAO,IAAI3D,GAAQ6F,EAASF,EAAIvF,CAAQ,CAC1C,CAQA,SAASwF,GAAehG,EAASkG,EAAYC,EAAY,CACvD,IAAMzF,EAAW,CAAC,EAClB,cAAO,QAAQV,EAAQ,QAAQ,EAAE,QAAQ,CAAC,CAAC6D,EAAYhE,CAAC,IAAM,CACxDA,IAAMqG,EACRxF,EAASmD,CAAU,EAAIsC,EAEvBzF,EAASmD,CAAU,EAAImC,GAAenG,EAAGqG,EAAYC,CAAU,CAEnE,CAAC,EACM,IAAI7F,EAAgBN,EAAQ,SAAUU,CAAQ,CACvD,CACA,IAAM0F,GAAN,KAAiB,CACf,YAAYC,EAAYC,EAAoB7B,EAAU,CAIpD,GAHA,KAAK,WAAa4B,EAClB,KAAK,mBAAqBC,EAC1B,KAAK,SAAW7B,EACZ4B,GAAc5B,EAAS,OAAS,GAAKiB,GAAejB,EAAS,CAAC,CAAC,EACjE,MAAM,IAAIlB,EAAc,KAA6F,EAA0D,EAEjL,IAAMgD,EAAgB9B,EAAS,KAAKmB,EAAoB,EACxD,GAAIW,GAAiBA,IAAkB9H,GAAKgG,CAAQ,EAClD,MAAM,IAAIlB,EAAc,KAA4F,EAAuD,CAE/K,CACA,QAAS,CACP,OAAO,KAAK,YAAc,KAAK,SAAS,SAAW,GAAK,KAAK,SAAS,CAAC,GAAK,GAC9E,CACF,EAEA,SAAS6B,GAAkBX,EAAU,CACnC,GAAI,OAAOA,EAAS,CAAC,GAAM,UAAYA,EAAS,SAAW,GAAKA,EAAS,CAAC,IAAM,IAC9E,OAAO,IAAI2B,GAAW,GAAM,EAAG3B,CAAQ,EAEzC,IAAI6B,EAAqB,EACrBD,EAAa,GACXhF,EAAMoD,EAAS,OAAO,CAACpD,EAAKmF,EAAKC,IAAW,CAChD,GAAI,OAAOD,GAAQ,UAAYA,GAAO,KAAM,CAC1C,GAAIA,EAAI,QAAS,CACf,IAAME,EAAU,CAAC,EACjB,cAAO,QAAQF,EAAI,OAAO,EAAE,QAAQ,CAAC,CAACzJ,EAAM0H,CAAQ,IAAM,CACxDiC,EAAQ3J,CAAI,EAAI,OAAO0H,GAAa,SAAWA,EAAS,MAAM,GAAG,EAAIA,CACvE,CAAC,EACM,CAAC,GAAGpD,EAAK,CACd,QAAAqF,CACF,CAAC,CACH,CACA,GAAIF,EAAI,YACN,MAAO,CAAC,GAAGnF,EAAKmF,EAAI,WAAW,CAEnC,CACA,OAAM,OAAOA,GAAQ,SACZ,CAAC,GAAGnF,EAAKmF,CAAG,EAEjBC,IAAW,GACbD,EAAI,MAAM,GAAG,EAAE,QAAQ,CAACG,EAASC,IAAc,CACzCA,GAAa,GAAKD,IAAY,MAEvBC,GAAa,GAAKD,IAAY,GAEvCN,EAAa,GACJM,IAAY,KAErBL,IACSK,GAAW,IACpBtF,EAAI,KAAKsF,CAAO,EAEpB,CAAC,EACMtF,GAEF,CAAC,GAAGA,EAAKmF,CAAG,CACrB,EAAG,CAAC,CAAC,EACL,OAAO,IAAIJ,GAAWC,EAAYC,EAAoBjF,CAAG,CAC3D,CACA,IAAMwF,GAAN,KAAe,CACb,YAAYzJ,EAAc0J,EAAiBtJ,EAAO,CAChD,KAAK,aAAeJ,EACpB,KAAK,gBAAkB0J,EACvB,KAAK,MAAQtJ,CACf,CACF,EACA,SAAS8H,GAAmCH,EAAK9E,EAAM0G,EAAQ,CAC7D,GAAI5B,EAAI,WACN,OAAO,IAAI0B,GAASxG,EAAM,GAAM,CAAC,EAEnC,GAAI,CAAC0G,EAKH,OAAO,IAAIF,GAASxG,EAAM,GAAO,GAAG,EAEtC,GAAI0G,EAAO,SAAW,KACpB,OAAO,IAAIF,GAASE,EAAQ,GAAM,CAAC,EAErC,IAAMC,EAAWtB,GAAeP,EAAI,SAAS,CAAC,CAAC,EAAI,EAAI,EACjD3H,EAAQuJ,EAAO,SAAS,OAAS,EAAIC,EAC3C,OAAOC,GAAiCF,EAAQvJ,EAAO2H,EAAI,kBAAkB,CAC/E,CACA,SAAS8B,GAAiCC,EAAO1J,EAAO8I,EAAoB,CAC1E,IAAIa,EAAID,EACJE,EAAK5J,EACL6J,EAAKf,EACT,KAAOe,EAAKD,GAAI,CAGd,GAFAC,GAAMD,EACND,EAAIA,EAAE,OACF,CAACA,EACH,MAAM,IAAI5D,EAAc,KAAsF,EAAuC,EAEvJ6D,EAAKD,EAAE,SAAS,MAClB,CACA,OAAO,IAAIN,GAASM,EAAG,GAAOC,EAAKC,CAAE,CACvC,CACA,SAASC,GAAW7C,EAAU,CAC5B,OAAImB,GAAqBnB,EAAS,CAAC,CAAC,EAC3BA,EAAS,CAAC,EAAE,QAEd,CACL,CAAC9H,CAAc,EAAG8H,CACpB,CACF,CACA,SAASgB,GAAmBrI,EAAcmK,EAAY9C,EAAU,CAE9D,GADArH,IAAiB,IAAIkD,EAAgB,CAAC,EAAG,CAAC,CAAC,EACvClD,EAAa,SAAS,SAAW,GAAKA,EAAa,YAAY,EACjE,OAAOoI,GAA2BpI,EAAcmK,EAAY9C,CAAQ,EAEtE,IAAM+C,EAAIC,GAAarK,EAAcmK,EAAY9C,CAAQ,EACnDiD,EAAiBjD,EAAS,MAAM+C,EAAE,YAAY,EACpD,GAAIA,EAAE,OAASA,EAAE,UAAYpK,EAAa,SAAS,OAAQ,CACzD,IAAM+J,EAAI,IAAI7G,EAAgBlD,EAAa,SAAS,MAAM,EAAGoK,EAAE,SAAS,EAAG,CAAC,CAAC,EAC7E,OAAAL,EAAE,SAASxK,CAAc,EAAI,IAAI2D,EAAgBlD,EAAa,SAAS,MAAMoK,EAAE,SAAS,EAAGpK,EAAa,QAAQ,EACzGoI,GAA2B2B,EAAG,EAAGO,CAAc,CACxD,KAAO,QAAIF,EAAE,OAASE,EAAe,SAAW,EACvC,IAAIpH,EAAgBlD,EAAa,SAAU,CAAC,CAAC,EAC3CoK,EAAE,OAAS,CAACpK,EAAa,YAAY,EACvCuK,GAAsBvK,EAAcmK,EAAY9C,CAAQ,EACtD+C,EAAE,MACJhC,GAA2BpI,EAAc,EAAGsK,CAAc,EAE1DC,GAAsBvK,EAAcmK,EAAY9C,CAAQ,CAEnE,CACA,SAASe,GAA2BpI,EAAcmK,EAAY9C,EAAU,CACtE,GAAIA,EAAS,SAAW,EACtB,OAAO,IAAInE,EAAgBlD,EAAa,SAAU,CAAC,CAAC,EAC/C,CACL,IAAMsJ,EAAUY,GAAW7C,CAAQ,EAC7B/D,EAAW,CAAC,EAsBlB,GAAI,OAAO,KAAKgG,CAAO,EAAE,KAAK,GAAK,IAAM/J,CAAc,GAAKS,EAAa,SAAST,CAAc,GAAKS,EAAa,mBAAqB,GAAKA,EAAa,SAAST,CAAc,EAAE,SAAS,SAAW,EAAG,CACvM,IAAMiL,EAAuBpC,GAA2BpI,EAAa,SAAST,CAAc,EAAG4K,EAAY9C,CAAQ,EACnH,OAAO,IAAInE,EAAgBlD,EAAa,SAAUwK,EAAqB,QAAQ,CACjF,CACA,cAAO,QAAQlB,CAAO,EAAE,QAAQ,CAAC,CAACmB,EAAQpD,CAAQ,IAAM,CAClD,OAAOA,GAAa,WACtBA,EAAW,CAACA,CAAQ,GAElBA,IAAa,OACf/D,EAASmH,CAAM,EAAIpC,GAAmBrI,EAAa,SAASyK,CAAM,EAAGN,EAAY9C,CAAQ,EAE7F,CAAC,EACD,OAAO,QAAQrH,EAAa,QAAQ,EAAE,QAAQ,CAAC,CAACkE,EAAaC,CAAK,IAAM,CAClEmF,EAAQpF,CAAW,IAAM,SAC3BZ,EAASY,CAAW,EAAIC,EAE5B,CAAC,EACM,IAAIjB,EAAgBlD,EAAa,SAAUsD,CAAQ,CAC5D,CACF,CACA,SAAS+G,GAAarK,EAAcmK,EAAY9C,EAAU,CACxD,IAAIqD,EAAsB,EACtBC,EAAmBR,EACjBS,EAAU,CACd,MAAO,GACP,UAAW,EACX,aAAc,CAChB,EACA,KAAOD,EAAmB3K,EAAa,SAAS,QAAQ,CACtD,GAAI0K,GAAuBrD,EAAS,OAAQ,OAAOuD,EACnD,IAAMnH,EAAOzD,EAAa,SAAS2K,CAAgB,EAC7CpC,EAAUlB,EAASqD,CAAmB,EAI5C,GAAIlC,GAAqBD,CAAO,EAC9B,MAEF,IAAMsC,EAAO,GAAGtC,CAAO,GACjB1F,EAAO6H,EAAsBrD,EAAS,OAAS,EAAIA,EAASqD,EAAsB,CAAC,EAAI,KAC7F,GAAIC,EAAmB,GAAKE,IAAS,OAAW,MAChD,GAAIA,GAAQhI,GAAQ,OAAOA,GAAS,UAAYA,EAAK,UAAY,OAAW,CAC1E,GAAI,CAACiI,GAAQD,EAAMhI,EAAMY,CAAI,EAAG,OAAOmH,EACvCF,GAAuB,CACzB,KAAO,CACL,GAAI,CAACI,GAAQD,EAAM,CAAC,EAAGpH,CAAI,EAAG,OAAOmH,EACrCF,GACF,CACAC,GACF,CACA,MAAO,CACL,MAAO,GACP,UAAWA,EACX,aAAcD,CAChB,CACF,CACA,SAASH,GAAsBvK,EAAcmK,EAAY9C,EAAU,CACjE,IAAM0D,EAAQ/K,EAAa,SAAS,MAAM,EAAGmK,CAAU,EACnDzJ,EAAI,EACR,KAAOA,EAAI2G,EAAS,QAAQ,CAC1B,IAAMkB,EAAUlB,EAAS3G,CAAC,EAC1B,GAAI8H,GAAqBD,CAAO,EAAG,CACjC,IAAMjF,EAAW0H,GAAyBzC,EAAQ,OAAO,EACzD,OAAO,IAAIrF,EAAgB6H,EAAOzH,CAAQ,CAC5C,CAEA,GAAI5C,IAAM,GAAK4H,GAAejB,EAAS,CAAC,CAAC,EAAG,CAC1C,IAAM7C,EAAIxE,EAAa,SAASmK,CAAU,EAC1CY,EAAM,KAAK,IAAIvH,GAAWgB,EAAE,KAAMyG,GAAU5D,EAAS,CAAC,CAAC,CAAC,CAAC,EACzD3G,IACA,QACF,CACA,IAAMmK,EAAOrC,GAAqBD,CAAO,EAAIA,EAAQ,QAAQhJ,CAAc,EAAI,GAAGgJ,CAAO,GACnF1F,EAAOnC,EAAI2G,EAAS,OAAS,EAAIA,EAAS3G,EAAI,CAAC,EAAI,KACrDmK,GAAQhI,GAAQyF,GAAezF,CAAI,GACrCkI,EAAM,KAAK,IAAIvH,GAAWqH,EAAMI,GAAUpI,CAAI,CAAC,CAAC,EAChDnC,GAAK,IAELqK,EAAM,KAAK,IAAIvH,GAAWqH,EAAM,CAAC,CAAC,CAAC,EACnCnK,IAEJ,CACA,OAAO,IAAIwC,EAAgB6H,EAAO,CAAC,CAAC,CACtC,CACA,SAASC,GAAyB1B,EAAS,CACzC,IAAMhG,EAAW,CAAC,EAClB,cAAO,QAAQgG,CAAO,EAAE,QAAQ,CAAC,CAACmB,EAAQpD,CAAQ,IAAM,CAClD,OAAOA,GAAa,WACtBA,EAAW,CAACA,CAAQ,GAElBA,IAAa,OACf/D,EAASmH,CAAM,EAAIF,GAAsB,IAAIrH,EAAgB,CAAC,EAAG,CAAC,CAAC,EAAG,EAAGmE,CAAQ,EAErF,CAAC,EACM/D,CACT,CACA,SAAS2H,GAAUvL,EAAQ,CACzB,IAAMuE,EAAM,CAAC,EACb,cAAO,QAAQvE,CAAM,EAAE,QAAQ,CAAC,CAACsF,EAAGpF,CAAC,IAAMqE,EAAIe,CAAC,EAAI,GAAGpF,CAAC,EAAE,EACnDqE,CACT,CACA,SAAS6G,GAAQrH,EAAM/D,EAAQY,EAAS,CACtC,OAAOmD,GAAQnD,EAAQ,MAAQK,GAAajB,EAAQY,EAAQ,UAAU,CACxE,CACA,IAAM4K,GAAwB,aAM1BC,GAAyB,SAAUA,EAAW,CAChD,OAAAA,EAAUA,EAAU,gBAAqB,CAAC,EAAI,kBAC9CA,EAAUA,EAAU,cAAmB,CAAC,EAAI,gBAC5CA,EAAUA,EAAU,iBAAsB,CAAC,EAAI,mBAC/CA,EAAUA,EAAU,gBAAqB,CAAC,EAAI,kBAC9CA,EAAUA,EAAU,iBAAsB,CAAC,EAAI,mBAC/CA,EAAUA,EAAU,aAAkB,CAAC,EAAI,eAC3CA,EAAUA,EAAU,WAAgB,CAAC,EAAI,aACzCA,EAAUA,EAAU,iBAAsB,CAAC,EAAI,mBAC/CA,EAAUA,EAAU,eAAoB,CAAC,EAAI,iBAC7CA,EAAUA,EAAU,qBAA0B,CAAC,EAAI,uBACnDA,EAAUA,EAAU,mBAAwB,EAAE,EAAI,qBAClDA,EAAUA,EAAU,qBAA0B,EAAE,EAAI,uBACpDA,EAAUA,EAAU,mBAAwB,EAAE,EAAI,qBAClDA,EAAUA,EAAU,gBAAqB,EAAE,EAAI,kBAC/CA,EAAUA,EAAU,cAAmB,EAAE,EAAI,gBAC7CA,EAAUA,EAAU,OAAY,EAAE,EAAI,SACtCA,EAAUA,EAAU,kBAAuB,EAAE,EAAI,oBAC1CA,CACT,EAAEA,IAAa,CAAC,CAAC,EAyBXC,GAAN,KAAkB,CAChB,YACAC,EACA9G,EAAK,CACH,KAAK,GAAK8G,EACV,KAAK,IAAM9G,CACb,CACF,EAMM+G,GAAN,cAA8BF,EAAY,CACxC,YACAC,EACA9G,EACAgH,EAAoB,aACpBC,EAAgB,KAAM,CACpB,MAAMH,EAAI9G,CAAG,EACb,KAAK,KAAO4G,GAAU,gBACtB,KAAK,kBAAoBI,EACzB,KAAK,cAAgBC,CACvB,CAEA,UAAW,CACT,MAAO,uBAAuB,KAAK,EAAE,WAAW,KAAK,GAAG,IAC1D,CACF,EAUMC,GAAN,cAA4BL,EAAY,CACtC,YACAC,EACA9G,EACAmH,EAAmB,CACjB,MAAML,EAAI9G,CAAG,EACb,KAAK,kBAAoBmH,EACzB,KAAK,KAAOP,GAAU,aACxB,CAEA,UAAW,CACT,MAAO,qBAAqB,KAAK,EAAE,WAAW,KAAK,GAAG,0BAA0B,KAAK,iBAAiB,IACxG,CACF,EAOIQ,GAA0C,SAAUA,EAA4B,CAIlF,OAAAA,EAA2BA,EAA2B,SAAc,CAAC,EAAI,WAIzEA,EAA2BA,EAA2B,0BAA+B,CAAC,EAAI,4BAI1FA,EAA2BA,EAA2B,mBAAwB,CAAC,EAAI,qBAInFA,EAA2BA,EAA2B,cAAmB,CAAC,EAAI,gBACvEA,CACT,EAAEA,IAA8B,CAAC,CAAC,EAO9BC,GAAqC,SAAUA,EAAuB,CAIxE,OAAAA,EAAsBA,EAAsB,yBAA8B,CAAC,EAAI,2BAO/EA,EAAsBA,EAAsB,6BAAkC,CAAC,EAAI,+BAC5EA,CACT,EAAEA,IAAyB,CAAC,CAAC,EAYvBC,GAAN,cAA+BT,EAAY,CACzC,YACAC,EACA9G,EAKAuH,EAMAC,EAAM,CACJ,MAAMV,EAAI9G,CAAG,EACb,KAAK,OAASuH,EACd,KAAK,KAAOC,EACZ,KAAK,KAAOZ,GAAU,gBACxB,CAEA,UAAW,CACT,MAAO,wBAAwB,KAAK,EAAE,WAAW,KAAK,GAAG,IAC3D,CACF,EASMa,GAAN,cAAgCZ,EAAY,CAC1C,YACAC,EACA9G,EAKAuH,EAMAC,EAAM,CACJ,MAAMV,EAAI9G,CAAG,EACb,KAAK,OAASuH,EACd,KAAK,KAAOC,EACZ,KAAK,KAAOZ,GAAU,iBACxB,CACF,EAUMc,GAAN,cAA8Bb,EAAY,CACxC,YACAC,EACA9G,EACA2H,EAOAvC,EAAQ,CACN,MAAM0B,EAAI9G,CAAG,EACb,KAAK,MAAQ2H,EACb,KAAK,OAASvC,EACd,KAAK,KAAOwB,GAAU,eACxB,CAEA,UAAW,CACT,MAAO,uBAAuB,KAAK,EAAE,WAAW,KAAK,GAAG,aAAa,KAAK,KAAK,GACjF,CACF,EAMMgB,GAAN,cAA+Bf,EAAY,CACzC,YACAC,EACA9G,EACAmH,EACAU,EAAO,CACL,MAAMf,EAAI9G,CAAG,EACb,KAAK,kBAAoBmH,EACzB,KAAK,MAAQU,EACb,KAAK,KAAOjB,GAAU,gBACxB,CAEA,UAAW,CACT,MAAO,wBAAwB,KAAK,EAAE,WAAW,KAAK,GAAG,0BAA0B,KAAK,iBAAiB,aAAa,KAAK,KAAK,GAClI,CACF,EAQMkB,GAAN,cAA+BjB,EAAY,CACzC,YACAC,EACA9G,EACAmH,EACAU,EAAO,CACL,MAAMf,EAAI9G,CAAG,EACb,KAAK,kBAAoBmH,EACzB,KAAK,MAAQU,EACb,KAAK,KAAOjB,GAAU,gBACxB,CACA,UAAW,CACT,MAAO,wBAAwB,KAAK,EAAE,WAAW,KAAK,GAAG,0BAA0B,KAAK,iBAAiB,aAAa,KAAK,KAAK,GAClI,CACF,EAQMmB,GAAN,cAA6BlB,EAAY,CACvC,YACAC,EACA9G,EACAmH,EACAU,EACAG,EAAgB,CACd,MAAMlB,EAAI9G,CAAG,EACb,KAAK,kBAAoBmH,EACzB,KAAK,MAAQU,EACb,KAAK,eAAiBG,EACtB,KAAK,KAAOpB,GAAU,cACxB,CACA,UAAW,CACT,MAAO,sBAAsB,KAAK,EAAE,WAAW,KAAK,GAAG,0BAA0B,KAAK,iBAAiB,aAAa,KAAK,KAAK,qBAAqB,KAAK,cAAc,GACxK,CACF,EAWMqB,GAAN,cAA2BpB,EAAY,CACrC,YACAC,EACA9G,EACAmH,EACAU,EAAO,CACL,MAAMf,EAAI9G,CAAG,EACb,KAAK,kBAAoBmH,EACzB,KAAK,MAAQU,EACb,KAAK,KAAOjB,GAAU,YACxB,CACA,UAAW,CACT,MAAO,oBAAoB,KAAK,EAAE,WAAW,KAAK,GAAG,0BAA0B,KAAK,iBAAiB,aAAa,KAAK,KAAK,GAC9H,CACF,EAOMsB,GAAN,cAAyBrB,EAAY,CACnC,YACAC,EACA9G,EACAmH,EACAU,EAAO,CACL,MAAMf,EAAI9G,CAAG,EACb,KAAK,kBAAoBmH,EACzB,KAAK,MAAQU,EACb,KAAK,KAAOjB,GAAU,UACxB,CACA,UAAW,CACT,MAAO,kBAAkB,KAAK,EAAE,WAAW,KAAK,GAAG,0BAA0B,KAAK,iBAAiB,aAAa,KAAK,KAAK,GAC5H,CACF,EAQMuB,GAAN,KAA2B,CACzB,YACAzM,EAAO,CACL,KAAK,MAAQA,EACb,KAAK,KAAOkL,GAAU,oBACxB,CACA,UAAW,CACT,MAAO,8BAA8B,KAAK,MAAM,IAAI,GACtD,CACF,EAQMwB,GAAN,KAAyB,CACvB,YACA1M,EAAO,CACL,KAAK,MAAQA,EACb,KAAK,KAAOkL,GAAU,kBACxB,CACA,UAAW,CACT,MAAO,4BAA4B,KAAK,MAAM,IAAI,GACpD,CACF,EASMyB,GAAN,KAA2B,CACzB,YACAC,EAAU,CACR,KAAK,SAAWA,EAChB,KAAK,KAAO1B,GAAU,oBACxB,CACA,UAAW,CAET,MAAO,+BADM,KAAK,SAAS,aAAe,KAAK,SAAS,YAAY,MAAQ,EAClC,IAC5C,CACF,EAQM2B,GAAN,KAAyB,CACvB,YACAD,EAAU,CACR,KAAK,SAAWA,EAChB,KAAK,KAAO1B,GAAU,kBACxB,CACA,UAAW,CAET,MAAO,6BADM,KAAK,SAAS,aAAe,KAAK,SAAS,YAAY,MAAQ,EACpC,IAC1C,CACF,EASM4B,GAAN,KAAsB,CACpB,YACAF,EAAU,CACR,KAAK,SAAWA,EAChB,KAAK,KAAO1B,GAAU,eACxB,CACA,UAAW,CAET,MAAO,0BADM,KAAK,SAAS,aAAe,KAAK,SAAS,YAAY,MAAQ,EACvC,IACvC,CACF,EASM6B,GAAN,KAAoB,CAClB,YACAH,EAAU,CACR,KAAK,SAAWA,EAChB,KAAK,KAAO1B,GAAU,aACxB,CACA,UAAW,CAET,MAAO,wBADM,KAAK,SAAS,aAAe,KAAK,SAAS,YAAY,MAAQ,EACzC,IACrC,CACF,EAqBA,IAAM8B,GAAN,KAA2B,CAAC,EACtBC,GAAN,KAAsB,CACpB,YAAYC,EAAK,CACf,KAAK,IAAMA,CACb,CACF,EA8CA,IAAMC,GAAN,KAAoB,CAClB,aAAc,CACZ,KAAK,OAAS,KACd,KAAK,MAAQ,KACb,KAAK,SAAW,KAChB,KAAK,SAAW,IAAIC,GACpB,KAAK,UAAY,IACnB,CACF,EAMIA,IAAuC,IAAM,CAC/C,MAAMA,CAAuB,CAC3B,aAAc,CAEZ,KAAK,SAAW,IAAI,GACtB,CAEA,qBAAqBC,EAAWC,EAAQ,CACtC,IAAMC,EAAU,KAAK,mBAAmBF,CAAS,EACjDE,EAAQ,OAASD,EACjB,KAAK,SAAS,IAAID,EAAWE,CAAO,CACtC,CAMA,uBAAuBF,EAAW,CAChC,IAAME,EAAU,KAAK,WAAWF,CAAS,EACrCE,IACFA,EAAQ,OAAS,KACjBA,EAAQ,UAAY,KAExB,CAKA,qBAAsB,CACpB,IAAMC,EAAW,KAAK,SACtB,YAAK,SAAW,IAAI,IACbA,CACT,CACA,mBAAmBA,EAAU,CAC3B,KAAK,SAAWA,CAClB,CACA,mBAAmBH,EAAW,CAC5B,IAAIE,EAAU,KAAK,WAAWF,CAAS,EACvC,OAAKE,IACHA,EAAU,IAAIJ,GACd,KAAK,SAAS,IAAIE,EAAWE,CAAO,GAE/BA,CACT,CACA,WAAWF,EAAW,CACpB,OAAO,KAAK,SAAS,IAAIA,CAAS,GAAK,IACzC,CACA,MAAO,CACL,KAAK,UAAO,SAAwC,EAAG,CACrD,OAAO,IAAK,GAAKD,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BK,EAAmB,CAChD,MAAOL,EACP,QAASA,EAAuB,UAChC,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAIGM,GAAN,KAAW,CACT,YAAYC,EAAM,CAChB,KAAK,MAAQA,CACf,CACA,IAAI,MAAO,CACT,OAAO,KAAK,MAAM,KACpB,CAIA,OAAOC,EAAG,CACR,IAAMC,EAAI,KAAK,aAAaD,CAAC,EAC7B,OAAOC,EAAE,OAAS,EAAIA,EAAEA,EAAE,OAAS,CAAC,EAAI,IAC1C,CAIA,SAASD,EAAG,CACV,IAAME,EAAIC,GAASH,EAAG,KAAK,KAAK,EAChC,OAAOE,EAAIA,EAAE,SAAS,IAAI,GAAK,EAAE,KAAK,EAAI,CAAC,CAC7C,CAIA,WAAWF,EAAG,CACZ,IAAME,EAAIC,GAASH,EAAG,KAAK,KAAK,EAChC,OAAOE,GAAKA,EAAE,SAAS,OAAS,EAAIA,EAAE,SAAS,CAAC,EAAE,MAAQ,IAC5D,CAIA,SAASF,EAAG,CACV,IAAMC,EAAIG,GAASJ,EAAG,KAAK,KAAK,EAChC,OAAIC,EAAE,OAAS,EAAU,CAAC,EAChBA,EAAEA,EAAE,OAAS,CAAC,EAAE,SAAS,IAAII,GAAKA,EAAE,KAAK,EAC1C,OAAOC,GAAMA,IAAON,CAAC,CAChC,CAIA,aAAaA,EAAG,CACd,OAAOI,GAASJ,EAAG,KAAK,KAAK,EAAE,IAAIO,GAAKA,EAAE,KAAK,CACjD,CACF,EAEA,SAASJ,GAASK,EAAOC,EAAM,CAC7B,GAAID,IAAUC,EAAK,MAAO,OAAOA,EACjC,QAAWC,KAASD,EAAK,SAAU,CACjC,IAAMA,EAAON,GAASK,EAAOE,CAAK,EAClC,GAAID,EAAM,OAAOA,CACnB,CACA,OAAO,IACT,CAEA,SAASL,GAASI,EAAOC,EAAM,CAC7B,GAAID,IAAUC,EAAK,MAAO,MAAO,CAACA,CAAI,EACtC,QAAWC,KAASD,EAAK,SAAU,CACjC,IAAME,EAAOP,GAASI,EAAOE,CAAK,EAClC,GAAIC,EAAK,OACP,OAAAA,EAAK,QAAQF,CAAI,EACVE,CAEX,CACA,MAAO,CAAC,CACV,CACA,IAAMC,GAAN,KAAe,CACb,YAAYJ,EAAOK,EAAU,CAC3B,KAAK,MAAQL,EACb,KAAK,SAAWK,CAClB,CACA,UAAW,CACT,MAAO,YAAY,KAAK,KAAK,GAC/B,CACF,EAEA,SAASC,GAAkBL,EAAM,CAC/B,IAAMM,EAAM,CAAC,EACb,OAAIN,GACFA,EAAK,SAAS,QAAQC,GAASK,EAAIL,EAAM,MAAM,MAAM,EAAIA,CAAK,EAEzDK,CACT,CAiCA,IAAMC,GAAN,cAA0BlB,EAAK,CAE7B,YAAYC,EACZkB,EAAU,CACR,MAAMlB,CAAI,EACV,KAAK,SAAWkB,EAChBC,GAAe,KAAMnB,CAAI,CAC3B,CACA,UAAW,CACT,OAAO,KAAK,SAAS,SAAS,CAChC,CACF,EACA,SAASoB,GAAiBC,EAAe,CACvC,IAAMH,EAAWI,GAAyBD,CAAa,EACjDE,EAAW,IAAIC,EAAgB,CAAC,IAAIC,GAAW,GAAI,CAAC,CAAC,CAAC,CAAC,EACvDC,EAAc,IAAIF,EAAgB,CAAC,CAAC,EACpCG,EAAY,IAAIH,EAAgB,CAAC,CAAC,EAClCI,EAAmB,IAAIJ,EAAgB,CAAC,CAAC,EACzCK,EAAW,IAAIL,EAAgB,EAAE,EACjCM,EAAY,IAAIC,GAAeR,EAAUG,EAAaE,EAAkBC,EAAUF,EAAWK,EAAgBX,EAAeH,EAAS,IAAI,EAC/I,OAAAY,EAAU,SAAWZ,EAAS,KACvB,IAAID,GAAY,IAAIJ,GAASiB,EAAW,CAAC,CAAC,EAAGZ,CAAQ,CAC9D,CACA,SAASI,GAAyBD,EAAe,CAC/C,IAAMK,EAAc,CAAC,EACfC,EAAY,CAAC,EACbC,EAAmB,CAAC,EACpBC,EAAW,GACXC,EAAY,IAAIG,GAAuB,CAAC,EAAGP,EAAaE,EAAkBC,EAAUF,EAAWK,EAAgBX,EAAe,KAAM,CAAC,CAAC,EAC5I,OAAO,IAAIa,GAAoB,GAAI,IAAIrB,GAASiB,EAAW,CAAC,CAAC,CAAC,CAChE,CAoBA,IAAMC,GAAN,KAAqB,CAEnB,YACAI,EACAC,EACAC,EACAC,EACAC,EACA5C,EACA6C,EAAWC,EAAgB,CACzB,KAAK,WAAaN,EAClB,KAAK,cAAgBC,EACrB,KAAK,mBAAqBC,EAC1B,KAAK,gBAAkBC,EACvB,KAAK,YAAcC,EACnB,KAAK,OAAS5C,EACd,KAAK,UAAY6C,EACjB,KAAK,gBAAkBC,EACvB,KAAK,MAAQ,KAAK,aAAa,KAAKzB,EAAI0B,GAAKA,EAAEC,EAAa,CAAC,CAAC,GAAKC,EAAG,MAAS,EAE/E,KAAK,IAAMT,EACX,KAAK,OAASC,EACd,KAAK,YAAcC,EACnB,KAAK,SAAWC,EAChB,KAAK,KAAOC,CACd,CAEA,IAAI,aAAc,CAChB,OAAO,KAAK,gBAAgB,WAC9B,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,aAAa,IAC3B,CAEA,IAAI,QAAS,CACX,OAAO,KAAK,aAAa,OAAO,IAAI,CACtC,CAEA,IAAI,YAAa,CACf,OAAO,KAAK,aAAa,WAAW,IAAI,CAC1C,CAEA,IAAI,UAAW,CACb,OAAO,KAAK,aAAa,SAAS,IAAI,CACxC,CAEA,IAAI,cAAe,CACjB,OAAO,KAAK,aAAa,aAAa,IAAI,CAC5C,CAMA,IAAI,UAAW,CACb,YAAK,YAAc,KAAK,OAAO,KAAKvB,EAAId,GAAK2C,GAAkB3C,CAAC,CAAC,CAAC,EAC3D,KAAK,SACd,CAKA,IAAI,eAAgB,CAClB,YAAK,iBAAmB,KAAK,YAAY,KAAKc,EAAId,GAAK2C,GAAkB3C,CAAC,CAAC,CAAC,EACrE,KAAK,cACd,CACA,UAAW,CACT,OAAO,KAAK,SAAW,KAAK,SAAS,SAAS,EAAI,UAAU,KAAK,eAAe,GAClF,CACF,EAOA,SAAS4C,GAAaC,EAAOC,EAAQC,EAA4B,YAAa,CAC5E,IAAIC,EACE,CACJ,YAAAC,CACF,EAAIJ,EACJ,OAAIC,IAAW,OAASC,IAA8B,UAEtDE,GAAa,OAAS,IAEtB,CAACH,EAAO,WAAa,CAACA,EAAO,aAAa,eACxCE,EAAY,CACV,OAAQE,IAAA,GACHJ,EAAO,QACPD,EAAM,QAEX,KAAMK,IAAA,GACDJ,EAAO,MACPD,EAAM,MAEX,QAASK,QAAA,GAOJL,EAAM,MAENC,EAAO,MAEPG,GAAa,MAEbJ,EAAM,cAEb,EAEAG,EAAY,CACV,OAAQE,EAAA,GACHL,EAAM,QAEX,KAAMK,EAAA,GACDL,EAAM,MAEX,QAASK,IAAA,GACJL,EAAM,MACLA,EAAM,eAAiB,CAAC,EAEhC,EAEEI,GAAeE,GAAeF,CAAW,IAC3CD,EAAU,QAAQP,EAAa,EAAIQ,EAAY,OAE1CD,CACT,CAwBA,IAAMjB,GAAN,KAA6B,CAE3B,IAAI,OAAQ,CAGV,OAAO,KAAK,OAAOU,EAAa,CAClC,CAEA,YACAW,EAoBAC,EACAC,EACA3B,EACA4B,EACA9D,EACA6C,EAAWW,EAAaO,EAAS,CAC/B,KAAK,IAAMJ,EACX,KAAK,OAASC,EACd,KAAK,YAAcC,EACnB,KAAK,SAAW3B,EAChB,KAAK,KAAO4B,EACZ,KAAK,OAAS9D,EACd,KAAK,UAAY6C,EACjB,KAAK,YAAcW,EACnB,KAAK,SAAWO,CAClB,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,aAAa,IAC3B,CAEA,IAAI,QAAS,CACX,OAAO,KAAK,aAAa,OAAO,IAAI,CACtC,CAEA,IAAI,YAAa,CACf,OAAO,KAAK,aAAa,WAAW,IAAI,CAC1C,CAEA,IAAI,UAAW,CACb,OAAO,KAAK,aAAa,SAAS,IAAI,CACxC,CAEA,IAAI,cAAe,CACjB,OAAO,KAAK,aAAa,aAAa,IAAI,CAC5C,CACA,IAAI,UAAW,CACb,YAAK,YAAcb,GAAkB,KAAK,MAAM,EACzC,KAAK,SACd,CACA,IAAI,eAAgB,CAClB,YAAK,iBAAmBA,GAAkB,KAAK,WAAW,EACnD,KAAK,cACd,CACA,UAAW,CACT,IAAMS,EAAM,KAAK,IAAI,IAAIK,GAAWA,EAAQ,SAAS,CAAC,EAAE,KAAK,GAAG,EAC1DC,EAAU,KAAK,YAAc,KAAK,YAAY,KAAO,GAC3D,MAAO,cAAcN,CAAG,YAAYM,CAAO,IAC7C,CACF,EA4BM1B,GAAN,cAAkCnC,EAAK,CAErC,YACAuD,EAAKtD,EAAM,CACT,MAAMA,CAAI,EACV,KAAK,IAAMsD,EACXnC,GAAe,KAAMnB,CAAI,CAC3B,CACA,UAAW,CACT,OAAO6D,GAAc,KAAK,KAAK,CACjC,CACF,EACA,SAAS1C,GAAe2C,EAAOpD,EAAM,CACnCA,EAAK,MAAM,aAAeoD,EAC1BpD,EAAK,SAAS,QAAQJ,GAAKa,GAAe2C,EAAOxD,CAAC,CAAC,CACrD,CACA,SAASuD,GAAcnD,EAAM,CAC3B,IAAMJ,EAAII,EAAK,SAAS,OAAS,EAAI,MAAMA,EAAK,SAAS,IAAImD,EAAa,EAAE,KAAK,IAAI,CAAC,MAAQ,GAC9F,MAAO,GAAGnD,EAAK,KAAK,GAAGJ,CAAC,EAC1B,CAMA,SAASyD,GAAsBhB,EAAO,CACpC,GAAIA,EAAM,SAAU,CAClB,IAAMiB,EAAkBjB,EAAM,SACxBkB,EAAelB,EAAM,gBAC3BA,EAAM,SAAWkB,EACZC,GAAaF,EAAgB,YAAaC,EAAa,WAAW,GACrElB,EAAM,mBAAmB,KAAKkB,EAAa,WAAW,EAEpDD,EAAgB,WAAaC,EAAa,UAC5ClB,EAAM,gBAAgB,KAAKkB,EAAa,QAAQ,EAE7CC,GAAaF,EAAgB,OAAQC,EAAa,MAAM,GAC3DlB,EAAM,cAAc,KAAKkB,EAAa,MAAM,EAEzCE,GAAmBH,EAAgB,IAAKC,EAAa,GAAG,GAC3DlB,EAAM,WAAW,KAAKkB,EAAa,GAAG,EAEnCC,GAAaF,EAAgB,KAAMC,EAAa,IAAI,GACvDlB,EAAM,YAAY,KAAKkB,EAAa,IAAI,CAE5C,MACElB,EAAM,SAAWA,EAAM,gBAEvBA,EAAM,YAAY,KAAKA,EAAM,gBAAgB,IAAI,CAErD,CACA,SAASqB,GAA0BC,EAAGC,EAAG,CACvC,IAAMC,EAAiBL,GAAaG,EAAE,OAAQC,EAAE,MAAM,GAAKE,GAAcH,EAAE,IAAKC,EAAE,GAAG,EAC/EG,EAAkB,CAACJ,EAAE,QAAW,CAACC,EAAE,OACzC,OAAOC,GAAkB,CAACE,IAAoB,CAACJ,EAAE,QAAUD,GAA0BC,EAAE,OAAQC,EAAE,MAAM,EACzG,CACA,SAASjB,GAAeqB,EAAQ,CAC9B,OAAO,OAAOA,EAAO,OAAU,UAAYA,EAAO,QAAU,IAC9D,CAqDA,IAAIC,IAA6B,IAAM,CACrC,MAAMA,CAAa,CACjB,aAAc,CACZ,KAAK,UAAY,KACjB,KAAK,gBAAkB,KAMvB,KAAK,KAAO3C,EACZ,KAAK,eAAiB,IAAI4C,GAC1B,KAAK,iBAAmB,IAAIA,GAK5B,KAAK,aAAe,IAAIA,GAKxB,KAAK,aAAe,IAAIA,GACxB,KAAK,eAAiBC,EAAOpF,EAAsB,EACnD,KAAK,SAAWoF,EAAOC,EAAgB,EACvC,KAAK,eAAiBD,EAAOE,EAAiB,EAC9C,KAAK,oBAAsBF,EAAOG,EAAmB,EACrD,KAAK,YAAcH,EAAOI,GAAc,CACtC,SAAU,EACZ,CAAC,EAED,KAAK,iCAAmC,EAC1C,CAEA,IAAI,uBAAwB,CAC1B,OAAO,KAAK,SACd,CAEA,YAAYC,EAAS,CACnB,GAAIA,EAAQ,KAAS,CACnB,GAAM,CACJ,YAAAC,EACA,cAAAC,CACF,EAAIF,EAAQ,KACZ,GAAIC,EAGF,OAGE,KAAK,0BAA0BC,CAAa,IAC9C,KAAK,WAAW,EAChB,KAAK,eAAe,uBAAuBA,CAAa,GAG1D,KAAK,yBAAyB,CAChC,CACF,CAEA,aAAc,CAER,KAAK,0BAA0B,KAAK,IAAI,GAC1C,KAAK,eAAe,uBAAuB,KAAK,IAAI,EAEtD,KAAK,aAAa,yBAAyB,IAAI,CACjD,CACA,0BAA0BC,EAAY,CACpC,OAAO,KAAK,eAAe,WAAWA,CAAU,GAAG,SAAW,IAChE,CAEA,UAAW,CACT,KAAK,yBAAyB,CAChC,CACA,0BAA2B,CAEzB,GADA,KAAK,eAAe,qBAAqB,KAAK,KAAM,IAAI,EACpD,KAAK,UACP,OAIF,IAAMzF,EAAU,KAAK,eAAe,WAAW,KAAK,IAAI,EACpDA,GAAS,QACPA,EAAQ,UAEV,KAAK,OAAOA,EAAQ,UAAWA,EAAQ,KAAK,EAG5C,KAAK,aAAaA,EAAQ,MAAOA,EAAQ,QAAQ,EAGvD,CACA,IAAI,aAAc,CAChB,MAAO,CAAC,CAAC,KAAK,SAChB,CAKA,IAAI,WAAY,CACd,GAAI,CAAC,KAAK,UAAW,MAAM,IAAI0F,EAAc,KAAuF,EAAuC,EAC3K,OAAO,KAAK,UAAU,QACxB,CACA,IAAI,gBAAiB,CACnB,GAAI,CAAC,KAAK,UAAW,MAAM,IAAIA,EAAc,KAAuF,EAAuC,EAC3K,OAAO,KAAK,eACd,CACA,IAAI,oBAAqB,CACvB,OAAI,KAAK,gBACA,KAAK,gBAAgB,SAAS,KAEhC,CAAC,CACV,CAIA,QAAS,CACP,GAAI,CAAC,KAAK,UAAW,MAAM,IAAIA,EAAc,KAAuF,EAAuC,EAC3K,KAAK,SAAS,OAAO,EACrB,IAAMC,EAAM,KAAK,UACjB,YAAK,UAAY,KACjB,KAAK,gBAAkB,KACvB,KAAK,aAAa,KAAKA,EAAI,QAAQ,EAC5BA,CACT,CAIA,OAAOC,EAAKC,EAAgB,CAC1B,KAAK,UAAYD,EACjB,KAAK,gBAAkBC,EACvB,KAAK,SAAS,OAAOD,EAAI,QAAQ,EACjC,KAAK,aAAa,oCAAoC,IAAI,EAC1D,KAAK,aAAa,KAAKA,EAAI,QAAQ,CACrC,CACA,YAAa,CACX,GAAI,KAAK,UAAW,CAClB,IAAMlF,EAAI,KAAK,UACf,KAAK,UAAU,QAAQ,EACvB,KAAK,UAAY,KACjB,KAAK,gBAAkB,KACvB,KAAK,iBAAiB,KAAKA,CAAC,CAC9B,CACF,CACA,aAAamF,EAAgBC,EAAqB,CAChD,GAAI,KAAK,YACP,MAAM,IAAIJ,EAAc,KAA2F,EAA2D,EAEhL,KAAK,gBAAkBG,EACvB,IAAME,EAAW,KAAK,SAEhBnD,EADWiD,EAAe,SACL,UACrBG,EAAgB,KAAK,eAAe,mBAAmB,KAAK,IAAI,EAAE,SAClEC,EAAW,IAAIC,GAAeL,EAAgBG,EAAeD,EAAS,QAAQ,EACpF,KAAK,UAAYA,EAAS,gBAAgBnD,EAAW,CACnD,MAAOmD,EAAS,OAChB,SAAAE,EACA,oBAAqBH,GAAuB,KAAK,mBACnD,CAAC,EAGD,KAAK,eAAe,aAAa,EACjC,KAAK,aAAa,oCAAoC,IAAI,EAC1D,KAAK,eAAe,KAAK,KAAK,UAAU,QAAQ,CAClD,CACA,MAAO,CACL,KAAK,UAAO,SAA8B,EAAG,CAC3C,OAAO,IAAK,GAAKf,EACnB,CACF,CACA,MAAO,CACL,KAAK,UAAyBoB,EAAkB,CAC9C,KAAMpB,EACN,UAAW,CAAC,CAAC,eAAe,CAAC,EAC7B,OAAQ,CACN,KAAM,MACR,EACA,QAAS,CACP,eAAgB,WAChB,iBAAkB,aAClB,aAAc,SACd,aAAc,QAChB,EACA,SAAU,CAAC,QAAQ,EACnB,WAAY,GACZ,SAAU,CAAIqB,EAAoB,CACpC,CAAC,CACH,CACF,CACA,OAAOrB,CACT,GAAG,EAIGmB,GAAN,MAAMG,CAAe,CAgBnB,mBAAmBC,EAAgB,CACjC,OAAO,IAAID,EAAe,KAAK,MAAO,KAAK,cAAeC,CAAc,CAC1E,CACA,YAAYnD,EAAO6C,EAAe5C,EAAQ,CACxC,KAAK,MAAQD,EACb,KAAK,cAAgB6C,EACrB,KAAK,OAAS5C,CAChB,CACA,IAAImD,EAAOC,EAAe,CACxB,OAAID,IAAUpE,GACL,KAAK,MAEVoE,IAAU1G,GACL,KAAK,cAEP,KAAK,OAAO,IAAI0G,EAAOC,CAAa,CAC7C,CACF,EACMnB,GAA4B,IAAIoB,EAAe,EAAE,EAoFvD,SAASC,GAAkBC,EAAoBC,EAAMC,EAAW,CAC9D,IAAMC,EAAOC,GAAWJ,EAAoBC,EAAK,MAAOC,EAAYA,EAAU,MAAQ,MAAS,EAC/F,OAAO,IAAIG,GAAYF,EAAMF,CAAI,CACnC,CACA,SAASG,GAAWJ,EAAoBC,EAAMC,EAAW,CAEvD,GAAIA,GAAaF,EAAmB,iBAAiBC,EAAK,MAAOC,EAAU,MAAM,QAAQ,EAAG,CAC1F,IAAMI,EAAQJ,EAAU,MACxBI,EAAM,gBAAkBL,EAAK,MAC7B,IAAMM,EAAWC,GAAsBR,EAAoBC,EAAMC,CAAS,EAC1E,OAAO,IAAIO,GAASH,EAAOC,CAAQ,CACrC,KAAO,CACL,GAAIP,EAAmB,aAAaC,EAAK,KAAK,EAAG,CAE/C,IAAMS,EAAsBV,EAAmB,SAASC,EAAK,KAAK,EAClE,GAAIS,IAAwB,KAAM,CAChC,IAAMC,EAAOD,EAAoB,MACjC,OAAAC,EAAK,MAAM,gBAAkBV,EAAK,MAClCU,EAAK,SAAWV,EAAK,SAAS,IAAIW,GAAKR,GAAWJ,EAAoBY,CAAC,CAAC,EACjED,CACT,CACF,CACA,IAAML,EAAQO,GAAqBZ,EAAK,KAAK,EACvCM,EAAWN,EAAK,SAAS,IAAIW,GAAKR,GAAWJ,EAAoBY,CAAC,CAAC,EACzE,OAAO,IAAIH,GAASH,EAAOC,CAAQ,CACrC,CACF,CACA,SAASC,GAAsBR,EAAoBC,EAAMC,EAAW,CAClE,OAAOD,EAAK,SAAS,IAAIa,GAAS,CAChC,QAAWC,KAAKb,EAAU,SACxB,GAAIF,EAAmB,iBAAiBc,EAAM,MAAOC,EAAE,MAAM,QAAQ,EACnE,OAAOX,GAAWJ,EAAoBc,EAAOC,CAAC,EAGlD,OAAOX,GAAWJ,EAAoBc,CAAK,CAC7C,CAAC,CACH,CACA,SAASD,GAAqBD,EAAG,CAC/B,OAAO,IAAII,GAAe,IAAIC,EAAgBL,EAAE,GAAG,EAAG,IAAIK,EAAgBL,EAAE,MAAM,EAAG,IAAIK,EAAgBL,EAAE,WAAW,EAAG,IAAIK,EAAgBL,EAAE,QAAQ,EAAG,IAAIK,EAAgBL,EAAE,IAAI,EAAGA,EAAE,OAAQA,EAAE,UAAWA,CAAC,CACjN,CACA,IAAMM,GAA6B,6BACnC,SAASC,GAA2BC,EAAeC,EAAU,CAC3D,GAAM,CACJ,WAAAC,EACA,0BAAAC,CACF,EAAIC,GAAUH,CAAQ,EAAI,CACxB,WAAYA,EACZ,0BAA2B,MAC7B,EAAIA,EACEI,EAAQC,GAAyB,GAAwEC,GAA2B,QAAQ,EAClJ,OAAAF,EAAM,IAAMH,EACZG,EAAM,0BAA4BF,EAC3BE,CACT,CACA,SAASC,GAAyBE,EAASC,EAAM,CAC/C,IAAMJ,EAAQ,IAAI,MAAM,6BAA6BG,GAAW,EAAE,EAAE,EACpE,OAAAH,EAAMP,EAA0B,EAAI,GACpCO,EAAM,iBAAmBI,EAClBJ,CACT,CACA,SAASK,GAAsCL,EAAO,CACpD,OAAOM,GAA2BN,CAAK,GAAKD,GAAUC,EAAM,GAAG,CACjE,CACA,SAASM,GAA2BN,EAAO,CACzC,MAAO,CAAC,CAACA,GAASA,EAAMP,EAA0B,CACpD,CAWA,IAAIc,IAAsC,IAAM,CAC9C,MAAMA,CAAsB,CAC1B,MAAO,CACL,KAAK,UAAO,SAAuC,EAAG,CACpD,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMD,EACN,UAAW,CAAC,CAAC,cAAc,CAAC,EAC5B,WAAY,GACZ,SAAU,CAAIE,CAAmB,EACjC,MAAO,EACP,KAAM,EACN,SAAU,SAAwCC,EAAIC,EAAK,CACrDD,EAAK,GACJE,EAAU,EAAG,eAAe,CAEnC,EACA,aAAc,CAACC,EAAY,EAC3B,cAAe,CACjB,CAAC,CACH,CACF,CACA,OAAON,CACT,GAAG,EAaH,SAASO,GAAiCC,EAAOC,EAAiB,CAChE,OAAID,EAAM,WAAa,CAACA,EAAM,YAC5BA,EAAM,UAAYE,GAA0BF,EAAM,UAAWC,EAAiB,UAAUD,EAAM,IAAI,EAAE,GAE/FA,EAAM,WAAaC,CAC5B,CA4GA,SAASE,GAAkBC,EAAG,CAC5B,IAAMC,EAAWD,EAAE,UAAYA,EAAE,SAAS,IAAID,EAAiB,EACzDG,EAAID,EAAWE,GAAAC,EAAA,GAChBJ,GADgB,CAEnB,SAAAC,CACF,GAAIG,EAAA,GACCJ,GAEL,MAAI,CAACE,EAAE,WAAa,CAACA,EAAE,gBAAkBD,GAAYC,EAAE,eAAiBA,EAAE,QAAUA,EAAE,SAAWG,IAC/FH,EAAE,UAAYI,IAETJ,CACT,CAEA,SAASK,GAAUC,EAAO,CACxB,OAAOA,EAAM,QAAUH,CACzB,CAKA,SAASI,GAAsBC,EAAQC,EAAY,CACjD,IAAMC,EAAeF,EAAO,OAAOV,GAAKO,GAAUP,CAAC,IAAMW,CAAU,EACnE,OAAAC,EAAa,KAAK,GAAGF,EAAO,OAAOV,GAAKO,GAAUP,CAAC,IAAMW,CAAU,CAAC,EAC7DC,CACT,CAaA,SAASC,GAAwBC,EAAU,CACzC,GAAI,CAACA,EAAU,OAAO,KAItB,GAAIA,EAAS,aAAa,UACxB,OAAOA,EAAS,YAAY,UAE9B,QAASC,EAAID,EAAS,OAAQC,EAAGA,EAAIA,EAAE,OAAQ,CAC7C,IAAMP,EAAQO,EAAE,YAKhB,GAAIP,GAAO,gBAAiB,OAAOA,EAAM,gBACzC,GAAIA,GAAO,UAAW,OAAOA,EAAM,SACrC,CACA,OAAO,IACT,CAEA,IAAMQ,GAAiB,CAACC,EAAcC,EAAoBC,EAAcC,IAAwBC,EAAIC,IAClG,IAAIC,GAAeL,EAAoBI,EAAE,kBAAmBA,EAAE,mBAAoBH,EAAcC,CAAmB,EAAE,SAASH,CAAY,EACnIK,EACR,EACKC,GAAN,KAAqB,CACnB,YAAYL,EAAoBM,EAAaC,EAAWN,EAAcC,EAAqB,CACzF,KAAK,mBAAqBF,EAC1B,KAAK,YAAcM,EACnB,KAAK,UAAYC,EACjB,KAAK,aAAeN,EACpB,KAAK,oBAAsBC,CAC7B,CACA,SAASM,EAAgB,CACvB,IAAMC,EAAa,KAAK,YAAY,MAC9BC,EAAW,KAAK,UAAY,KAAK,UAAU,MAAQ,KACzD,KAAK,sBAAsBD,EAAYC,EAAUF,CAAc,EAC/DG,GAAsB,KAAK,YAAY,IAAI,EAC3C,KAAK,oBAAoBF,EAAYC,EAAUF,CAAc,CAC/D,CAEA,sBAAsBI,EAAYC,EAAUC,EAAU,CACpD,IAAMC,EAAWC,GAAkBH,CAAQ,EAE3CD,EAAW,SAAS,QAAQK,GAAe,CACzC,IAAMC,EAAkBD,EAAY,MAAM,OAC1C,KAAK,iBAAiBA,EAAaF,EAASG,CAAe,EAAGJ,CAAQ,EACtE,OAAOC,EAASG,CAAe,CACjC,CAAC,EAED,OAAO,OAAOH,CAAQ,EAAE,QAAQI,GAAK,CACnC,KAAK,8BAA8BA,EAAGL,CAAQ,CAChD,CAAC,CACH,CACA,iBAAiBF,EAAYC,EAAUO,EAAe,CACpD,IAAMC,EAAST,EAAW,MACpBU,EAAOT,EAAWA,EAAS,MAAQ,KACzC,GAAIQ,IAAWC,EAEb,GAAID,EAAO,UAAW,CAEpB,IAAME,EAAUH,EAAc,WAAWC,EAAO,MAAM,EAClDE,GACF,KAAK,sBAAsBX,EAAYC,EAAUU,EAAQ,QAAQ,CAErE,MAEE,KAAK,sBAAsBX,EAAYC,EAAUO,CAAa,OAG5DE,GAEF,KAAK,8BAA8BT,EAAUO,CAAa,CAGhE,CACA,8BAA8BI,EAAOhB,EAAgB,CAG/CgB,EAAM,MAAM,WAAa,KAAK,mBAAmB,aAAaA,EAAM,MAAM,QAAQ,EACpF,KAAK,2BAA2BA,EAAOhB,CAAc,EAErD,KAAK,yBAAyBgB,EAAOhB,CAAc,CAEvD,CACA,2BAA2BgB,EAAOhB,EAAgB,CAChD,IAAMe,EAAUf,EAAe,WAAWgB,EAAM,MAAM,MAAM,EACtDV,EAAWS,GAAWC,EAAM,MAAM,UAAYD,EAAQ,SAAWf,EACjEO,EAAWC,GAAkBQ,CAAK,EACxC,QAAWC,KAAY,OAAO,OAAOV,CAAQ,EAC3C,KAAK,8BAA8BU,EAAUX,CAAQ,EAEvD,GAAIS,GAAWA,EAAQ,OAAQ,CAC7B,IAAMG,EAAeH,EAAQ,OAAO,OAAO,EACrCT,EAAWS,EAAQ,SAAS,oBAAoB,EACtD,KAAK,mBAAmB,MAAMC,EAAM,MAAM,SAAU,CAClD,aAAAE,EACA,MAAAF,EACA,SAAAV,CACF,CAAC,CACH,CACF,CACA,yBAAyBU,EAAOhB,EAAgB,CAC9C,IAAMe,EAAUf,EAAe,WAAWgB,EAAM,MAAM,MAAM,EAGtDV,EAAWS,GAAWC,EAAM,MAAM,UAAYD,EAAQ,SAAWf,EACjEO,EAAWC,GAAkBQ,CAAK,EACxC,QAAWC,KAAY,OAAO,OAAOV,CAAQ,EAC3C,KAAK,8BAA8BU,EAAUX,CAAQ,EAEnDS,IACEA,EAAQ,SAEVA,EAAQ,OAAO,WAAW,EAE1BA,EAAQ,SAAS,oBAAoB,GAKvCA,EAAQ,UAAY,KACpBA,EAAQ,MAAQ,KAEpB,CACA,oBAAoBX,EAAYC,EAAUC,EAAU,CAClD,IAAMC,EAAWC,GAAkBH,CAAQ,EAC3CD,EAAW,SAAS,QAAQe,GAAK,CAC/B,KAAK,eAAeA,EAAGZ,EAASY,EAAE,MAAM,MAAM,EAAGb,CAAQ,EACzD,KAAK,aAAa,IAAIc,GAAcD,EAAE,MAAM,QAAQ,CAAC,CACvD,CAAC,EACGf,EAAW,SAAS,QACtB,KAAK,aAAa,IAAIiB,GAAmBjB,EAAW,MAAM,QAAQ,CAAC,CAEvE,CACA,eAAeA,EAAYC,EAAUL,EAAgB,CACnD,IAAMa,EAAST,EAAW,MACpBU,EAAOT,EAAWA,EAAS,MAAQ,KAGzC,GAFAF,GAAsBU,CAAM,EAExBA,IAAWC,EACb,GAAID,EAAO,UAAW,CAEpB,IAAME,EAAUf,EAAe,mBAAmBa,EAAO,MAAM,EAC/D,KAAK,oBAAoBT,EAAYC,EAAUU,EAAQ,QAAQ,CACjE,MAEE,KAAK,oBAAoBX,EAAYC,EAAUL,CAAc,UAG3Da,EAAO,UAAW,CAEpB,IAAME,EAAUf,EAAe,mBAAmBa,EAAO,MAAM,EAC/D,GAAI,KAAK,mBAAmB,aAAaA,EAAO,QAAQ,EAAG,CACzD,IAAMS,EAAS,KAAK,mBAAmB,SAAST,EAAO,QAAQ,EAC/D,KAAK,mBAAmB,MAAMA,EAAO,SAAU,IAAI,EACnDE,EAAQ,SAAS,mBAAmBO,EAAO,QAAQ,EACnDP,EAAQ,UAAYO,EAAO,aAC3BP,EAAQ,MAAQO,EAAO,MAAM,MACzBP,EAAQ,QAGVA,EAAQ,OAAO,OAAOO,EAAO,aAAcA,EAAO,MAAM,KAAK,EAE/DnB,GAAsBmB,EAAO,MAAM,KAAK,EACxC,KAAK,oBAAoBlB,EAAY,KAAMW,EAAQ,QAAQ,CAC7D,KAAO,CACL,IAAMQ,EAAWC,GAAwBX,EAAO,QAAQ,EACxDE,EAAQ,UAAY,KACpBA,EAAQ,MAAQF,EAChBE,EAAQ,SAAWQ,EACfR,EAAQ,QAGVA,EAAQ,OAAO,aAAaF,EAAQE,EAAQ,QAAQ,EAEtD,KAAK,oBAAoBX,EAAY,KAAMW,EAAQ,QAAQ,CAC7D,CACF,MAEE,KAAK,oBAAoBX,EAAY,KAAMJ,CAAc,CAW/D,CACF,EACMyB,GAAN,KAAkB,CAChB,YAAYC,EAAM,CAChB,KAAK,KAAOA,EACZ,KAAK,MAAQ,KAAK,KAAK,KAAK,KAAK,OAAS,CAAC,CAC7C,CACF,EACMC,GAAN,KAAoB,CAClB,YAAYC,EAAWZ,EAAO,CAC5B,KAAK,UAAYY,EACjB,KAAK,MAAQZ,CACf,CACF,EACA,SAASa,GAAkBhB,EAAQC,EAAMd,EAAgB,CACvD,IAAMC,EAAaY,EAAO,MACpBX,EAAWY,EAAOA,EAAK,MAAQ,KACrC,OAAOgB,GAAoB7B,EAAYC,EAAUF,EAAgB,CAACC,EAAW,KAAK,CAAC,CACrF,CACA,SAAS8B,GAAoBC,EAAG,CAC9B,IAAMC,EAAmBD,EAAE,YAAcA,EAAE,YAAY,iBAAmB,KAC1E,MAAI,CAACC,GAAoBA,EAAiB,SAAW,EAAU,KACxD,CACL,KAAMD,EACN,OAAQC,CACV,CACF,CACA,SAASC,GAA2BC,EAAiBZ,EAAU,CAC7D,IAAMa,EAAY,OAAO,EACnBC,EAASd,EAAS,IAAIY,EAAiBC,CAAS,EACtD,OAAIC,IAAWD,EACT,OAAOD,GAAoB,YAAc,CAACG,GAAcH,CAAe,EAElEA,EAGAZ,EAAS,IAAIY,CAAe,EAGhCE,CACT,CACA,SAASP,GAAoB1B,EAAYC,EAAUC,EAAUiC,EAAYC,EAAS,CAChF,oBAAqB,CAAC,EACtB,kBAAmB,CAAC,CACtB,EAAG,CACD,IAAMC,EAAejC,GAAkBH,CAAQ,EAE/C,OAAAD,EAAW,SAAS,QAAQe,GAAK,CAC/BuB,GAAevB,EAAGsB,EAAatB,EAAE,MAAM,MAAM,EAAGb,EAAUiC,EAAW,OAAO,CAACpB,EAAE,KAAK,CAAC,EAAGqB,CAAM,EAC9F,OAAOC,EAAatB,EAAE,MAAM,MAAM,CACpC,CAAC,EAED,OAAO,QAAQsB,CAAY,EAAE,QAAQ,CAAC,CAACE,EAAGhC,CAAC,IAAMiC,GAA8BjC,EAAGL,EAAS,WAAWqC,CAAC,EAAGH,CAAM,CAAC,EAC1GA,CACT,CACA,SAASE,GAAetC,EAAYC,EAAUL,EAAgBuC,EAAYC,EAAS,CACjF,oBAAqB,CAAC,EACtB,kBAAmB,CAAC,CACtB,EAAG,CACD,IAAM3B,EAAST,EAAW,MACpBU,EAAOT,EAAWA,EAAS,MAAQ,KACnCU,EAAUf,EAAiBA,EAAe,WAAWI,EAAW,MAAM,MAAM,EAAI,KAEtF,GAAIU,GAAQD,EAAO,cAAgBC,EAAK,YAAa,CACnD,IAAM+B,EAAYC,GAA4BhC,EAAMD,EAAQA,EAAO,YAAY,qBAAqB,EAChGgC,EACFL,EAAO,kBAAkB,KAAK,IAAIf,GAAYc,CAAU,CAAC,GAGzD1B,EAAO,KAAOC,EAAK,KACnBD,EAAO,cAAgBC,EAAK,eAG1BD,EAAO,UACTiB,GAAoB1B,EAAYC,EAAUU,EAAUA,EAAQ,SAAW,KAAMwB,EAAYC,CAAM,EAG/FV,GAAoB1B,EAAYC,EAAUL,EAAgBuC,EAAYC,CAAM,EAE1EK,GAAa9B,GAAWA,EAAQ,QAAUA,EAAQ,OAAO,aAC3DyB,EAAO,oBAAoB,KAAK,IAAIb,GAAcZ,EAAQ,OAAO,UAAWD,CAAI,CAAC,CAErF,MACMA,GACF8B,GAA8BvC,EAAUU,EAASyB,CAAM,EAEzDA,EAAO,kBAAkB,KAAK,IAAIf,GAAYc,CAAU,CAAC,EAErD1B,EAAO,UACTiB,GAAoB1B,EAAY,KAAMW,EAAUA,EAAQ,SAAW,KAAMwB,EAAYC,CAAM,EAG3FV,GAAoB1B,EAAY,KAAMJ,EAAgBuC,EAAYC,CAAM,EAG5E,OAAOA,CACT,CACA,SAASM,GAA4BhC,EAAMD,EAAQkC,EAAM,CACvD,GAAI,OAAOA,GAAS,WAClB,OAAOA,EAAKjC,EAAMD,CAAM,EAE1B,OAAQkC,EAAM,CACZ,IAAK,mBACH,MAAO,CAACC,GAAUlC,EAAK,IAAKD,EAAO,GAAG,EACxC,IAAK,gCACH,MAAO,CAACmC,GAAUlC,EAAK,IAAKD,EAAO,GAAG,GAAK,CAACoC,GAAanC,EAAK,YAAaD,EAAO,WAAW,EAC/F,IAAK,SACH,MAAO,GACT,IAAK,4BACH,MAAO,CAACqC,GAA0BpC,EAAMD,CAAM,GAAK,CAACoC,GAAanC,EAAK,YAAaD,EAAO,WAAW,EACvG,IAAK,eACL,QACE,MAAO,CAACqC,GAA0BpC,EAAMD,CAAM,CAClD,CACF,CACA,SAAS+B,GAA8B5B,EAAOD,EAASyB,EAAQ,CAC7D,IAAMjC,EAAWC,GAAkBQ,CAAK,EAClC,EAAIA,EAAM,MAChB,OAAO,QAAQT,CAAQ,EAAE,QAAQ,CAAC,CAAC4C,EAAWC,CAAI,IAAM,CACjD,EAAE,UAEIrC,EACT6B,GAA8BQ,EAAMrC,EAAQ,SAAS,WAAWoC,CAAS,EAAGX,CAAM,EAElFI,GAA8BQ,EAAM,KAAMZ,CAAM,EAJhDI,GAA8BQ,EAAMrC,EAASyB,CAAM,CAMvD,CAAC,EACI,EAAE,UAEIzB,GAAWA,EAAQ,QAAUA,EAAQ,OAAO,YACrDyB,EAAO,oBAAoB,KAAK,IAAIb,GAAcZ,EAAQ,OAAO,UAAW,CAAC,CAAC,EAE9EyB,EAAO,oBAAoB,KAAK,IAAIb,GAAc,KAAM,CAAC,CAAC,EAJ1Da,EAAO,oBAAoB,KAAK,IAAIb,GAAc,KAAM,CAAC,CAAC,CAM9D,CAeA,SAAS0B,GAAW1C,EAAG,CACrB,OAAO,OAAOA,GAAM,UACtB,CACA,SAAS2C,GAAU3C,EAAG,CACpB,OAAO,OAAOA,GAAM,SACtB,CACA,SAAS4C,GAAUC,EAAO,CACxB,OAAOA,GAASH,GAAWG,EAAM,OAAO,CAC1C,CACA,SAASC,GAAcD,EAAO,CAC5B,OAAOA,GAASH,GAAWG,EAAM,WAAW,CAC9C,CACA,SAASE,GAAmBF,EAAO,CACjC,OAAOA,GAASH,GAAWG,EAAM,gBAAgB,CACnD,CACA,SAASG,GAAgBH,EAAO,CAC9B,OAAOA,GAASH,GAAWG,EAAM,aAAa,CAChD,CACA,SAASI,GAAWJ,EAAO,CACzB,OAAOA,GAASH,GAAWG,EAAM,QAAQ,CAC3C,CACA,SAASK,GAAaC,EAAG,CACvB,OAAOA,aAAaC,IAAcD,GAAG,OAAS,YAChD,CACA,IAAME,GAA+B,OAAO,eAAe,EAC3D,SAASC,IAAwB,CAC/B,OAAOC,GAAUC,GACRC,GAAcD,EAAI,IAAIE,GAAKA,EAAE,KAAKC,EAAK,CAAC,EAAGC,GAAUP,EAAa,CAAC,CAAC,CAAC,EAAE,KAAKrE,EAAI6E,GAAW,CAChG,QAAWnC,KAAUmC,EACnB,GAAInC,IAAW,GAGR,IAAIA,IAAW2B,GAEpB,OAAOA,GACF,GAAI3B,IAAW,IAASA,aAAkBoC,GAI/C,OAAOpC,EAIX,MAAO,EACT,CAAC,EAAGqC,GAAOC,GAAQA,IAASX,EAAa,EAAGM,EAAK,CAAC,CAAC,CACpD,CACH,CACA,SAASM,GAAYrD,EAAU9B,EAAc,CAC3C,OAAOoF,GAASjF,GAAK,CACnB,GAAM,CACJ,eAAAkF,EACA,gBAAAC,EACA,OAAQ,CACN,kBAAAC,EACA,oBAAAC,CACF,CACF,EAAIrF,EACJ,OAAIqF,EAAoB,SAAW,GAAKD,EAAkB,SAAW,EAC5DE,EAAGC,GAAAC,EAAA,GACLxF,GADK,CAER,aAAc,EAChB,EAAC,EAEIyF,GAAuBJ,EAAqBH,EAAgBC,EAAiBxD,CAAQ,EAAE,KAAKsD,GAASS,GACnGA,GAAiBhC,GAAUgC,CAAa,EAAIC,GAAqBT,EAAgBE,EAAmBzD,EAAU9B,CAAY,EAAIyF,EAAGI,CAAa,CACtJ,EAAG3F,EAAI6F,GAAiBL,GAAAC,EAAA,GACpBxF,GADoB,CAEvB,aAAA4F,CACF,EAAE,CAAC,CACL,CAAC,CACH,CACA,SAASH,GAAuB7C,EAAQiD,EAAWC,EAASnE,EAAU,CACpE,OAAOoE,GAAKnD,CAAM,EAAE,KAAKqC,GAASe,GAASC,GAAiBD,EAAM,UAAWA,EAAM,MAAOF,EAASD,EAAWlE,CAAQ,CAAC,EAAGuE,GAAMzD,GACvHA,IAAW,GACjB,EAAI,CAAC,CACV,CACA,SAASkD,GAAqBQ,EAAgBvD,EAAQjB,EAAU9B,EAAc,CAC5E,OAAOkG,GAAKnD,CAAM,EAAE,KAAKwD,GAAUJ,GAC1BK,GAAOC,GAAyBN,EAAM,MAAM,OAAQnG,CAAY,EAAG0G,GAAoBP,EAAM,MAAOnG,CAAY,EAAG2G,GAAoBL,EAAgBH,EAAM,KAAMrE,CAAQ,EAAG8E,GAAeN,EAAgBH,EAAM,MAAOrE,CAAQ,CAAC,CAC3O,EAAGuE,GAAMzD,GACDA,IAAW,GACjB,EAAI,CAAC,CACV,CASA,SAAS8D,GAAoBG,EAAU7G,EAAc,CACnD,OAAI6G,IAAa,MAAQ7G,GACvBA,EAAa,IAAI8G,GAAgBD,CAAQ,CAAC,EAErCpB,EAAG,EAAI,CAChB,CASA,SAASgB,GAAyBI,EAAU7G,EAAc,CACxD,OAAI6G,IAAa,MAAQ7G,GACvBA,EAAa,IAAI+G,GAAqBF,CAAQ,CAAC,EAE1CpB,EAAG,EAAI,CAChB,CACA,SAASmB,GAAeZ,EAAWgB,EAAWlF,EAAU,CACtD,IAAMmF,EAAcD,EAAU,YAAcA,EAAU,YAAY,YAAc,KAChF,GAAI,CAACC,GAAeA,EAAY,SAAW,EAAG,OAAOxB,EAAG,EAAI,EAC5D,IAAMyB,EAAyBD,EAAY,IAAIA,GACtCE,GAAM,IAAM,CACjB,IAAMC,EAAkBrF,GAAwBiF,CAAS,GAAKlF,EACxDiC,EAAQtB,GAA2BwE,EAAaG,CAAe,EAC/DC,EAAWrD,GAAcD,CAAK,EAAIA,EAAM,YAAYiD,EAAWhB,CAAS,EAAIsB,GAAsBF,EAAiB,IAAMrD,EAAMiD,EAAWhB,CAAS,CAAC,EAC1J,OAAOuB,GAAmBF,CAAQ,EAAE,KAAKhB,GAAM,CAAC,CAClD,CAAC,CACF,EACD,OAAOZ,EAAGyB,CAAsB,EAAE,KAAK1C,GAAsB,CAAC,CAChE,CACA,SAASmC,GAAoBX,EAAW/D,EAAMH,EAAU,CACtD,IAAMkF,EAAY/E,EAAKA,EAAK,OAAS,CAAC,EAEhCuF,EADyBvF,EAAK,MAAM,EAAGA,EAAK,OAAS,CAAC,EAAE,QAAQ,EAAE,IAAIM,GAAKD,GAAoBC,CAAC,CAAC,EAAE,OAAOkF,GAAKA,IAAM,IAAI,EACnE,IAAIC,GACvDP,GAAM,IAAM,CACjB,IAAMQ,EAAeD,EAAE,OAAO,IAAIlF,GAAoB,CACpD,IAAM4E,EAAkBrF,GAAwB2F,EAAE,IAAI,GAAK5F,EACrDiC,EAAQtB,GAA2BD,EAAkB4E,CAAe,EACpEC,EAAWpD,GAAmBF,CAAK,EAAIA,EAAM,iBAAiBiD,EAAWhB,CAAS,EAAIsB,GAAsBF,EAAiB,IAAMrD,EAAMiD,EAAWhB,CAAS,CAAC,EACpK,OAAOuB,GAAmBF,CAAQ,EAAE,KAAKhB,GAAM,CAAC,CAClD,CAAC,EACD,OAAOZ,EAAGkC,CAAY,EAAE,KAAKnD,GAAsB,CAAC,CACtD,CAAC,CACF,EACD,OAAOiB,EAAG+B,CAA4B,EAAE,KAAKhD,GAAsB,CAAC,CACtE,CACA,SAAS4B,GAAiBjE,EAAWyF,EAAS3B,EAASD,EAAWlE,EAAU,CAC1E,IAAM+D,EAAgB+B,GAAWA,EAAQ,YAAcA,EAAQ,YAAY,cAAgB,KAC3F,GAAI,CAAC/B,GAAiBA,EAAc,SAAW,EAAG,OAAOJ,EAAG,EAAI,EAChE,IAAMoC,EAA2BhC,EAAc,IAAInE,GAAK,CACtD,IAAM0F,EAAkBrF,GAAwB6F,CAAO,GAAK9F,EACtDiC,EAAQtB,GAA2Bf,EAAG0F,CAAe,EACrDC,EAAWnD,GAAgBH,CAAK,EAAIA,EAAM,cAAc5B,EAAWyF,EAAS3B,EAASD,CAAS,EAAIsB,GAAsBF,EAAiB,IAAMrD,EAAM5B,EAAWyF,EAAS3B,EAASD,CAAS,CAAC,EAClM,OAAOuB,GAAmBF,CAAQ,EAAE,KAAKhB,GAAM,CAAC,CAClD,CAAC,EACD,OAAOZ,EAAGoC,CAAwB,EAAE,KAAKrD,GAAsB,CAAC,CAClE,CACA,SAASsD,GAAiBhG,EAAUP,EAAOwG,EAAUC,EAAe,CAClE,IAAMC,EAAU1G,EAAM,QACtB,GAAI0G,IAAY,QAAaA,EAAQ,SAAW,EAC9C,OAAOxC,EAAG,EAAI,EAEhB,IAAMyC,EAAqBD,EAAQ,IAAIE,GAAkB,CACvD,IAAMpE,EAAQtB,GAA2B0F,EAAgBrG,CAAQ,EAC3DuF,EAAWvD,GAAUC,CAAK,EAAIA,EAAM,QAAQxC,EAAOwG,CAAQ,EAAIT,GAAsBxF,EAAU,IAAMiC,EAAMxC,EAAOwG,CAAQ,CAAC,EACjI,OAAOR,GAAmBF,CAAQ,CACpC,CAAC,EACD,OAAO5B,EAAGyC,CAAkB,EAAE,KAAK1D,GAAsB,EAAG4D,GAAkBJ,CAAa,CAAC,CAC9F,CACA,SAASI,GAAkBJ,EAAe,CACxC,OAAOK,GAAKC,EAAI1F,GAAU,CACxB,GAAK2F,GAAU3F,CAAM,EACrB,MAAM4F,GAA2BR,EAAepF,CAAM,CACxD,CAAC,EAAG1C,EAAI0C,GAAUA,IAAW,EAAI,CAAC,CACpC,CACA,SAAS6F,GAAkB3G,EAAUP,EAAOwG,EAAUC,EAAe,CACnE,IAAMU,EAAWnH,EAAM,SACvB,GAAI,CAACmH,GAAYA,EAAS,SAAW,EAAG,OAAOjD,EAAG,EAAI,EACtD,IAAMkD,EAAsBD,EAAS,IAAIP,GAAkB,CACzD,IAAMpE,EAAQtB,GAA2B0F,EAAgBrG,CAAQ,EAC3DuF,EAAWlD,GAAWJ,CAAK,EAAIA,EAAM,SAASxC,EAAOwG,CAAQ,EAAIT,GAAsBxF,EAAU,IAAMiC,EAAMxC,EAAOwG,CAAQ,CAAC,EACnI,OAAOR,GAAmBF,CAAQ,CACpC,CAAC,EACD,OAAO5B,EAAGkD,CAAmB,EAAE,KAAKnE,GAAsB,EAAG4D,GAAkBJ,CAAa,CAAC,CAC/F,CACA,IAAMY,GAAN,KAAc,CACZ,YAAYC,EAAc,CACxB,KAAK,aAAeA,GAAgB,IACtC,CACF,EACMC,GAAN,cAA+B,KAAM,CACnC,YAAYC,EAAS,CACnB,MAAM,EACN,KAAK,QAAUA,CACjB,CACF,EACA,SAASC,GAAUH,EAAc,CAC/B,OAAOI,GAAW,IAAIL,GAAQC,CAAY,CAAC,CAC7C,CAIA,SAASK,GAAqBC,EAAY,CACxC,OAAOC,GAAW,IAAIC,EAAc,IAAwF,EAA2F,CAAC,CAC1N,CACA,SAASC,GAAaC,EAAO,CAC3B,OAAOH,GAAWI,GAA8D,GAA4GC,GAA2B,aAAa,CAAC,CACvO,CACA,IAAMC,GAAN,KAAqB,CACnB,YAAYC,EAAeC,EAAS,CAClC,KAAK,cAAgBD,EACrB,KAAK,QAAUC,CACjB,CACA,mBAAmBL,EAAOK,EAAS,CACjC,IAAIC,EAAM,CAAC,EACPC,EAAIF,EAAQ,KAChB,OAAa,CAEX,GADAC,EAAMA,EAAI,OAAOC,EAAE,QAAQ,EACvBA,EAAE,mBAAqB,EACzB,OAAOC,EAAGF,CAAG,EAEf,GAAIC,EAAE,iBAAmB,GAAK,CAACA,EAAE,SAASE,CAAc,EACtD,OAAOd,GAAqBK,EAAM,UAAU,EAE9CO,EAAIA,EAAE,SAASE,CAAc,CAC/B,CACF,CACA,sBAAsBC,EAAUd,EAAYe,EAAW,CACrD,IAAMC,EAAU,KAAK,2BAA2BhB,EAAY,KAAK,cAAc,MAAMA,CAAU,EAAGc,EAAUC,CAAS,EACrH,GAAIf,EAAW,WAAW,GAAG,EAC3B,MAAM,IAAIiB,GAAiBD,CAAO,EAEpC,OAAOA,CACT,CACA,2BAA2BhB,EAAYS,EAASK,EAAUC,EAAW,CACnE,IAAMG,EAAU,KAAK,mBAAmBlB,EAAYS,EAAQ,KAAMK,EAAUC,CAAS,EACrF,OAAO,IAAII,GAAQD,EAAS,KAAK,kBAAkBT,EAAQ,YAAa,KAAK,QAAQ,WAAW,EAAGA,EAAQ,QAAQ,CACrH,CACA,kBAAkBW,EAAkBC,EAAc,CAChD,IAAMX,EAAM,CAAC,EACb,cAAO,QAAQU,CAAgB,EAAE,QAAQ,CAAC,CAACE,EAAGC,CAAC,IAAM,CAEnD,GADwB,OAAOA,GAAM,UAAYA,EAAE,WAAW,GAAG,EAC5C,CACnB,IAAMC,EAAaD,EAAE,UAAU,CAAC,EAChCb,EAAIY,CAAC,EAAID,EAAaG,CAAU,CAClC,MACEd,EAAIY,CAAC,EAAIC,CAEb,CAAC,EACMb,CACT,CACA,mBAAmBV,EAAYyB,EAAOX,EAAUC,EAAW,CACzD,IAAMW,EAAkB,KAAK,eAAe1B,EAAYyB,EAAM,SAAUX,EAAUC,CAAS,EACvFY,EAAW,CAAC,EAChB,cAAO,QAAQF,EAAM,QAAQ,EAAE,QAAQ,CAAC,CAACG,EAAMC,CAAK,IAAM,CACxDF,EAASC,CAAI,EAAI,KAAK,mBAAmB5B,EAAY6B,EAAOf,EAAUC,CAAS,CACjF,CAAC,EACM,IAAIe,EAAgBJ,EAAiBC,CAAQ,CACtD,CACA,eAAe3B,EAAY+B,EAAoBC,EAAgBjB,EAAW,CACxE,OAAOgB,EAAmB,IAAIE,GAAKA,EAAE,KAAK,WAAW,GAAG,EAAI,KAAK,aAAajC,EAAYiC,EAAGlB,CAAS,EAAI,KAAK,aAAakB,EAAGD,CAAc,CAAC,CAChJ,CACA,aAAahC,EAAYkC,EAAsBnB,EAAW,CACxD,IAAMoB,EAAMpB,EAAUmB,EAAqB,KAAK,UAAU,CAAC,CAAC,EAC5D,GAAI,CAACC,EAAK,MAAM,IAAIjC,EAAc,KAAmF,EAA+F,EACpN,OAAOiC,CACT,CACA,aAAaD,EAAsBF,EAAgB,CACjD,IAAII,EAAM,EACV,QAAWH,KAAKD,EAAgB,CAC9B,GAAIC,EAAE,OAASC,EAAqB,KAClC,OAAAF,EAAe,OAAOI,CAAG,EAClBH,EAETG,GACF,CACA,OAAOF,CACT,CACF,EACMG,GAAU,CACd,QAAS,GACT,iBAAkB,CAAC,EACnB,kBAAmB,CAAC,EACpB,WAAY,CAAC,EACb,wBAAyB,CAAC,CAC5B,EACA,SAASC,GAAgBC,EAAcnC,EAAOU,EAAU0B,EAAUhC,EAAe,CAC/E,IAAMiC,EAASC,GAAMH,EAAcnC,EAAOU,CAAQ,EAClD,OAAK2B,EAAO,SAKZD,EAAWG,GAAiCvC,EAAOoC,CAAQ,EACpDI,GAAkBJ,EAAUpC,EAAOU,EAAUN,CAAa,EAAE,KAAKqC,EAAItB,GAAKA,IAAM,GAAOkB,EAASK,EAAA,GAClGT,GACJ,CAAC,GAPOzB,EAAG6B,CAAM,CAQpB,CACA,SAASC,GAAMH,EAAcnC,EAAOU,EAAU,CAC5C,GAAIV,EAAM,OAAS,KACjB,OAAO2C,GAA0BjC,CAAQ,EAE3C,GAAIV,EAAM,OAAS,GACjB,OAAIA,EAAM,YAAc,SAAWmC,EAAa,YAAY,GAAKzB,EAAS,OAAS,GAC1EgC,EAAA,GACFT,IAGA,CACL,QAAS,GACT,iBAAkB,CAAC,EACnB,kBAAmBvB,EACnB,WAAY,CAAC,EACb,wBAAyB,CAAC,CAC5B,EAGF,IAAMJ,GADUN,EAAM,SAAW4C,IACblC,EAAUyB,EAAcnC,CAAK,EACjD,GAAI,CAACM,EAAK,OAAOoC,EAAA,GACZT,IAEL,IAAMtB,EAAY,CAAC,EACnB,OAAO,QAAQL,EAAI,WAAa,CAAC,CAAC,EAAE,QAAQ,CAAC,CAACY,EAAGC,CAAC,IAAM,CACtDR,EAAUO,CAAC,EAAIC,EAAE,IACnB,CAAC,EACD,IAAM0B,EAAavC,EAAI,SAAS,OAAS,EAAIoC,IAAA,GACxC/B,GACAL,EAAI,SAASA,EAAI,SAAS,OAAS,CAAC,EAAE,YACvCK,EACJ,MAAO,CACL,QAAS,GACT,iBAAkBL,EAAI,SACtB,kBAAmBI,EAAS,MAAMJ,EAAI,SAAS,MAAM,EAErD,WAAAuC,EACA,wBAAyBvC,EAAI,WAAa,CAAC,CAC7C,CACF,CACA,SAASqC,GAA0BjC,EAAU,CAC3C,MAAO,CACL,QAAS,GACT,WAAYA,EAAS,OAAS,EAAIoC,GAAKpC,CAAQ,EAAE,WAAa,CAAC,EAC/D,iBAAkBA,EAClB,kBAAmB,CAAC,EACpB,wBAAyB,CAAC,CAC5B,CACF,CACA,SAASqC,GAAMZ,EAAca,EAAkBC,EAAgBC,EAAQ,CACrE,OAAID,EAAe,OAAS,GAAKE,GAAyChB,EAAcc,EAAgBC,CAAM,EAErG,CACL,aAFQ,IAAIxB,EAAgBsB,EAAkBI,GAA4BF,EAAQ,IAAIxB,EAAgBuB,EAAgBd,EAAa,QAAQ,CAAC,CAAC,EAG7I,eAAgB,CAAC,CACnB,EAEEc,EAAe,SAAW,GAAKI,GAAyBlB,EAAcc,EAAgBC,CAAM,EAEvF,CACL,aAFQ,IAAIxB,EAAgBS,EAAa,SAAUmB,GAAgCnB,EAAcc,EAAgBC,EAAQf,EAAa,QAAQ,CAAC,EAG/I,eAAAc,CACF,EAGK,CACL,aAFQ,IAAIvB,EAAgBS,EAAa,SAAUA,EAAa,QAAQ,EAGxE,eAAAc,CACF,CACF,CACA,SAASK,GAAgCnB,EAAcc,EAAgBM,EAAQhC,EAAU,CACvF,IAAMjB,EAAM,CAAC,EACb,QAAWkD,KAAKD,EACd,GAAIE,GAAetB,EAAcc,EAAgBO,CAAC,GAAK,CAACjC,EAASmC,GAAUF,CAAC,CAAC,EAAG,CAC9E,IAAM,EAAI,IAAI9B,EAAgB,CAAC,EAAG,CAAC,CAAC,EACpCpB,EAAIoD,GAAUF,CAAC,CAAC,EAAI,CACtB,CAEF,OAAOd,IAAA,GACFnB,GACAjB,EAEP,CACA,SAAS8C,GAA4BG,EAAQI,EAAgB,CAC3D,IAAMrD,EAAM,CAAC,EACbA,EAAIG,CAAc,EAAIkD,EACtB,QAAWH,KAAKD,EACd,GAAIC,EAAE,OAAS,IAAME,GAAUF,CAAC,IAAM/C,EAAgB,CACpD,IAAMoB,EAAI,IAAIH,EAAgB,CAAC,EAAG,CAAC,CAAC,EACpCpB,EAAIoD,GAAUF,CAAC,CAAC,EAAI3B,CACtB,CAEF,OAAOvB,CACT,CACA,SAAS6C,GAAyChB,EAAcc,EAAgBM,EAAQ,CACtF,OAAOA,EAAO,KAAKC,GAAKC,GAAetB,EAAcc,EAAgBO,CAAC,GAAKE,GAAUF,CAAC,IAAM/C,CAAc,CAC5G,CACA,SAAS4C,GAAyBlB,EAAcc,EAAgBM,EAAQ,CACtE,OAAOA,EAAO,KAAKC,GAAKC,GAAetB,EAAcc,EAAgBO,CAAC,CAAC,CACzE,CACA,SAASC,GAAetB,EAAcc,EAAgBO,EAAG,CACvD,OAAKrB,EAAa,YAAY,GAAKc,EAAe,OAAS,IAAMO,EAAE,YAAc,OACxE,GAEFA,EAAE,OAAS,EACpB,CAMA,SAASI,GAAiB5D,EAAO6D,EAAYnD,EAAUoD,EAAQ,CAY7D,OAAIJ,GAAU1D,CAAK,IAAM8D,IAAWA,IAAWrD,GAAkB,CAACgD,GAAeI,EAAYnD,EAAUV,CAAK,GACnG,GAEFsC,GAAMuB,EAAY7D,EAAOU,CAAQ,EAAE,OAC5C,CACA,SAASqD,GAAiB5B,EAAczB,EAAUoD,EAAQ,CACxD,OAAOpD,EAAS,SAAW,GAAK,CAACyB,EAAa,SAAS2B,CAAM,CAC/D,CAOA,IAAME,GAAN,KAAuB,CAAC,EACxB,SAASC,GAAY7B,EAAU8B,EAAcC,EAAmBjB,EAAQ7C,EAASD,EAAegE,EAA4B,YAAa,CACvI,OAAO,IAAIC,GAAWjC,EAAU8B,EAAcC,EAAmBjB,EAAQ7C,EAAS+D,EAA2BhE,CAAa,EAAE,UAAU,CACxI,CACA,IAAMkE,GAAwB,GACxBD,GAAN,KAAiB,CACf,YAAYjC,EAAU8B,EAAcC,EAAmBjB,EAAQ7C,EAAS+D,EAA2BhE,EAAe,CAChH,KAAK,SAAWgC,EAChB,KAAK,aAAe8B,EACpB,KAAK,kBAAoBC,EACzB,KAAK,OAASjB,EACd,KAAK,QAAU7C,EACf,KAAK,0BAA4B+D,EACjC,KAAK,cAAgBhE,EACrB,KAAK,eAAiB,IAAID,GAAe,KAAK,cAAe,KAAK,OAAO,EACzE,KAAK,sBAAwB,EAC7B,KAAK,eAAiB,EACxB,CACA,aAAaoE,EAAG,CACd,OAAO,IAAIzE,EAAc,KAAoJ,IAAIyE,EAAE,YAAY,GAAG,CACpM,CACA,WAAY,CACV,IAAMC,EAAmBzB,GAAM,KAAK,QAAQ,KAAM,CAAC,EAAG,CAAC,EAAG,KAAK,MAAM,EAAE,aACvE,OAAO,KAAK,MAAMyB,CAAgB,EAAE,KAAK/B,EAAIlB,GAAY,CAGvD,IAAMkD,EAAO,IAAIC,GAAuB,CAAC,EAAG,OAAO,OAAO,CAAC,CAAC,EAAG,OAAO,OAAOhC,EAAA,GACxE,KAAK,QAAQ,YACjB,EAAG,KAAK,QAAQ,SAAU,CAAC,EAAGjC,EAAgB,KAAK,kBAAmB,KAAM,CAAC,CAAC,EACzEkE,EAAW,IAAIC,GAASH,EAAMlD,CAAQ,EACtCsD,EAAa,IAAIC,GAAoB,GAAIH,CAAQ,EACjDI,EAAOC,GAA0BP,EAAM,CAAC,EAAG,KAAK,QAAQ,YAAa,KAAK,QAAQ,QAAQ,EAIhG,OAAAM,EAAK,YAAc,KAAK,QAAQ,YAChCF,EAAW,IAAM,KAAK,cAAc,UAAUE,CAAI,EAClD,KAAK,qBAAqBF,EAAW,MAAO,IAAI,EACzC,CACL,MAAOA,EACP,KAAAE,CACF,CACF,CAAC,CAAC,CACJ,CACA,MAAMP,EAAkB,CAEtB,OADkB,KAAK,oBAAoB,KAAK,SAAU,KAAK,OAAQA,EAAkB/D,CAAc,EACtF,KAAKwE,GAAWV,GAAK,CACpC,GAAIA,aAAa1D,GACf,YAAK,QAAU0D,EAAE,QACV,KAAK,MAAMA,EAAE,QAAQ,IAAI,EAElC,MAAIA,aAAaW,GACT,KAAK,aAAaX,CAAC,EAErBA,CACR,CAAC,CAAC,CACJ,CACA,qBAAqBY,EAAWC,EAAQ,CACtC,IAAMpF,EAAQmF,EAAU,MAClBE,EAAIC,GAAatF,EAAOoF,EAAQ,KAAK,yBAAyB,EACpEpF,EAAM,OAAS,OAAO,OAAOqF,EAAE,MAAM,EACrCrF,EAAM,KAAO,OAAO,OAAOqF,EAAE,IAAI,EACjCF,EAAU,SAAS,QAAQI,GAAK,KAAK,qBAAqBA,EAAGvF,CAAK,CAAC,CACrE,CACA,oBAAoBoC,EAAUc,EAAQf,EAAc2B,EAAQ,CAC1D,OAAI3B,EAAa,SAAS,SAAW,GAAKA,EAAa,YAAY,EAC1D,KAAK,gBAAgBC,EAAUc,EAAQf,CAAY,EAErD,KAAK,eAAeC,EAAUc,EAAQf,EAAcA,EAAa,SAAU2B,EAAQ,EAAI,EAAE,KAAKrB,EAAIhB,GAASA,aAAiBmD,GAAW,CAACnD,CAAK,EAAI,CAAC,CAAC,CAAC,CAC7J,CASA,gBAAgBW,EAAUc,EAAQf,EAAc,CAG9C,IAAMqD,EAAe,CAAC,EACtB,QAAW/D,KAAS,OAAO,KAAKU,EAAa,QAAQ,EAC/CV,IAAU,UACZ+D,EAAa,QAAQ/D,CAAK,EAE1B+D,EAAa,KAAK/D,CAAK,EAG3B,OAAOgE,GAAKD,CAAY,EAAE,KAAKE,GAAUC,GAAe,CACtD,IAAMlE,EAAQU,EAAa,SAASwD,CAAW,EAIzCC,EAAeC,GAAsB3C,EAAQyC,CAAW,EAC9D,OAAO,KAAK,oBAAoBvD,EAAUwD,EAAcnE,EAAOkE,CAAW,CAC5E,CAAC,EAAGG,GAAK,CAACvE,EAAUwE,KAClBxE,EAAS,KAAK,GAAGwE,CAAc,EACxBxE,EACR,EAAGyE,GAAe,IAAI,EAAGlD,GAAO,EAAGmD,GAAS1E,GAAY,CACvD,GAAIA,IAAa,KAAM,OAAO2E,GAAU/D,CAAY,EAIpD,IAAMgE,EAAiBC,GAAsB7E,CAAQ,EAMrD,OAAA8E,GAA4BF,CAAc,EACnC3F,EAAG2F,CAAc,CAC1B,CAAC,CAAC,CACJ,CACA,eAAe/D,EAAUmB,EAAQpB,EAAczB,EAAUoD,EAAQwC,EAAgB,CAC/E,OAAOb,GAAKlC,CAAM,EAAE,KAAKmC,GAAUlC,GAC1B,KAAK,2BAA2BA,EAAE,WAAapB,EAAUmB,EAAQC,EAAGrB,EAAczB,EAAUoD,EAAQwC,CAAc,EAAE,KAAKrB,GAAWV,GAAK,CAC9I,GAAIA,aAAaW,GACf,OAAO1E,EAAG,IAAI,EAEhB,MAAM+D,CACR,CAAC,CAAC,CACH,EAAGgC,GAAMC,GAAK,CAAC,CAACA,CAAC,EAAGvB,GAAWV,GAAK,CACnC,GAAIkC,GAAalC,CAAC,EAChB,OAAIR,GAAiB5B,EAAczB,EAAUoD,CAAM,EAC1CtD,EAAG,IAAIwD,EAAkB,EAE3BkC,GAAU/D,CAAY,EAE/B,MAAMoC,CACR,CAAC,CAAC,CACJ,CACA,2BAA2BnC,EAAUmB,EAAQvD,EAAO6D,EAAYnD,EAAUoD,EAAQwC,EAAgB,CAChG,OAAK1C,GAAiB5D,EAAO6D,EAAYnD,EAAUoD,CAAM,EACrD9D,EAAM,aAAe,OAChB,KAAK,yBAAyBoC,EAAUyB,EAAY7D,EAAOU,EAAUoD,CAAM,EAEhF,KAAK,gBAAkBwC,EAClB,KAAK,uCAAuClE,EAAUyB,EAAYN,EAAQvD,EAAOU,EAAUoD,CAAM,EAEnGoC,GAAUrC,CAAU,EAPwCqC,GAAUrC,CAAU,CAQzF,CACA,uCAAuCzB,EAAUD,EAAcoB,EAAQvD,EAAOU,EAAUoD,EAAQ,CAC9F,GAAM,CACJ,QAAA4C,EACA,iBAAA1D,EACA,wBAAA2D,EACA,kBAAAC,CACF,EAAItE,GAAMH,EAAcnC,EAAOU,CAAQ,EACvC,GAAI,CAACgG,EAAS,OAAOR,GAAU/D,CAAY,EAGvCnC,EAAM,WAAW,WAAW,GAAG,IACjC,KAAK,wBACD,KAAK,sBAAwBsE,KAI/B,KAAK,eAAiB,KAG1B,IAAM1D,EAAU,KAAK,eAAe,sBAAsBoC,EAAkBhD,EAAM,WAAY2G,CAAuB,EACrH,OAAO,KAAK,eAAe,mBAAmB3G,EAAOY,CAAO,EAAE,KAAKqF,GAASY,GACnE,KAAK,eAAezE,EAAUmB,EAAQpB,EAAc0E,EAAY,OAAOD,CAAiB,EAAG9C,EAAQ,EAAK,CAChH,CAAC,CACJ,CACA,yBAAyB1B,EAAUyB,EAAY7D,EAAOU,EAAUoD,EAAQ,CACtE,IAAMgD,EAAc5E,GAAgB2B,EAAY7D,EAAOU,EAAU0B,EAAU,KAAK,aAAa,EAC7F,OAAIpC,EAAM,OAAS,OAKjB6D,EAAW,SAAW,CAAC,GAElBiD,EAAY,KAAKC,GAAU1E,GAC3BA,EAAO,SAIZD,EAAWpC,EAAM,WAAaoC,EACvB,KAAK,eAAeA,EAAUpC,EAAOU,CAAQ,EAAE,KAAKqG,GAAU,CAAC,CACpE,OAAQC,CACV,IAAM,CACJ,IAAMC,EAAgBjH,EAAM,iBAAmBoC,EACzC,CACJ,iBAAAY,EACA,kBAAA4D,EACA,WAAA/D,CACF,EAAIR,EACE6E,EAAW,IAAIxC,GAAuB1B,EAAkBH,EAAY,OAAO,OAAOH,EAAA,GACnF,KAAK,QAAQ,YACjB,EAAG,KAAK,QAAQ,SAAUyE,GAAQnH,CAAK,EAAG0D,GAAU1D,CAAK,EAAGA,EAAM,WAAaA,EAAM,kBAAoB,KAAMA,EAAOoH,GAAWpH,CAAK,CAAC,EAClI,CACJ,aAAAmC,GACA,eAAAc,CACF,EAAIF,GAAMc,EAAYb,EAAkB4D,EAAmBI,CAAW,EACtE,GAAI/D,EAAe,SAAW,GAAKd,GAAa,YAAY,EAC1D,OAAO,KAAK,gBAAgB8E,EAAeD,EAAa7E,EAAY,EAAE,KAAKM,EAAIlB,IACzEA,KAAa,KACR,KAEF,IAAIqD,GAASsC,EAAU3F,EAAQ,CACvC,CAAC,EAEJ,GAAIyF,EAAY,SAAW,GAAK/D,EAAe,SAAW,EACxD,OAAOzC,EAAG,IAAIoE,GAASsC,EAAU,CAAC,CAAC,CAAC,EAEtC,IAAMG,EAAkB3D,GAAU1D,CAAK,IAAM8D,EAS7C,OAAO,KAAK,eAAemD,EAAeD,EAAa7E,GAAcc,EAAgBoE,EAAkB5G,EAAiBqD,EAAQ,EAAI,EAAE,KAAKrB,EAAIhB,IACtI,IAAImD,GAASsC,EAAUzF,cAAiBmD,GAAW,CAACnD,EAAK,EAAI,CAAC,CAAC,CACvE,CAAC,CACJ,CAAC,CAAC,GA3COyE,GAAUrC,CAAU,CA4C9B,CAAC,CACJ,CACA,eAAezB,EAAUpC,EAAOU,EAAU,CACxC,OAAIV,EAAM,SAEDQ,EAAG,CACR,OAAQR,EAAM,SACd,SAAAoC,CACF,CAAC,EAECpC,EAAM,aAEJA,EAAM,gBAAkB,OACnBQ,EAAG,CACR,OAAQR,EAAM,cACd,SAAUA,EAAM,eAClB,CAAC,EAEIsH,GAAiBlF,EAAUpC,EAAOU,EAAU,KAAK,aAAa,EAAE,KAAKuF,GAASsB,GAC/EA,EACK,KAAK,aAAa,aAAanF,EAAUpC,CAAK,EAAE,KAAKwH,EAAIC,GAAO,CACrEzH,EAAM,cAAgByH,EAAI,OAC1BzH,EAAM,gBAAkByH,EAAI,QAC9B,CAAC,CAAC,EAEG1H,GAAaC,CAAK,CAC1B,CAAC,EAEGQ,EAAG,CACR,OAAQ,CAAC,EACT,SAAA4B,CACF,CAAC,CACH,CACF,EACA,SAASiE,GAA4BqB,EAAO,CAC1CA,EAAM,KAAK,CAACC,EAAGC,IACTD,EAAE,MAAM,SAAWlH,EAAuB,GAC1CmH,EAAE,MAAM,SAAWnH,EAAuB,EACvCkH,EAAE,MAAM,OAAO,cAAcC,EAAE,MAAM,MAAM,CACnD,CACH,CACA,SAASC,GAAmBC,EAAM,CAChC,IAAM5E,EAAS4E,EAAK,MAAM,YAC1B,OAAO5E,GAAUA,EAAO,OAAS,EACnC,CAMA,SAASkD,GAAsBsB,EAAO,CACpC,IAAMrF,EAAS,CAAC,EAEV0F,EAAc,IAAI,IACxB,QAAWD,KAAQJ,EAAO,CACxB,GAAI,CAACG,GAAmBC,CAAI,EAAG,CAC7BzF,EAAO,KAAKyF,CAAI,EAChB,QACF,CACA,IAAME,EAAyB3F,EAAO,KAAK4F,GAAcH,EAAK,MAAM,cAAgBG,EAAW,MAAM,WAAW,EAC5GD,IAA2B,QAC7BA,EAAuB,SAAS,KAAK,GAAGF,EAAK,QAAQ,EACrDC,EAAY,IAAIC,CAAsB,GAEtC3F,EAAO,KAAKyF,CAAI,CAEpB,CAKA,QAAWI,KAAcH,EAAa,CACpC,IAAM5B,EAAiBC,GAAsB8B,EAAW,QAAQ,EAChE7F,EAAO,KAAK,IAAIuC,GAASsD,EAAW,MAAO/B,CAAc,CAAC,CAC5D,CACA,OAAO9D,EAAO,OAAOkD,GAAK,CAACwC,EAAY,IAAIxC,CAAC,CAAC,CAC/C,CAaA,SAAS4C,GAAQC,EAAO,CACtB,OAAOA,EAAM,MAAQ,CAAC,CACxB,CACA,SAASC,GAAWD,EAAO,CACzB,OAAOA,EAAM,SAAW,CAAC,CAC3B,CACA,SAASE,GAAUC,EAAUC,EAAcC,EAAmBC,EAAQC,EAAYC,EAA2B,CAC3G,OAAOC,GAASC,GAAKC,GAAYR,EAAUC,EAAcC,EAAmBC,EAAQI,EAAE,aAAcH,EAAYC,CAAyB,EAAE,KAAKI,EAAI,CAAC,CACnJ,MAAOC,EACP,KAAMC,CACR,IACSC,GAAAC,EAAA,GACFN,GADE,CAEL,eAAAG,EACA,kBAAAC,CACF,EACD,CAAC,CAAC,CACL,CACA,SAASG,GAAYT,EAA2BL,EAAU,CACxD,OAAOM,GAASC,GAAK,CACnB,GAAM,CACJ,eAAAG,EACA,OAAQ,CACN,kBAAAK,CACF,CACF,EAAIR,EACJ,GAAI,CAACQ,EAAkB,OACrB,OAAOC,EAAGT,CAAC,EAKb,IAAMU,EAA2B,IAAI,IAAIF,EAAkB,IAAIG,GAASA,EAAM,KAAK,CAAC,EAC9EC,EAA2B,IAAI,IACrC,QAAWtB,KAASoB,EAClB,GAAI,CAAAE,EAAyB,IAAItB,CAAK,EAItC,QAAWuB,KAAYC,GAAiBxB,CAAK,EAC3CsB,EAAyB,IAAIC,CAAQ,EAGzC,IAAIE,EAAkB,EACtB,OAAOC,GAAKJ,CAAwB,EAAE,KAAKK,GAAU3B,GAC/CoB,EAAyB,IAAIpB,CAAK,EAC7B4B,GAAW5B,EAAOa,EAAgBL,EAA2BL,CAAQ,GAE5EH,EAAM,KAAO6B,GAAa7B,EAAOA,EAAM,OAAQQ,CAAyB,EAAE,QACnEW,EAAG,MAAM,EAEnB,EAAGW,EAAI,IAAML,GAAiB,EAAGM,GAAS,CAAC,EAAGtB,GAASuB,GAAKP,IAAoBH,EAAyB,KAAOH,EAAGT,CAAC,EAAIuB,EAAK,CAAC,CACjI,CAAC,CACH,CAIA,SAAST,GAAiBxB,EAAO,CAC/B,IAAMkC,EAAclC,EAAM,SAAS,IAAImC,GAASX,GAAiBW,CAAK,CAAC,EAAE,KAAK,EAC9E,MAAO,CAACnC,EAAO,GAAGkC,CAAW,CAC/B,CACA,SAASN,GAAWQ,EAAWC,EAAW7B,EAA2BL,EAAU,CAC7E,IAAMG,EAAS8B,EAAU,YACnBE,EAAUF,EAAU,SAC1B,OAAI9B,GAAQ,QAAU,QAAa,CAACiC,GAAejC,CAAM,IACvDgC,EAAQE,EAAa,EAAIlC,EAAO,OAE3BmC,GAAYH,EAASF,EAAWC,EAAWlC,CAAQ,EAAE,KAAKS,EAAI8B,IACnEN,EAAU,cAAgBM,EAC1BN,EAAU,KAAOP,GAAaO,EAAWA,EAAU,OAAQ5B,CAAyB,EAAE,QAC/E,KACR,CAAC,CACJ,CACA,SAASiC,GAAYH,EAASF,EAAWC,EAAWlC,EAAU,CAC5D,IAAMwC,EAAOC,GAAYN,CAAO,EAChC,GAAIK,EAAK,SAAW,EAClB,OAAOxB,EAAG,CAAC,CAAC,EAEd,IAAM0B,EAAO,CAAC,EACd,OAAOnB,GAAKiB,CAAI,EAAE,KAAKlC,GAASqC,GAAOC,GAAYT,EAAQQ,CAAG,EAAGV,EAAWC,EAAWlC,CAAQ,EAAE,KAAK6C,GAAM,EAAGlB,EAAImB,GAAS,CAC1HJ,EAAKC,CAAG,EAAIG,CACd,CAAC,CAAC,CAAC,EAAGlB,GAAS,CAAC,EAAGmB,GAAML,CAAI,EAAGM,GAAWC,GAAKC,GAAaD,CAAC,EAAInB,GAAQqB,GAAWF,CAAC,CAAC,CAAC,CAC1F,CACA,SAASL,GAAYQ,EAAgBnB,EAAWC,EAAWlC,EAAU,CACnE,IAAMqD,EAAkBC,GAAwBrB,CAAS,GAAKjC,EACxDuD,EAAWC,GAA2BJ,EAAgBC,CAAe,EACrEI,EAAgBF,EAAS,QAAUA,EAAS,QAAQtB,EAAWC,CAAS,EAAIwB,GAAsBL,EAAiB,IAAME,EAAStB,EAAWC,CAAS,CAAC,EAC7J,OAAOyB,GAAmBF,CAAa,CACzC,CAQA,SAASG,GAAUC,EAAM,CACvB,OAAOC,GAAUC,GAAK,CACpB,IAAMC,EAAaH,EAAKE,CAAC,EACzB,OAAIC,EACKzC,GAAKyC,CAAU,EAAE,KAAKvD,EAAI,IAAMsD,CAAC,CAAC,EAEpC/C,EAAG+C,CAAC,CACb,CAAC,CACH,CAyBA,IAAIE,IAA8B,IAAM,CACtC,MAAMA,CAAc,CAIlB,WAAWC,EAAU,CACnB,IAAIC,EACAtE,EAAQqE,EAAS,KACrB,KAAOrE,IAAU,QACfsE,EAAY,KAAK,yBAAyBtE,CAAK,GAAKsE,EACpDtE,EAAQA,EAAM,SAAS,KAAKmC,GAASA,EAAM,SAAWoC,CAAc,EAEtE,OAAOD,CACT,CAKA,yBAAyBD,EAAU,CACjC,OAAOA,EAAS,KAAK7B,EAAa,CACpC,CACA,MAAO,CACL,KAAK,UAAO,SAA+B,EAAG,CAC5C,OAAO,IAAK,GAAK4B,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BI,EAAmB,CAChD,MAAOJ,EACP,QAAS,IAAaK,EAAOC,EAAoB,EACjD,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAON,CACT,GAAG,EAOCM,IAAqC,IAAM,CAC7C,MAAMA,UAA6BN,EAAc,CAC/C,YAAYO,EAAO,CACjB,MAAM,EACN,KAAK,MAAQA,CACf,CAMA,YAAYN,EAAU,CACpB,IAAMM,EAAQ,KAAK,WAAWN,CAAQ,EAClCM,IAAU,QACZ,KAAK,MAAM,SAASA,CAAK,CAE7B,CACA,MAAO,CACL,KAAK,UAAO,SAAsC,EAAG,CACnD,OAAO,IAAK,GAAKD,GAAyBE,EAAYC,EAAK,CAAC,CAC9D,CACF,CACA,MAAO,CACL,KAAK,WAA0BL,EAAmB,CAChD,MAAOE,EACP,QAASA,EAAqB,UAC9B,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAUGI,GAAoC,IAAIC,EAAiF,GAAI,CACjI,WAAY,OACZ,QAAS,KAAO,CAAC,EACnB,CAAC,EAYKC,GAAsB,IAAID,EAAsC,EAAE,EACpEE,IAAmC,IAAM,CAC3C,MAAMA,CAAmB,CACvB,aAAc,CACZ,KAAK,iBAAmB,IAAI,QAC5B,KAAK,gBAAkB,IAAI,QAC3B,KAAK,SAAWR,EAAOS,EAAQ,CACjC,CACA,cAAclF,EAAO,CACnB,GAAI,KAAK,iBAAiB,IAAIA,CAAK,EACjC,OAAO,KAAK,iBAAiB,IAAIA,CAAK,EACjC,GAAIA,EAAM,iBACf,OAAOmB,EAAGnB,EAAM,gBAAgB,EAE9B,KAAK,qBACP,KAAK,oBAAoBA,CAAK,EAEhC,IAAMmF,EAAarB,GAAmB9D,EAAM,cAAc,CAAC,EAAE,KAAKY,EAAIwE,EAAwB,EAAGtD,EAAIuD,GAAa,CAC5G,KAAK,mBACP,KAAK,kBAAkBrF,CAAK,EAG9BA,EAAM,iBAAmBqF,CAC3B,CAAC,EAAGC,GAAS,IAAM,CACjB,KAAK,iBAAiB,OAAOtF,CAAK,CACpC,CAAC,CAAC,EAEIuF,EAAS,IAAIC,GAAsBL,EAAY,IAAM,IAAIM,CAAS,EAAE,KAAKC,GAAS,CAAC,EACzF,YAAK,iBAAiB,IAAI1F,EAAOuF,CAAM,EAChCA,CACT,CACA,aAAaI,EAAgB3F,EAAO,CAClC,GAAI,KAAK,gBAAgB,IAAIA,CAAK,EAChC,OAAO,KAAK,gBAAgB,IAAIA,CAAK,EAChC,GAAIA,EAAM,cACf,OAAOmB,EAAG,CACR,OAAQnB,EAAM,cACd,SAAUA,EAAM,eAClB,CAAC,EAEC,KAAK,qBACP,KAAK,oBAAoBA,CAAK,EAGhC,IAAMmF,EADyBS,GAAa5F,EAAO,KAAK,SAAU2F,EAAgB,KAAK,iBAAiB,EAC9D,KAAKL,GAAS,IAAM,CAC5D,KAAK,gBAAgB,OAAOtF,CAAK,CACnC,CAAC,CAAC,EAEIuF,EAAS,IAAIC,GAAsBL,EAAY,IAAM,IAAIM,CAAS,EAAE,KAAKC,GAAS,CAAC,EACzF,YAAK,gBAAgB,IAAI1F,EAAOuF,CAAM,EAC/BA,CACT,CACA,MAAO,CACL,KAAK,UAAO,SAAoC,EAAG,CACjD,OAAO,IAAK,GAAKN,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BT,EAAmB,CAChD,MAAOS,EACP,QAASA,EAAmB,UAC5B,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAYH,SAASW,GAAa5F,EAAO6F,EAAUF,EAAgBG,EAAmB,CACxE,OAAOhC,GAAmB9D,EAAM,aAAa,CAAC,EAAE,KAAKY,EAAIwE,EAAwB,EAAG3E,GAASC,GACvFA,aAAaqF,IAAmB,MAAM,QAAQrF,CAAC,EAC1CS,EAAGT,CAAC,EAEJgB,GAAKmE,EAAS,mBAAmBnF,CAAC,CAAC,CAE7C,EAAGE,EAAIoF,GAAmB,CACrBF,GACFA,EAAkB9F,CAAK,EAIzB,IAAIG,EACA8F,EACAC,EAA8B,GAClC,OAAI,MAAM,QAAQF,CAAe,GAC/BC,EAAYD,EACZE,EAA8B,KAE9B/F,EAAW6F,EAAgB,OAAOL,CAAc,EAAE,SAKlDM,EAAY9F,EAAS,IAAI6E,GAAQ,CAAC,EAAG,CACnC,SAAU,GACV,KAAM,EACR,CAAC,EAAE,KAAK,GAIH,CACL,OAHaiB,EAAU,IAAIE,EAAiB,EAI5C,SAAAhG,CACF,CACF,CAAC,CAAC,CACJ,CACA,SAASiG,GAAuBnD,EAAO,CAIrC,OAAOA,GAAS,OAAOA,GAAU,UAAY,YAAaA,CAC5D,CACA,SAASmC,GAAyBiB,EAAO,CAGvC,OAAOD,GAAuBC,CAAK,EAAIA,EAAM,QAAaA,CAC5D,CASA,IAAIC,IAAoC,IAAM,CAC5C,MAAMA,CAAoB,CACxB,MAAO,CACL,KAAK,UAAO,SAAqC,EAAG,CAClD,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0B9B,EAAmB,CAChD,MAAO8B,EACP,QAAS,IAAa7B,EAAO8B,EAA0B,EACvD,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOD,CACT,GAAG,EAOCC,IAA2C,IAAM,CACnD,MAAMA,CAA2B,CAC/B,iBAAiBC,EAAK,CACpB,MAAO,EACT,CACA,QAAQA,EAAK,CACX,OAAOA,CACT,CACA,MAAMC,EAAYC,EAAU,CAC1B,OAAOD,CACT,CACA,MAAO,CACL,KAAK,UAAO,SAA4C,EAAG,CACzD,OAAO,IAAK,GAAKF,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0B/B,EAAmB,CAChD,MAAO+B,EACP,QAASA,EAA2B,UACpC,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAMGI,GAAsC,IAAI5B,EAAsD,EAAE,EAuDxG,IAAI6B,IAAsC,IAAM,CAC9C,MAAMA,CAAsB,CAC1B,IAAI,wBAAyB,CAC3B,OAAO,KAAK,eAAiB,CAC/B,CACA,aAAc,CACZ,KAAK,kBAAoB,KACzB,KAAK,kBAAoB,KACzB,KAAK,yBAA2B,KAMhC,KAAK,OAAS,IAAIC,EAIlB,KAAK,uBAAyB,IAAIA,EAClC,KAAK,aAAeC,EAAOC,EAAkB,EAC7C,KAAK,oBAAsBD,EAAOE,EAAmB,EACrD,KAAK,cAAgBF,EAAOG,EAAa,EACzC,KAAK,aAAeH,EAAOI,EAAsB,EACjD,KAAK,SAAWJ,EAAOK,EAAQ,EAC/B,KAAK,oBAAsBL,EAAOM,GAAc,CAC9C,SAAU,EACZ,CAAC,IAAM,KACP,KAAK,cAAgBN,EAAOO,EAAa,EACzC,KAAK,QAAUP,EAAOQ,GAAsB,CAC1C,SAAU,EACZ,CAAC,GAAK,CAAC,EACP,KAAK,0BAA4B,KAAK,QAAQ,2BAA6B,YAC3E,KAAK,oBAAsBR,EAAOS,EAAmB,EACrD,KAAK,qBAAuBT,EAAOU,GAAwB,CACzD,SAAU,EACZ,CAAC,EACD,KAAK,aAAe,EAOpB,KAAK,mBAAqB,IAAMC,EAAG,MAAM,EAEzC,KAAK,kBAAoB,KACzB,IAAMC,EAAc,GAAK,KAAK,OAAO,KAAK,IAAIC,GAAqB,CAAC,CAAC,EAC/DC,EAAY,GAAK,KAAK,OAAO,KAAK,IAAIC,GAAmB,CAAC,CAAC,EACjE,KAAK,aAAa,kBAAoBD,EACtC,KAAK,aAAa,oBAAsBF,CAC1C,CACA,UAAW,CACT,KAAK,aAAa,SAAS,CAC7B,CACA,wBAAwBI,EAAS,CAC/B,IAAMC,EAAK,EAAE,KAAK,aAClB,KAAK,aAAa,KAAKC,GAAAC,IAAA,GAClB,KAAK,YAAY,OACjBH,GAFkB,CAGrB,GAAAC,CACF,EAAC,CACH,CACA,iBAAiBG,EAAQC,EAAgBC,EAAoB,CAC3D,YAAK,YAAc,IAAIC,EAAgB,CACrC,GAAI,EACJ,eAAgBF,EAChB,cAAeA,EACf,aAAc,KAAK,oBAAoB,QAAQA,CAAc,EAC7D,kBAAmB,KAAK,oBAAoB,QAAQA,CAAc,EAClE,OAAQA,EACR,OAAQ,CAAC,EACT,QAAS,KACT,OAAQ,KACR,QAAS,QAAQ,QAAQ,EAAI,EAC7B,OAAQG,GACR,cAAe,KACf,gBAAiBF,EAAmB,SACpC,eAAgB,KAChB,mBAAoBA,EACpB,kBAAmB,KACnB,OAAQ,CACN,kBAAmB,CAAC,EACpB,oBAAqB,CAAC,CACxB,EACA,aAAc,IAChB,CAAC,EACM,KAAK,YAAY,KAAKG,GAAOC,GAAKA,EAAE,KAAO,CAAC,EAEnDC,EAAID,GAAMR,GAAAC,EAAA,GACLO,GADK,CAER,aAAc,KAAK,oBAAoB,QAAQA,EAAE,MAAM,CACzD,EAAE,EAEFE,GAAUC,GAA0B,CAClC,IAAIC,EAAY,GACZC,EAAU,GACd,OAAOpB,EAAGkB,CAAsB,EAAE,KAAKD,GAAUF,GAAK,CAKpD,GAAI,KAAK,aAAeG,EAAuB,GAE7C,YAAK,2BAA2BA,EADyJ,GAC7GG,GAA2B,yBAAyB,EACzHC,GAET,KAAK,kBAAoBJ,EAEzB,KAAK,kBAAoB,CACvB,GAAIH,EAAE,GACN,WAAYA,EAAE,OACd,aAAcA,EAAE,aAChB,QAASA,EAAE,OACX,OAAQA,EAAE,OACV,mBAAqB,KAAK,yBAAkCR,GAAAC,EAAA,GACvD,KAAK,0BADkD,CAE1D,mBAAoB,IACtB,GAHqD,IAIvD,EACA,IAAMe,EAAgB,CAACd,EAAO,WAAa,KAAK,wBAAwB,GAAK,KAAK,oBAAoB,EAChGe,EAAsBT,EAAE,OAAO,qBAAuBN,EAAO,oBACnE,GAAI,CAACc,GAAiBC,IAAwB,SAAU,CACtD,IAAMC,EAAqJ,GAC3J,YAAK,OAAO,KAAK,IAAIC,GAAkBX,EAAE,GAAI,KAAK,cAAc,UAAUA,EAAE,MAAM,EAAGU,EAAQE,GAAsB,wBAAwB,CAAC,EAC5IZ,EAAE,QAAQ,IAAI,EACPO,EACT,CACA,GAAI,KAAK,oBAAoB,iBAAiBP,EAAE,MAAM,EACpD,OAAOf,EAAGe,CAAC,EAAE,KAEbE,GAAUF,GAAK,CACb,IAAMa,EAAa,KAAK,aAAa,SAAS,EAE9C,OADA,KAAK,OAAO,KAAK,IAAIC,GAAgBd,EAAE,GAAI,KAAK,cAAc,UAAUA,EAAE,YAAY,EAAGA,EAAE,OAAQA,EAAE,aAAa,CAAC,EAC/Ga,IAAe,KAAK,aAAa,SAAS,EACrCN,GAIF,QAAQ,QAAQP,CAAC,CAC1B,CAAC,EAEDe,GAAU,KAAK,oBAAqB,KAAK,aAAc,KAAK,kBAAmBrB,EAAO,OAAQ,KAAK,cAAe,KAAK,yBAAyB,EAEhJsB,EAAIhB,GAAK,CACPG,EAAuB,eAAiBH,EAAE,eAC1CG,EAAuB,kBAAoBH,EAAE,kBAC7C,KAAK,kBAAoBR,GAAAC,EAAA,GACpB,KAAK,mBADe,CAEvB,SAAUO,EAAE,iBACd,GAEA,IAAMiB,EAAmB,IAAIC,GAAiBlB,EAAE,GAAI,KAAK,cAAc,UAAUA,EAAE,YAAY,EAAG,KAAK,cAAc,UAAUA,EAAE,iBAAiB,EAAGA,EAAE,cAAc,EACrK,KAAK,OAAO,KAAKiB,CAAgB,CACnC,CAAC,CAAC,EACG,GAAIT,GAAiB,KAAK,oBAAoB,iBAAiBR,EAAE,aAAa,EAAG,CAItF,GAAM,CACJ,GAAAT,EACA,aAAA4B,EACA,OAAAC,EACA,cAAAC,GACA,OAAAC,CACF,EAAItB,EACEuB,EAAW,IAAIT,GAAgBvB,EAAI,KAAK,cAAc,UAAU4B,CAAY,EAAGC,EAAQC,EAAa,EAC1G,KAAK,OAAO,KAAKE,CAAQ,EACzB,IAAMC,GAAiBC,GAAiB,KAAK,iBAAiB,EAAE,SAChE,YAAK,kBAAoBtB,EAAyBX,GAAAC,EAAA,GAC7CO,GAD6C,CAEhD,eAAAwB,GACA,kBAAmBL,EACnB,OAAQ3B,GAAAC,EAAA,GACH6B,GADG,CAEN,mBAAoB,GACpB,WAAY,EACd,EACF,GACA,KAAK,kBAAkB,SAAWH,EAC3BlC,EAAGkB,CAAsB,CAClC,KAAO,CAML,IAAMO,EAA8N,GACpO,YAAK,OAAO,KAAK,IAAIC,GAAkBX,EAAE,GAAI,KAAK,cAAc,UAAUA,EAAE,YAAY,EAAGU,EAAQE,GAAsB,4BAA4B,CAAC,EACtJZ,EAAE,QAAQ,IAAI,EACPO,EACT,CACF,CAAC,EAEDS,EAAIhB,GAAK,CACP,IAAM0B,EAAc,IAAIC,GAAiB3B,EAAE,GAAI,KAAK,cAAc,UAAUA,EAAE,YAAY,EAAG,KAAK,cAAc,UAAUA,EAAE,iBAAiB,EAAGA,EAAE,cAAc,EAChK,KAAK,OAAO,KAAK0B,CAAW,CAC9B,CAAC,EAAGzB,EAAID,IACN,KAAK,kBAAoBG,EAAyBX,GAAAC,EAAA,GAC7CO,GAD6C,CAEhD,OAAQ4B,GAAkB5B,EAAE,eAAgBA,EAAE,gBAAiB,KAAK,YAAY,CAClF,GACOG,EACR,EAAG0B,GAAY,KAAK,oBAAqBC,GAAO,KAAK,OAAO,KAAKA,CAAG,CAAC,EAAGd,EAAIhB,GAAK,CAEhF,GADAG,EAAuB,aAAeH,EAAE,aACpC+B,GAAU/B,EAAE,YAAY,EAC1B,MAAMgC,GAA2B,KAAK,cAAehC,EAAE,YAAY,EAErE,IAAMiC,EAAY,IAAIC,GAAelC,EAAE,GAAI,KAAK,cAAc,UAAUA,EAAE,YAAY,EAAG,KAAK,cAAc,UAAUA,EAAE,iBAAiB,EAAGA,EAAE,eAAgB,CAAC,CAACA,EAAE,YAAY,EAC9K,KAAK,OAAO,KAAKiC,CAAS,CAC5B,CAAC,EAAGlC,GAAOC,GACJA,EAAE,aAIA,IAHL,KAAK,2BAA2BA,EAAG,GAAIM,GAA2B,aAAa,EACxE,GAGV,EAED6B,GAAUnC,GAAK,CACb,GAAIA,EAAE,OAAO,kBAAkB,OAC7B,OAAOf,EAAGe,CAAC,EAAE,KAAKgB,EAAIhB,GAAK,CACzB,IAAMoC,EAAe,IAAIC,GAAarC,EAAE,GAAI,KAAK,cAAc,UAAUA,EAAE,YAAY,EAAG,KAAK,cAAc,UAAUA,EAAE,iBAAiB,EAAGA,EAAE,cAAc,EAC7J,KAAK,OAAO,KAAKoC,CAAY,CAC/B,CAAC,EAAGlC,GAAUF,GAAK,CACjB,IAAIsC,EAAe,GACnB,OAAOrD,EAAGe,CAAC,EAAE,KAAKuC,GAAY,KAAK,0BAA2B,KAAK,mBAAmB,EAAGvB,EAAI,CAC3F,KAAM,IAAMsB,EAAe,GAC3B,SAAU,IAAM,CACTA,GACH,KAAK,2BAA2BtC,EAA0G,GAAIM,GAA2B,kBAAkB,CAE/L,CACF,CAAC,CAAC,CACJ,CAAC,EAAGU,EAAIhB,GAAK,CACX,IAAMwC,EAAa,IAAIC,GAAWzC,EAAE,GAAI,KAAK,cAAc,UAAUA,EAAE,YAAY,EAAG,KAAK,cAAc,UAAUA,EAAE,iBAAiB,EAAGA,EAAE,cAAc,EACzJ,KAAK,OAAO,KAAKwC,CAAU,CAC7B,CAAC,CAAC,CAGN,CAAC,EAEDL,GAAUnC,GAAK,CACb,IAAM0C,EAAiBC,GAAS,CAC9B,IAAMC,EAAU,CAAC,EACbD,EAAM,aAAa,eAAiB,CAACA,EAAM,YAAY,kBACzDC,EAAQ,KAAK,KAAK,aAAa,cAAcD,EAAM,WAAW,EAAE,KAAK3B,EAAI6B,GAAmB,CAC1FF,EAAM,UAAYE,CACpB,CAAC,EAAG5C,EAAI,IAAG,EAAS,CAAC,CAAC,EAExB,QAAW6C,KAASH,EAAM,SACxBC,EAAQ,KAAK,GAAGF,EAAeI,CAAK,CAAC,EAEvC,OAAOF,CACT,EACA,OAAOG,GAAcL,EAAe1C,EAAE,eAAe,IAAI,CAAC,EAAE,KAAKgD,GAAe,IAAI,EAAGC,EAAK,CAAC,CAAC,CAChG,CAAC,EAAGd,GAAU,IAAM,KAAK,mBAAmB,CAAC,EAAGjC,GAAU,IAAM,CAC9D,GAAM,CACJ,gBAAAgD,EACA,eAAA1B,CACF,EAAIrB,EACEgD,EAAwB,KAAK,uBAAuB,KAAK,oBAAqBD,EAAgB,KAAM1B,EAAe,IAAI,EAG7H,OAAO2B,EAAwBC,GAAKD,CAAqB,EAAE,KAAKlD,EAAI,IAAME,CAAsB,CAAC,EAAIlB,EAAGkB,CAAsB,CAChI,CAAC,EAAGF,EAAID,GAAK,CACX,IAAMqD,EAAoBC,GAAkB5D,EAAO,mBAAoBM,EAAE,eAAgBA,EAAE,kBAAkB,EAC7G,YAAK,kBAAoBG,EAAyBX,GAAAC,EAAA,GAC7CO,GAD6C,CAEhD,kBAAAqD,CACF,GACA,KAAK,kBAAkB,kBAAoBA,EACpClD,CACT,CAAC,EAAGa,EAAI,IAAM,CACZ,KAAK,OAAO,KAAK,IAAIuC,EAAsB,CAC7C,CAAC,EAAGC,GAAe,KAAK,aAAc9D,EAAO,mBAAoBoC,GAAO,KAAK,OAAO,KAAKA,CAAG,EAAG,KAAK,mBAAmB,EAIvHmB,EAAK,CAAC,EAAGjC,EAAI,CACX,KAAMhB,GAAK,CACTI,EAAY,GACZ,KAAK,yBAA2B,KAAK,kBACrC,KAAK,OAAO,KAAK,IAAIqD,GAAczD,EAAE,GAAI,KAAK,cAAc,UAAUA,EAAE,YAAY,EAAG,KAAK,cAAc,UAAUA,EAAE,iBAAiB,CAAC,CAAC,EACzI,KAAK,eAAe,YAAYA,EAAE,kBAAkB,QAAQ,EAC5DA,EAAE,QAAQ,EAAI,CAChB,EACA,SAAU,IAAM,CACdI,EAAY,EACd,CACF,CAAC,EAQDsD,GAAU,KAAK,uBAAuB,KAAK1C,EAAI2C,GAAO,CACpD,MAAMA,CACR,CAAC,CAAC,CAAC,EAAGC,GAAS,IAAM,CAOf,CAACxD,GAAa,CAACC,GAEjB,KAAK,2BAA2BF,EADwJ,GAC7GG,GAA2B,yBAAyB,EAI7H,KAAK,mBAAmB,KAAOH,EAAuB,KACxD,KAAK,kBAAoB,KACzB,KAAK,kBAAoB,KAE7B,CAAC,EAAG0D,GAAWC,GAAK,CAIlB,GAHAzD,EAAU,GAGN0D,GAA2BD,CAAC,EAC9B,KAAK,OAAO,KAAK,IAAIE,GAAiB7D,EAAuB,GAAI,KAAK,cAAc,UAAUA,EAAuB,YAAY,EAAG2D,EAAE,QAASA,EAAE,gBAAgB,CAAC,EAG7JG,GAAsCH,CAAC,EAG1C,KAAK,OAAO,KAAK,IAAII,GAAgBJ,EAAE,GAAG,CAAC,EAF3C3D,EAAuB,QAAQ,EAAK,MAMjC,CACL,KAAK,OAAO,KAAK,IAAIgE,GAAgBhE,EAAuB,GAAI,KAAK,cAAc,UAAUA,EAAuB,YAAY,EAAG2D,EAAG3D,EAAuB,gBAAkB,MAAS,CAAC,EACzL,GAAI,CACFA,EAAuB,QAAQT,EAAO,aAAaoE,CAAC,CAAC,CACvD,OAASM,EAAI,CAUP,KAAK,QAAQ,gCACfjE,EAAuB,QAAQ,EAAK,EAEpCA,EAAuB,OAAOiE,CAAE,CAEpC,CACF,CACA,OAAO7D,EACT,CAAC,CAAC,CAEJ,CAAC,CAAC,CACJ,CACA,2BAA2BP,EAAGU,EAAQ2D,EAAM,CAC1C,IAAMC,EAAY,IAAIN,GAAiBhE,EAAE,GAAI,KAAK,cAAc,UAAUA,EAAE,YAAY,EAAGU,EAAQ2D,CAAI,EACvG,KAAK,OAAO,KAAKC,CAAS,EAC1BtE,EAAE,QAAQ,EAAK,CACjB,CAKA,yBAA0B,CAOxB,OAAO,KAAK,mBAAmB,aAAa,SAAS,IAAM,KAAK,mBAAmB,eAAe,SAAS,CAC7G,CAMA,qBAAsB,CAKpB,OAD4B,KAAK,oBAAoB,QAAQ,KAAK,cAAc,MAAM,KAAK,SAAS,KAAK,EAAI,CAAC,CAAC,EACpF,SAAS,IAAM,KAAK,mBAAmB,aAAa,SAAS,GAAK,CAAC,KAAK,mBAAmB,OAAO,kBAC/H,CACA,MAAO,CACL,KAAK,UAAO,SAAuC,EAAG,CACpD,OAAO,IAAK,GAAK5B,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BmG,EAAmB,CAChD,MAAOnG,EACP,QAASA,EAAsB,UAC/B,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAIH,SAASoG,GAA6BpD,EAAQ,CAC5C,OAAOA,IAAWtB,EACpB,CASA,IAAI2E,IAAmC,IAAM,CAC3C,MAAMA,CAAmB,CACvB,MAAO,CACL,KAAK,UAAO,SAAoC,EAAG,CACjD,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BF,EAAmB,CAChD,MAAOE,EACP,QAAS,IAAanG,EAAOoG,EAAyB,EACtD,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOD,CACT,GAAG,EAqBGE,GAAN,KAA6B,CAK3B,aAAahC,EAAO,CAClB,MAAO,EACT,CAIA,MAAMA,EAAOiC,EAAc,CAAC,CAE5B,aAAajC,EAAO,CAClB,MAAO,EACT,CAEA,SAASA,EAAO,CACd,OAAO,IACT,CAMA,iBAAiBkC,EAAQC,EAAM,CAC7B,OAAOD,EAAO,cAAgBC,EAAK,WACrC,CACF,EACIJ,IAA0C,IAAM,CAClD,MAAMA,UAAkCC,EAAuB,CAC7D,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAII,EACJ,OAAO,SAA2C/E,EAAG,CACnD,OAAQ+E,IAA2CA,EAA4CC,GAAsBN,CAAyB,IAAI1E,GAAK0E,CAAyB,CAClL,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,WAA0BH,EAAmB,CAChD,MAAOG,EACP,QAASA,EAA0B,UACnC,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAICO,IAA6B,IAAM,CACrC,MAAMA,CAAa,CACjB,MAAO,CACL,KAAK,UAAO,SAA8B,EAAG,CAC3C,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BV,EAAmB,CAChD,MAAOU,EACP,QAAS,IAAa3G,EAAO4G,EAAmB,EAChD,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOD,CACT,GAAG,EAICC,IAAoC,IAAM,CAC5C,MAAMA,UAA4BD,EAAa,CAC7C,aAAc,CACZ,MAAM,GAAG,SAAS,EAClB,KAAK,SAAW3G,EAAOK,EAAQ,EAC/B,KAAK,cAAgBL,EAAOG,EAAa,EACzC,KAAK,QAAUH,EAAOQ,GAAsB,CAC1C,SAAU,EACZ,CAAC,GAAK,CAAC,EACP,KAAK,6BAA+B,KAAK,QAAQ,8BAAgC,UACjF,KAAK,oBAAsBR,EAAOS,EAAmB,EACrD,KAAK,kBAAoB,KAAK,QAAQ,mBAAqB,WAC3D,KAAK,eAAiB,IAAIoG,GAC1B,KAAK,WAAa,KAAK,eASvB,KAAK,cAAgB,EACrB,KAAK,iBAAmB,GACxB,KAAK,YAAc1D,GAAiB,IAAI,EACxC,KAAK,aAAe,KAAK,mBAAmB,CAC9C,CACA,mBAAoB,CAClB,OAAO,KAAK,cACd,CACA,eAAgB,CACd,OAAO,KAAK,UACd,CACA,eAAgB,CACd,OAAO,KAAK,SAAS,SAAS,CAChC,CAMA,IAAI,eAAgB,CAClB,OAAI,KAAK,+BAAiC,WACjC,KAAK,cAEP,KAAK,cAAc,GAAG,oBAAiB,KAAK,aACrD,CACA,gBAAiB,CACf,OAAO,KAAK,WACd,CACA,oBAAqB,CACnB,MAAO,CACL,WAAY,KAAK,WACjB,eAAgB,KAAK,eACrB,YAAa,KAAK,WACpB,CACF,CACA,4CAA4C2D,EAAU,CACpD,OAAO,KAAK,SAAS,UAAUC,GAAS,CAClCA,EAAM,OAAY,YACpBD,EAASC,EAAM,IAAQA,EAAM,KAAK,CAEtC,CAAC,CACH,CACA,kBAAkB,EAAGC,EAAmB,CACtC,GAAI,aAAaxE,GACf,KAAK,aAAe,KAAK,mBAAmB,UACnC,aAAaH,GACtB,KAAK,WAAa2E,EAAkB,mBAC3B,aAAapE,IACtB,GAAI,KAAK,oBAAsB,SACzB,CAACoE,EAAkB,OAAO,mBAAoB,CAChD,IAAMC,EAAS,KAAK,oBAAoB,MAAMD,EAAkB,SAAUA,EAAkB,UAAU,EACtG,KAAK,cAAcC,EAAQD,CAAiB,CAC9C,OAEO,aAAa/B,IACtB,KAAK,eAAiB+B,EAAkB,SACxC,KAAK,WAAa,KAAK,oBAAoB,MAAMA,EAAkB,SAAUA,EAAkB,UAAU,EACzG,KAAK,YAAcA,EAAkB,kBACjC,KAAK,oBAAsB,aACxBA,EAAkB,OAAO,oBAC5B,KAAK,cAAc,KAAK,WAAYA,CAAiB,IAGhD,aAAatB,KAAqB,EAAE,OAAS1D,GAA2B,eAAiB,EAAE,OAASA,GAA2B,oBACxI,KAAK,eAAegF,CAAiB,EAC5B,aAAanB,GACtB,KAAK,eAAemB,EAAmB,EAAI,EAClC,aAAa7B,KACtB,KAAK,iBAAmB,EAAE,GAC1B,KAAK,cAAgB,KAAK,cAE9B,CACA,cAAc+B,EAAK3E,EAAY,CAC7B,IAAM4E,EAAO,KAAK,cAAc,UAAUD,CAAG,EAC7C,GAAI,KAAK,SAAS,qBAAqBC,CAAI,GAAO5E,EAAW,OAAO,WAAY,CAE9E,IAAM6E,EAAuB,KAAK,cAC5BC,EAAQlG,IAAA,GACToB,EAAW,OAAO,OAClB,KAAK,sBAAsBA,EAAW,GAAI6E,CAAoB,GAEnE,KAAK,SAAS,aAAaD,EAAM,GAAIE,CAAK,CAC5C,KAAO,CACL,IAAMA,EAAQlG,IAAA,GACToB,EAAW,OAAO,OAClB,KAAK,sBAAsBA,EAAW,GAAI,KAAK,cAAgB,CAAC,GAErE,KAAK,SAAS,GAAG4E,EAAM,GAAIE,CAAK,CAClC,CACF,CAKA,eAAeC,EAAYC,EAA2B,GAAO,CAC3D,GAAI,KAAK,+BAAiC,WAAY,CACpD,IAAMH,EAAuB,KAAK,cAC5BI,EAAqB,KAAK,cAAgBJ,EAC5CI,IAAuB,EACzB,KAAK,SAAS,UAAUA,CAAkB,EACjC,KAAK,iBAAmBF,EAAW,UAAYE,IAAuB,IAI/E,KAAK,WAAWF,CAAU,EAC1B,KAAK,yBAAyB,EAKlC,MAAW,KAAK,+BAAiC,YAK3CC,GACF,KAAK,WAAWD,CAAU,EAE5B,KAAK,yBAAyB,EAElC,CACA,WAAWA,EAAY,CACrB,KAAK,YAAc,KAAK,aAAa,YACrC,KAAK,eAAiB,KAAK,aAAa,eAMxC,KAAK,WAAa,KAAK,oBAAoB,MAAM,KAAK,eAAgBA,EAAW,UAAY,KAAK,UAAU,CAC9G,CACA,0BAA2B,CACzB,KAAK,SAAS,aAAa,KAAK,cAAc,UAAU,KAAK,UAAU,EAAG,GAAI,KAAK,sBAAsB,KAAK,iBAAkB,KAAK,aAAa,CAAC,CACrJ,CACA,sBAAsBG,EAAcC,EAAc,CAChD,OAAI,KAAK,+BAAiC,WACjC,CACL,aAAAD,EACA,mBAAeC,CACjB,EAEK,CACL,aAAAD,CACF,CACF,CACA,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIE,EACJ,OAAO,SAAqCjG,EAAG,CAC7C,OAAQiG,IAAqCA,EAAsCjB,GAAsBE,CAAmB,IAAIlF,GAAKkF,CAAmB,CAC1J,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,WAA0BX,EAAmB,CAChD,MAAOW,EACP,QAASA,EAAoB,UAC7B,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAICgB,GAAgC,SAAUA,EAAkB,CAC9D,OAAAA,EAAiBA,EAAiB,SAAc,CAAC,EAAI,WACrDA,EAAiBA,EAAiB,OAAY,CAAC,EAAI,SACnDA,EAAiBA,EAAiB,YAAiB,CAAC,EAAI,cACjDA,CACT,EAAEA,IAAoB,CAAC,CAAC,EAUxB,SAASC,GAAoBzG,EAAQ0G,EAAQ,CAC3C1G,EAAO,OAAO,KAAKK,GAAO,GAAK,aAAa0D,IAAiB,aAAaO,IAAoB,aAAaG,IAAmB,aAAaxD,EAAiB,EAAGV,EAAI,GAC7J,aAAawD,IAAiB,aAAa9C,GACtCuF,GAAiB,UAEN,aAAalC,GAAmB,EAAE,OAAS1D,GAA2B,UAAY,EAAE,OAASA,GAA2B,0BAA4B,IACnJ4F,GAAiB,YAAcA,GAAiB,MACtE,EAAGnG,GAAOsG,GAAUA,IAAWH,GAAiB,WAAW,EAAGjD,EAAK,CAAC,CAAC,EAAE,UAAU,IAAM,CACtFmD,EAAO,CACT,CAAC,CACH,CACA,SAASE,GAAoBC,EAAO,CAClC,MAAMA,CACR,CAKA,IAAMC,GAAoB,CACxB,MAAO,QACP,SAAU,UACV,aAAc,UACd,YAAa,OACf,EAKMC,GAAqB,CACzB,MAAO,SACP,SAAU,UACV,aAAc,UACd,YAAa,QACf,EAaIC,IAAuB,IAAM,CAC/B,MAAMA,CAAO,CACX,IAAI,gBAAiB,CACnB,OAAO,KAAK,aAAa,kBAAkB,CAC7C,CACA,IAAI,YAAa,CACf,OAAO,KAAK,aAAa,cAAc,CACzC,CAIA,IAAI,QAAS,CAKX,OAAO,KAAK,OACd,CAIA,IAAI,aAAc,CAChB,OAAO,KAAK,aAAa,eAAe,CAC1C,CACA,aAAc,CACZ,KAAK,SAAW,GAChB,KAAK,gBAAkB,GACvB,KAAK,QAAUpI,EAAOqI,EAAQ,EAC9B,KAAK,aAAerI,EAAO2G,EAAY,EACvC,KAAK,QAAU3G,EAAOQ,GAAsB,CAC1C,SAAU,EACZ,CAAC,GAAK,CAAC,EACP,KAAK,aAAeR,EAAOsI,EAAa,EACxC,KAAK,kBAAoB,KAAK,QAAQ,mBAAqB,WAC3D,KAAK,sBAAwBtI,EAAOF,EAAqB,EACzD,KAAK,cAAgBE,EAAOG,EAAa,EACzC,KAAK,SAAWH,EAAOK,EAAQ,EAC/B,KAAK,oBAAsBL,EAAOS,EAAmB,EAMrD,KAAK,QAAU,IAAIV,EAQnB,KAAK,aAAe,KAAK,QAAQ,cAAgBiI,GAKjD,KAAK,UAAY,GAOjB,KAAK,mBAAqBhI,EAAOmG,EAAkB,EAUnD,KAAK,oBAAsB,KAAK,QAAQ,qBAAuB,SAC/D,KAAK,OAASnG,EAAOuI,GAAQ,CAC3B,SAAU,EACZ,CAAC,GAAG,KAAK,GAAK,CAAC,EAOf,KAAK,6BAA+B,CAAC,CAACvI,EAAOM,GAAc,CACzD,SAAU,EACZ,CAAC,EACD,KAAK,mBAAqB,IAAIkI,GAC9B,KAAK,gBAAkBxI,EAAOyI,CAAM,YAAaA,GAAUA,EAAO,gBAAgB,EAClF,KAAK,YAAY,KAAK,MAAM,EAC5B,KAAK,sBAAsB,iBAAiB,KAAM,KAAK,eAAgB,KAAK,WAAW,EAAE,UAAU,CACjG,MAAO,GAAK,CACV,KAAK,QAAQ,KAAsD,CAAC,CACtE,CACF,CAAC,EACD,KAAK,4BAA4B,CACnC,CACA,6BAA8B,CAC5B,IAAMC,EAAe,KAAK,sBAAsB,OAAO,UAAUlD,GAAK,CACpE,GAAI,CACF,IAAMwB,EAAoB,KAAK,sBAAsB,kBAC/C2B,EAAoB,KAAK,sBAAsB,kBACrD,GAAI3B,IAAsB,MAAQ2B,IAAsB,MAEtD,GADA,KAAK,aAAa,kBAAkBnD,EAAGmD,CAAiB,EACpDnD,aAAaE,IAAoBF,EAAE,OAASxD,GAA2B,UAAYwD,EAAE,OAASxD,GAA2B,0BAI3H,KAAK,UAAY,WACRwD,aAAaL,GACtB,KAAK,UAAY,WACRK,aAAaI,GAAiB,CACvC,IAAMgD,EAAa,KAAK,oBAAoB,MAAMpD,EAAE,IAAKwB,EAAkB,aAAa,EAClFhE,EAAS,CAEb,KAAMgE,EAAkB,OAAO,KAC/B,mBAAoBA,EAAkB,OAAO,mBAK7C,WAAY,KAAK,oBAAsB,SAAWd,GAA6Bc,EAAkB,MAAM,CACzG,EACA,KAAK,mBAAmB4B,EAAYpH,GAAuB,KAAMwB,EAAQ,CACvE,QAASgE,EAAkB,QAC3B,OAAQA,EAAkB,OAC1B,QAASA,EAAkB,OAC7B,CAAC,CACH,EAKE6B,GAAoBrD,CAAC,GACvB,KAAK,QAAQ,KAAKA,CAAC,CAEvB,OAASA,EAAG,CACV,KAAK,sBAAsB,uBAAuB,KAAKA,CAAC,CAC1D,CACF,CAAC,EACD,KAAK,mBAAmB,IAAIkD,CAAY,CAC1C,CAEA,uBAAuBI,EAAmB,CAGxC,KAAK,YAAY,KAAK,UAAYA,EAClC,KAAK,sBAAsB,kBAAoBA,CACjD,CAIA,mBAAoB,CAClB,KAAK,4BAA4B,EAC5B,KAAK,sBAAsB,wBAC9B,KAAK,0BAA0B,KAAK,SAAS,KAAK,EAAI,EAAGtH,GAAuB,KAAK,aAAa,cAAc,CAAC,CAErH,CAMA,6BAA8B,CAI5B,KAAK,0CAA4C,KAAK,aAAa,4CAA4C,CAAC0F,EAAKG,IAAU,CAG7H,WAAW,IAAM,CACf,KAAK,0BAA0BH,EAAK,WAAYG,CAAK,CACvD,EAAG,CAAC,CACN,CAAC,CACH,CAQA,0BAA0BH,EAAKpE,EAAQuE,EAAO,CAC5C,IAAMrE,EAAS,CACb,WAAY,EACd,EAQMD,EAAgBsE,GAAO,aAAeA,EAAQ,KAGpD,GAAIA,EAAO,CACT,IAAM0B,EAAY5H,EAAA,GACbkG,GAEL,OAAO0B,EAAU,aACjB,OAAOA,EAAU,mBACb,OAAO,KAAKA,CAAS,EAAE,SAAW,IACpC/F,EAAO,MAAQ+F,EAEnB,CACA,IAAMC,EAAU,KAAK,SAAS9B,CAAG,EACjC,KAAK,mBAAmB8B,EAASlG,EAAQC,EAAeC,CAAM,CAChE,CAEA,IAAI,KAAM,CACR,OAAO,KAAK,aAAa,KAAK,cAAc,CAC9C,CAKA,sBAAuB,CACrB,OAAO,KAAK,sBAAsB,iBACpC,CAKA,IAAI,0BAA2B,CAC7B,OAAO,KAAK,sBAAsB,wBACpC,CAiBA,YAAYiG,EAAQ,CAElB,KAAK,OAASA,EAAO,IAAIC,EAAiB,EAC1C,KAAK,UAAY,EACnB,CAEA,aAAc,CACZ,KAAK,QAAQ,CACf,CAEA,SAAU,CACR,KAAK,sBAAsB,SAAS,EAChC,KAAK,0CACP,KAAK,wCAAwC,YAAY,EACzD,KAAK,wCAA0C,QAEjD,KAAK,SAAW,GAChB,KAAK,mBAAmB,YAAY,CACtC,CAiDA,cAAcC,EAAUC,EAAmB,CAAC,EAAG,CAC7C,GAAM,CACJ,WAAAC,EACA,YAAAC,EACA,SAAAC,EACA,oBAAAC,EACA,iBAAAC,CACF,EAAIL,EACEM,EAAID,EAAmB,KAAK,eAAe,SAAWF,EACxDI,EAAI,KACR,OAAQH,EAAqB,CAC3B,IAAK,QACHG,EAAIxI,IAAA,GACC,KAAK,eAAe,aACpBmI,GAEL,MACF,IAAK,WACHK,EAAI,KAAK,eAAe,YACxB,MACF,QACEA,EAAIL,GAAe,IACvB,CACIK,IAAM,OACRA,EAAI,KAAK,iBAAiBA,CAAC,GAE7B,IAAIC,EACJ,GAAI,CACF,IAAMC,EAAqBR,EAAaA,EAAW,SAAW,KAAK,YAAY,SAAS,KACxFO,EAA4BE,GAA4BD,CAAkB,CAC5E,MAAY,EAMN,OAAOV,EAAS,CAAC,GAAM,UAAY,CAACA,EAAS,CAAC,EAAE,WAAW,GAAG,KAQhEA,EAAW,CAAC,GAEdS,EAA4B,KAAK,eAAe,IAClD,CACA,OAAOG,GAA8BH,EAA2BT,EAAUQ,EAAGD,GAAK,IAAI,CACxF,CAyBA,cAAcxC,EAAKlE,EAAS,CAC1B,mBAAoB,EACtB,EAAG,CAMD,IAAMgG,EAAUvF,GAAUyD,CAAG,EAAIA,EAAM,KAAK,SAASA,CAAG,EAClD0B,EAAa,KAAK,oBAAoB,MAAMI,EAAS,KAAK,UAAU,EAC1E,OAAO,KAAK,mBAAmBJ,EAAYpH,GAAuB,KAAMwB,CAAM,CAChF,CA+BA,SAASmG,EAAUnG,EAAS,CAC1B,mBAAoB,EACtB,EAAG,CACD,OAAAgH,GAAiBb,CAAQ,EAClB,KAAK,cAAc,KAAK,cAAcA,EAAUnG,CAAM,EAAGA,CAAM,CACxE,CAEA,aAAakE,EAAK,CAChB,OAAO,KAAK,cAAc,UAAUA,CAAG,CACzC,CAEA,SAASA,EAAK,CACZ,GAAI,CACF,OAAO,KAAK,cAAc,MAAMA,CAAG,CACrC,MAAQ,CACN,OAAO,KAAK,cAAc,MAAM,GAAG,CACrC,CACF,CACA,SAASA,EAAK+C,EAAc,CAC1B,IAAIC,EAYJ,GAXID,IAAiB,GACnBC,EAAU/I,EAAA,GACL+G,IAEI+B,IAAiB,GAC1BC,EAAU/I,EAAA,GACLgH,IAGL+B,EAAUD,EAERxG,GAAUyD,CAAG,EACf,OAAOiD,GAAa,KAAK,eAAgBjD,EAAKgD,CAAO,EAEvD,IAAMlB,EAAU,KAAK,SAAS9B,CAAG,EACjC,OAAOiD,GAAa,KAAK,eAAgBnB,EAASkB,CAAO,CAC3D,CACA,iBAAiBE,EAAQ,CACvB,OAAO,OAAO,QAAQA,CAAM,EAAE,OAAO,CAACrC,EAAQ,CAACsC,EAAKC,CAAK,KACnDA,GAAU,OACZvC,EAAOsC,CAAG,EAAIC,GAETvC,GACN,CAAC,CAAC,CACP,CACA,mBAAmBd,EAAQnE,EAAQC,EAAeC,EAAQuH,EAAc,CACtE,GAAI,KAAK,SACP,OAAO,QAAQ,QAAQ,EAAK,EAE9B,IAAIC,EACAC,EACAC,EACAH,GACFC,EAAUD,EAAa,QACvBE,EAASF,EAAa,OACtBG,EAAUH,EAAa,SAEvBG,EAAU,IAAI,QAAQ,CAACC,EAAKC,IAAQ,CAClCJ,EAAUG,EACVF,EAASG,CACX,CAAC,EAGH,IAAMC,EAAS,KAAK,aAAa,IAAI,EACrC,OAAAhD,GAAoB,KAAM,IAAM,CAG9B,eAAe,IAAM,KAAK,aAAa,OAAOgD,CAAM,CAAC,CACvD,CAAC,EACD,KAAK,sBAAsB,wBAAwB,CACjD,OAAA/H,EACA,cAAAC,EACA,eAAgB,KAAK,eACrB,cAAe,KAAK,eACpB,OAAAkE,EACA,OAAAjE,EACA,QAAAwH,EACA,OAAAC,EACA,QAAAC,EACA,gBAAiB,KAAK,YAAY,SAClC,mBAAoB,KAAK,WAC3B,CAAC,EAGMA,EAAQ,MAAMlF,GACZ,QAAQ,OAAOA,CAAC,CACxB,CACH,CACA,MAAO,CACL,KAAK,UAAO,SAAwB,EAAG,CACrC,OAAO,IAAK,GAAK4C,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BnC,EAAmB,CAChD,MAAOmC,EACP,QAASA,EAAO,UAChB,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAIH,SAAS4B,GAAiBb,EAAU,CAClC,QAAS2B,EAAI,EAAGA,EAAI3B,EAAS,OAAQ2B,IAEnC,GADY3B,EAAS2B,CAAC,GACX,KACT,MAAM,IAAIC,EAAc,KAAkF,EAAwE,CAGxL,CACA,SAASlC,GAAoBrD,EAAG,CAC9B,MAAO,EAAEA,aAAaP,KAAyB,EAAEO,aAAaI,GAChE,CA4rBA,IAAMoF,GAA+B,IAAIC,EAAe,EAAE,EAkJ1D,SAASC,GAAcC,KAAWC,EAAU,CAC1C,OAAOC,GAAyB,CAAC,CAC/B,QAASC,GACT,MAAO,GACP,SAAUH,CACZ,EAGI,CAAC,EAAG,CACN,QAASI,GACT,WAAYC,GACZ,KAAM,CAACC,EAAM,CACf,EAAG,CACD,QAASC,GACT,MAAO,GACP,WAAYC,EACd,EAAGP,EAAS,IAAIQ,GAAWA,EAAQ,eAAU,CAAC,CAAC,CACjD,CACA,SAASJ,GAAUK,EAAQ,CACzB,OAAOA,EAAO,YAAY,IAC5B,CAIA,SAASC,GAAcC,EAAMC,EAAW,CACtC,MAAO,CACL,WAAOD,EACP,gBAAYC,CACd,CACF,CAkFA,SAASC,IAAuB,CAC9B,IAAMC,EAAWC,EAAOC,EAAQ,EAChC,OAAOC,GAA4B,CACjC,IAAMC,EAAMJ,EAAS,IAAIK,EAAc,EACvC,GAAIF,IAA6BC,EAAI,WAAW,CAAC,EAC/C,OAEF,IAAME,EAASN,EAAS,IAAIO,EAAM,EAC5BC,EAAgBR,EAAS,IAAIS,EAAc,EAC7CT,EAAS,IAAIU,EAAkB,IAAM,GACvCJ,EAAO,kBAAkB,EAE3BN,EAAS,IAAIW,GAAkB,KAAMC,GAAY,QAAQ,GAAG,gBAAgB,EAC5EZ,EAAS,IAAIa,GAAiB,KAAMD,GAAY,QAAQ,GAAG,KAAK,EAChEN,EAAO,uBAAuBF,EAAI,eAAe,CAAC,CAAC,EAC9CI,EAAc,SACjBA,EAAc,KAAK,EACnBA,EAAc,SAAS,EACvBA,EAAc,YAAY,EAE9B,CACF,CAMA,IAAMC,GAA8B,IAAIK,EAA4F,GAAI,CACtI,QAAS,IACA,IAAIC,CAEf,CAAC,EACKL,GAAkC,IAAII,EAAsF,GAAI,CACpI,WAAY,OACZ,QAAS,IAAM,CACjB,CAAC,EAsJD,IAAME,GAAgC,IAAIC,EAAoF,EAAE,EA+FhI,SAASC,IAAmB,CAK1B,OAAOC,GAAc,EAJH,CAAC,CACjB,QAASC,GACT,SAAUC,EACZ,CAAC,CACkF,CACrF,CC50NA,IAAYC,EAAZ,SAAYA,EAAa,CAKrBA,OAAAA,EAAAA,EAAA,SAAA,CAAA,EAAA,WAKAA,EAAAA,EAAA,KAAA,CAAA,EAAA,OAKAA,EAAAA,EAAA,MAAA,CAAA,EAAA,QAfQA,CAgBZ,EAhBYA,GAAa,CAAA,CAAA,ECIzB,IAAMC,GAAc,EAIdC,GAAc,EAIdC,GAAc,IAIdC,GAAc,IAKdC,GAAe,GAIfC,GAAgB,GAIhBC,GAAmB,GAInBC,GAAsB,EAItBC,GAAc,GAIdC,GAAe,GAKfC,GAAiB,EAKjBC,GAAmB,EAKnBC,GAAmBN,GAAmBK,GAKtCE,GAAoB,GAAK,GAAK,GAAK,IAY5BC,GAAP,MAAOA,CAAa,CASf,OAAOC,OAAOC,EAAwB,CAEzC,IAAIC,EAA0D,CAAA,EAC9DA,EAA4BC,EAAcC,QAAQ,EAAI,UACtDF,EAA4BC,EAAcE,IAAI,EAAI,UAElD,IAAIC,EAAaC,SAASC,gBAAgB,6BAA8B,KAAK,EAC7EF,EAAWG,aAAa,UAAW,GAAGxB,EAAW,IAAIC,EAAW,IAAIC,EAAW,IAAIC,EAAW,EAAE,EAEhG,QAASsB,EAAe,EAAGA,EAAeT,EAASU,OAAQD,IAC3D,CACI,IAAIE,EAAiBX,EAASS,CAAY,EAEtCG,EAAmB3B,IAAeG,GAAeC,GAAgBC,IAAoBmB,EAErFI,EAAaf,EAAcgB,wBAC3BF,EACAD,EAAeI,KACfjB,EAAckB,iCAAiCL,EAAeM,SAAS,CAAC,EAE5EZ,EAAWa,YAAYL,CAAU,EAEjC,IAAIM,EAAkB,EAAI,GAAK,GAC3BC,EAAkB,GAAK,GAAK,GAE5BC,EAAYvB,EAAcwB,wBAC1BtC,GAAcQ,GACdoB,EAAmBxB,GAAeC,GAClCF,IAAeK,GAAcC,IAC7B0B,EACAC,CAAe,EAEnBf,EAAWa,YAAYG,CAAS,EAEhC,IAAIE,EAAqBzB,EAAc0B,mBACnCxC,GAAcQ,GACdoB,EAAmBxB,GAAeC,GAClC8B,EACAC,CAAe,EAEnB,QAAQK,KAAcF,EAElBlB,EAAWa,YAAYO,CAAU,EAGrC,QAASC,KAAaf,EAAeM,UACrC,CACI,IAAIU,EAAY7B,EAAc8B,gBAC1B3B,EACAyB,EACAd,EAAmBxB,GACnB+B,EACAC,CAAe,EAGfO,GAAa,MAEbtB,EAAWa,YAAYS,CAAS,CAExC,CAEJ,CAEA,OAAOtB,CACX,CAaQ,OAAOS,wBAAwBe,EAAgBC,EAAYC,EAAiC,CAEhG,IAAIC,GAAgB9C,IAAeM,GAAcC,KAAiB,EAAID,GAElEyC,EAAa3B,SAASC,gBAAgB,6BAA8B,MAAM,EAC9E0B,EAAWzB,aAAa,IAAKwB,EAAaE,SAAQ,CAAE,EACpDD,EAAWzB,aAAa,KAAMqB,EAASzC,GAAe,GAAG8C,SAAQ,CAAE,EACnED,EAAWzB,aAAa,cAAe,QAAQ,EAE/C,IAAI2B,EAAa,GAAGL,EAAKM,QAAO,EAAGF,SAAQ,EAAGG,SAAS,EAAG,GAAG,CAAC,KAAKP,EAAKQ,SAAQ,EAAK,GAAGJ,SAAQ,EAAGG,SAAS,EAAG,GAAG,CAAC,IAAIP,EAAKS,YAAW,CAAE,GAErIC,EAAY,EACZC,EAAgB,EAEpB,OAAI,OAAOV,EAAY7B,EAAcE,IAAI,GAAM,WAE3CoC,EAAYT,EAAY7B,EAAcE,IAAI,GAE1C,OAAO2B,EAAY7B,EAAcC,QAAQ,GAAM,WAE/CsC,EAAgBV,EAAY7B,EAAcC,QAAQ,GAGtD8B,EAAWS,UAAY,GAAGP,CAAU,MAAMrC,EAAc6C,6BAA6BH,EAAYC,CAAa,CAAC,GAE3GA,EAAgB,IAEhBR,EAAWS,WAAa,WAAW5C,EAAc6C,6BAA6BF,CAAa,CAAC,cAGzFR,CACX,CAUQ,OAAOU,6BAA6BC,EAAc,CAEtD,IAAIC,EAAYC,KAAKC,MAAMH,CAAM,EAC7BI,EAAUF,KAAKC,MAAMH,EAAS,EAAI,EAAE,EAExC,MAAO,GAAGC,EAAUX,SAAQ,EAAGG,SAAS,EAAG,GAAG,CAAC,IAAIW,EAAQd,SAAQ,EAAGG,SAAS,EAAG,GAAG,CAAC,EAC1F,CAUQ,OAAOrB,iCAAiCiC,EAA4B,CAExE,IAAIC,EAA+B,CAAA,EAEnC,QAASxB,KAAauB,EAEd,OAAOC,EAAOxB,EAAUyB,IAAI,GAAM,WAElCD,EAAOxB,EAAUyB,IAAI,EAAI,GAGzBzB,EAAU0B,OAAS,MAAQ1B,EAAU2B,KAAO,OAE5CH,EAAOxB,EAAUyB,IAAI,IAAMzB,EAAU2B,IAAIC,QAAO,EAAK5B,EAAU0B,MAAME,QAAO,GAAM,IAAO,GAAK,IAItG,OAAOJ,CACX,CAcQ,OAAO5B,wBACXiC,EACA1B,EACA2B,EACAC,EACArC,EAAuB,CAEvB,IAAIC,EAAYf,SAASC,gBAAgB,6BAA8B,MAAM,EAE7Ec,EAAUb,aAAa,OAAQ,aAAa,EAC5Ca,EAAUb,aAAa,QAAS,YAAY,EAE5C,IAAIkD,EAAe,GAAK,GACpBC,EAAab,KAAKC,OAAOW,EAAeD,GAAmBC,EAAetC,IAAoB,EAAE,EAChGwC,GAAiBzE,IAAeK,GAAcC,KAAiBkE,EAE/DE,EAAaN,EAASK,GAAiBH,EAAkB,GAAK,GAE9DK,EAAqB,IAAIC,MACzB,KAAKR,CAAM,IAAI1B,EAAStC,EAAmB,GAC3C,KAAKiE,CAAM,GACX,KAAKK,CAAU,IAAIhC,EAAStC,GAAsBI,EAAgB,EAAE,EAGxE,QAASqE,EAAI,EAAGA,EAAIL,EAAYK,IAC5BF,EAAmBG,KAAK,OAAOtE,EAAgB,EAAE,EAE7CqE,EAAI,GAAKL,EACTG,EAAmBG,KAAK,KAAKL,CAAa,KAAKjE,EAAgB,EAAE,EAIjEmE,EAAmBG,KAAK,GAAG,EAInC5C,OAAAA,EAAUb,aAAa,IAAKsD,EAAmBI,KAAK,GAAG,CAAC,EAEjD7C,CACX,CAaQ,OAAOG,mBACX+B,EACA1B,EACA4B,EACArC,EAAuB,CAEvB,IAAI+C,EAAe,IAAIJ,MAEnBL,EAAe,GAAK,GACpBC,EAAab,KAAKC,OAAOW,EAAeD,GAAmBC,EAAetC,IAAoB,EAAE,EAChGwC,GAAiBzE,IAAeK,GAAcC,KAAiBkE,EAC/DE,EAAaN,EAASK,GAAiBH,EAAkB,GAAK,GAElE,QAASO,EAAI,EAAGA,EAAIL,EAAYK,IAChC,CACI,IAAII,EAAc9D,SAASC,gBAAgB,6BAA8B,MAAM,EAC/E6D,EAAY5D,aAAa,KAAMqD,EAAaG,EAAIJ,GAAe1B,SAAQ,CAAE,EACzEkC,EAAY5D,aAAa,KAAMqB,EAASjC,IAAkBsC,SAAQ,CAAE,EACpEkC,EAAY5D,aAAa,cAAe,QAAQ,EAChD4D,EAAY1B,UAAY,IAAII,KAAKuB,KAAKZ,EAAkB,EAAE,EAAIO,GAAG9B,SAAQ,EAAGG,SAAS,EAAG,GAAG,CAAC,MAE5F8B,EAAaF,KAAKG,CAAW,CACjC,CAEA,OAAOD,CACX,CAcQ,OAAOvC,gBACX3B,EACAyB,EACAG,EACA4B,EACArC,EAAuB,CAEvB,GAAIM,EAAU0B,OAAS,MAAQ1B,EAAU2B,KAAO,KAChD,CACI,IAAI1B,EAAYrB,SAASC,gBAAgB,6BAA8B,MAAM,EAEzE,OAAON,EAA4ByB,EAAUyB,IAAI,GAAM,SAEvDxB,EAAUnB,aAAa,OAAQP,EAA4ByB,EAAUyB,IAAI,CAAC,EAI1ExB,EAAUnB,aAAa,OAAQ,SAAS,EAG5C,IAAI8D,EAAoCzE,GAAqB4D,EAAkB,GAAK,KAAS5D,GAAqBuB,EAAkB,GAAK,KAErImD,GAAmBpF,IAAeK,GAAcC,KAAiB6E,EAEjEE,EAAyBf,EAAkB,GAAK,IAChDF,GAAUzD,EAAc2E,wBAAwB/C,EAAU0B,KAAK,EAAIoB,GAA0BD,EAEjG5C,OAAAA,EAAUnB,aAAa,KAAM+C,EAAS/D,IAAa0C,SAAQ,CAAE,EAC7DP,EAAUnB,aAAa,IAAKqB,EAAOK,SAAQ,CAAE,EAC7CP,EAAUnB,aAAa,UAAWV,EAAc2E,wBAAwB/C,EAAU2B,GAAG,EAAIvD,EAAc2E,wBAAwB/C,EAAU0B,KAAK,GAAKmB,GAAiBrC,SAAQ,CAAE,EAC9KP,EAAUnB,aAAa,UAAWnB,GAAgBK,IAAgBwC,SAAQ,CAAE,EAErEP,CACX,KAGI,QAAO,IAEf,CAUQ,OAAO8C,wBAAwB3C,EAAU,CAE7C,OAAOA,EAAKwB,QAAO,EAAK,IAAIvC,KAAKe,EAAKS,YAAW,EAAIT,EAAKQ,SAAQ,EAAIR,EAAKM,QAAO,CAAE,EAAEkB,QAAO,CACjG,GCpYJ,IAAMoB,GAA+B,IAI/BC,GAA+BD,GAAuB,GAItDE,GAA6BD,GAAuB,GAoB7CE,IAAqB,IAAA,CAA5B,MAAOA,CAAqB,CAgC9BC,YAAmBC,EAAsB,CAErC,KAAKA,WAAaA,EAClB,KAAKC,UAAY,KACjB,KAAKC,QAAU,KACf,KAAKC,MAAQ,KACb,KAAKC,UAAY,KACjB,KAAKC,QAAU,IACnB,CAOOC,aAAW,CAEV,KAAKH,OAAS,MAEdI,cAAc,KAAKJ,KAAK,CAEhC,CAuBOK,aAAW,CAEd,KAAKP,UAAY,KAAKG,UACtB,KAAKF,QAAU,KAAKG,QAEpB,KAAKI,oBAAmB,CAC5B,CAUO,OAAOC,2BAA2BC,EAAoB,CAEzD,IAAIC,EAAwB,CACxBC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,aAAc,GAGdC,EAAwBN,EAE5BC,OAAAA,EAAOC,MAAQK,KAAKC,MAAMF,EAAwBpB,EAAkB,EACpEoB,GAAyBL,EAAOC,MAAQhB,GAExCe,EAAOE,QAAUI,KAAKC,MAAMF,EAAwBrB,EAAoB,EACxEqB,GAAyBL,EAAOE,QAAUlB,GAE1CgB,EAAOG,QAAUG,KAAKC,MAAMF,EAAwBtB,EAAoB,EACxEsB,GAAyBL,EAAOG,QAAUpB,GAE1CiB,EAAOI,aAAeC,EAEfL,CACX,CAOQH,qBAAmB,CAEnB,KAAKR,WAAa,OAElB,KAAKA,UAAY,IAAImB,MAGrB,KAAKlB,SAAW,KAEhB,KAAKC,MAAQkB,YAAY,IAAK,CAAG,KAAKC,wBAAuB,CAAI,EAAG,GAAG,GAIvE,KAAKA,wBAAuB,EAExB,KAAKnB,OAAS,MAEdI,cAAc,KAAKJ,KAAK,EAGpC,CAQQmB,yBAAuB,CAE3B,GAAI,KAAKrB,WAAa,KACtB,CAGI,IAAIsB,GAFU,KAAKrB,SAAW,IAAIkB,MAELI,QAAO,EAAK,KAAKvB,UAAUuB,QAAO,EAE3DC,EAAgB3B,EAAsBY,2BAA2Ba,CAAc,EAE/EX,EAAS,GAAGa,EAAcZ,KAAK,IAAIY,EAAcX,QAAQY,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,IAAIF,EAAcV,QAAQW,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,GAE/H,KAAK3B,WAAW4B,cAAeC,UAAYjB,CAC7D,CACJ,iDApKSd,GAAqBgC,EAAAC,CAAA,CAAA,CAAA,CAAA,+BAArBjC,EAAqBkC,UAAA,CAAA,CAAA,GAAA,kBAAA,EAAA,CAAA,EAAAC,OAAA,CAAAhC,UAAA,YAAAC,QAAA,UAAAE,UAAA,YAAAC,QAAA,SAAA,EAAA6B,WAAA,GAAAC,SAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,SAArBtC,CAAqB,GAAA,EC1B5B,IAAOuC,GAAP,KAAoB,CAStBC,YAAmBC,EAAYC,EAA4B,CAEvD,KAAKC,KAAOF,EAER,OAAOC,EAAc,IAErB,KAAKE,UAAY,IAAIC,OAIrB,KAAKD,UAAYF,EACjB,KAAKI,cAAa,EAE1B,CAqBA,IAAWC,cAAY,CAEnB,OAAI,KAAKH,UAAUI,QAAU,EAElB,KAIA,KAAKJ,UAAU,KAAKA,UAAUI,OAAS,CAAC,CAEvD,CAOOC,+BAA6B,CAEhC,IAAIC,EAAe,KAAKH,aAEpBG,GAAgB,MAAQA,EAAaC,KAAO,OAE5CD,EAAaC,IAAM,IAAIR,KAE/B,CASOS,8BAA8BC,EAAmB,CAEpD,IAAIH,EAAe,KAAKH,cAEpBG,GAAgB,MAAQA,EAAaC,KAAO,OAE5C,KAAKP,UAAUU,KACX,CACIC,MAAO,IAAIZ,KACXQ,IAAK,KACLK,KAAMH,EACT,CAGb,CAOQP,eAAa,CAEjB,KAAKF,UAAY,KAAKA,UAAUa,KAC5B,CAACC,EAAGC,IAAK,CAEL,IAAIC,EAAQF,EAAEH,OAASG,EAAEP,IACrBU,EAAQF,EAAEJ,OAASI,EAAER,IAEzB,OAAIS,GAAS,MAAQC,GAAS,KAEnBD,EAAME,QAAO,EAAKD,EAAMC,QAAO,EAI/B,CAEf,CAAC,CAET,GChHJ,IAAaC,IAAqB,IAAA,CAA5B,MAAOA,CAAqB,CAa9BC,aAAA,CAEI,KAAKC,gBAAkB,IAAIC,QACvB,CAACC,EAASC,IAAU,CAEhB,IAAIC,EAAgBC,OAAOC,UAAUC,KAAK,aAAc,CAAC,EAEzDH,EAAcI,UAAY,IAAK,CAE3BN,EAAQE,EAAcK,MAAM,CAChC,EAEAL,EAAcM,QAAWC,GAAS,CAE9BR,EAAaQ,GAAOC,QAASC,KAAK,CACtC,EAEAT,EAAcU,gBAAmBH,GAAS,CAEtC,KAAKI,gBAAgBJ,CAAK,CAC9B,CACJ,CAAC,EAEL,KAAKX,gBAAgBgB,KAChBC,GAAY,CAGb,CAAC,CAET,CAUO,OAAOC,2BAA2BC,EAAgB,CAErD,IAAIC,EAAYD,EAAQE,UAAUC,OAC7BC,GAEUA,EAAEC,MAAQC,EAAcC,QAClC,EAEDC,EAAYR,EAAQE,UAAUC,OAC7BC,GAEUA,EAAEC,MAAQC,EAAcG,IAClC,EAGDC,EAAoC,CACpCC,KAAMX,EAAQW,KACdC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,QAAS,KACTC,YAAa,KACbC,UAAW,KACXC,WAAY,EACZC,YAAa,GAGjB,OAAIlB,EAAUmB,QAAU,IAEpBV,EAAgBE,YAAcX,EAAU,CAAC,EAAEoB,MAC3CX,EAAgBG,UAAYZ,EAAU,CAAC,EAAEqB,IAErCrB,EAAU,CAAC,EAAEoB,OAAS,MAAQpB,EAAU,CAAC,EAAEqB,KAAO,OAElDZ,EAAgBS,aAAelB,EAAU,CAAC,EAAEqB,IAAIC,QAAO,EAAKtB,EAAU,CAAC,EAAEoB,MAAME,QAAO,IAI1Ff,EAAUY,QAAU,IAEpBV,EAAgBI,UAAYN,EAAU,CAAC,EAAEa,MACzCX,EAAgBK,QAAUP,EAAU,CAAC,EAAEc,IAEnCd,EAAU,CAAC,EAAEa,OAAS,MAAQb,EAAU,CAAC,EAAEc,KAAO,OAElDZ,EAAgBQ,YAAcV,EAAU,CAAC,EAAEc,IAAIC,QAAO,EAAKf,EAAU,CAAC,EAAEa,MAAME,QAAO,IAIzFtB,EAAUmB,QAAU,IAEpBV,EAAgBM,YAAcf,EAAU,CAAC,EAAEoB,MAC3CX,EAAgBO,UAAYhB,EAAU,CAAC,EAAEqB,IAErCrB,EAAU,CAAC,EAAEoB,OAAS,MAAQpB,EAAU,CAAC,EAAEqB,KAAO,OAElDZ,EAAgBS,aAAelB,EAAU,CAAC,EAAEqB,IAAIC,QAAO,EAAKtB,EAAU,CAAC,EAAEoB,MAAME,QAAO,IAIvFb,CACX,CAWac,YAAYC,EAAYC,EAAQ,QAAAC,EAAA,sBAIzC,IAAIC,GAFW,MAAM,KAAK/C,iBAEUgD,YAAY,YAAa,UAAU,EAAEC,YAAY,WAAW,EAEhG,OAAO,MAAM,IAAIhD,QACb,CAACiD,EAAS/C,IAAU,CAEhB,IAAIgD,EAAUJ,EAAqBK,OAAOC,YAAYC,MAAMV,EAAKF,QAAO,EAAIG,EAAGH,QAAO,CAAE,CAAC,EAEzFS,EAAQ3C,UAAY,IAAK,CAErB,QAASW,KAA2BgC,EAAQ1C,OAC5C,CACIU,EAAQW,KAAO,KAAKyB,YAAYpC,EAAQW,IAAI,EAE5C,QAAS0B,KAAarC,EAAQE,UAEtBmC,EAAUhB,OAAS,OAEnBgB,EAAUhB,MAAQ,KAAKe,YAAYC,EAAUhB,KAAK,GAGlDgB,EAAUf,KAAO,OAEjBe,EAAUf,IAAM,KAAKc,YAAYC,EAAUf,GAAG,EAG1D,CAEAS,EAAQC,EAAQ1C,MAAM,CAC1B,EAEA0C,EAAQzC,QAAWC,GAAS,CAExBR,EAAaQ,GAAOC,QAASC,KAAK,CACtC,CACJ,CAAC,CAGT,GASa4C,WAAWtC,EAAgB,QAAA2B,EAAA,sBAIpC,IAAIC,GAFW,MAAM,KAAK/C,iBAEUgD,YAAY,YAAa,WAAW,EAAEC,YAAY,WAAW,EAEjG,MAAM,IAAIhD,QACN,CAACiD,EAAS/C,IAAU,CAEhB,IAAIgD,EAAUJ,EAAqBW,IAAIvC,EAASA,EAAQW,KAAKY,QAAO,CAAE,EAEtES,EAAQ3C,UAAY,IAAK,CAErB0C,EAAO,CACX,EAEAC,EAAQzC,QAAWC,GAAS,CAExBR,EAAaQ,GAAOC,QAASC,KAAK,CACtC,CACJ,CAAC,CAET,GASa8C,cAAcC,EAAU,QAAAd,EAAA,sBAKjC,IAAIe,GAHW,MAAM,KAAK7D,iBAEUgD,YAAY,YAAa,WAAW,EAAEC,YAAY,WAAW,EACxDa,OAAOF,EAAKlB,QAAO,CAAE,EAE9D,MAAM,IAAIzC,QACN,CAACiD,EAAS/C,IAAU,CAEhB0D,EAAcrD,UAAY,IAAK,CAE3B0C,EAAO,CACX,EAEAW,EAAcnD,QAAWC,GAAS,CAE9BR,EAAaQ,GAAOC,QAASC,KAAK,CACtC,CACJ,CAAC,CAET,GASQE,gBAAgBJ,EAA4B,CAEhD,QAASoD,EAAUpD,EAAMqD,WAAa,EAAGD,IAAYpD,EAAMsD,YAActD,EAAMqD,YAAaD,IAExF,OAAOA,EAAO,CAEV,IAAK,GACD,KAAKG,mBAAyBvD,EAAMC,OAAQH,MAAM,EAClD,KACR,CAER,CASOyD,mBAAmBjD,EAAqB,CAEhBA,EAASkD,kBAAkB,YAAa,CAAEC,cAAe,EAAI,CAAE,EAErEC,YAAY,OAAQ,MAAM,CACnD,CASQd,YAAYK,EAA4B,CAE5C,OAAI,OAAOA,GAAS,UAAY,OAAOA,GAAS,SAErC,IAAI9B,KAAK8B,CAAI,EAIbA,CAEf,iDAvRS9D,EAAqB,CAAA,iCAArBA,EAAqBwE,QAArBxE,EAAqByE,UAAAC,WAFlB,MAAM,CAAA,CAAA,SAET1E,CAAqB,GAAA,yBEHtB2E,EAAA,CAAA,EACIC,EAAA,EAAA,IAAA,CAAA,EAAiBC,EAAA,EAAA,SAAA,EAAOC,EAAA,iCAE5BH,EAAA,CAAA,EACII,EAAA,EAAA,IAAA,CAAA,gCACgBC,EAAA,EAAAC,EAAA,YAAAC,EAAAC,uBAAAC,KAAA,EAAqD,UAAAF,EAAAC,uBAAAE,GAAA,0BAUzEV,EAAA,CAAA,EACIC,EAAA,EAAA,IAAA,CAAA,EAAiBC,EAAA,EAAA,SAAA,EAAOC,EAAA,iCAE5BH,EAAA,CAAA,EACII,EAAA,EAAA,IAAA,CAAA,gCACgBC,EAAA,EAAAC,EAAA,YAAAC,EAAAI,SAAAF,KAAA,EAAuC,UAAAF,EAAAI,SAAAD,GAAA,0BAU3DV,EAAA,CAAA,EACIC,EAAA,EAAA,IAAA,CAAA,EAAiBC,EAAA,EAAA,SAAA,EAAOC,EAAA,iCAE5BH,EAAA,CAAA,EACII,EAAA,EAAA,IAAA,CAAA,gCACgBC,EAAA,EAAAC,EAAA,YAAAC,EAAAK,sBAAAH,KAAA,EAAoD,UAAAF,EAAAK,sBAAAF,GAAA,uCAO5ET,EAAA,EAAA,SAAA,EAAA,EACIY,GAAA,QAAA,UAAA,CAAAC,GAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,CAAA,EAAA,OAAAC,GAASF,EAAAG,cAAA,CAAoB,CAAA,CAAA,EAAEjB,EAAA,EAAA,gBAAA,EAAcC,EAAA,uCACjDF,EAAA,EAAA,SAAA,EAAA,EACIY,GAAA,QAAA,UAAA,CAAAC,GAAAM,CAAA,EAAA,IAAAJ,EAAAC,EAAA,CAAA,EAAA,OAAAC,GAASF,EAAAK,UAAA,CAAgB,CAAA,CAAA,EAAEnB,EAAA,EAAA,cAAA,EAAYC,EAAA,uCAC3CF,EAAA,EAAA,SAAA,EAAA,EACQY,GAAA,QAAA,UAAA,CAAAC,GAAAQ,CAAA,EAAA,IAAAN,EAAAC,EAAA,CAAA,EAAA,OAAAC,GAASF,EAAAG,cAAA,CAAoB,CAAA,CAAA,EAAEjB,EAAA,EAAA,gBAAA,EAAcC,EAAA,uCACrDF,EAAA,EAAA,SAAA,EAAA,EACQY,GAAA,QAAA,UAAA,CAAAC,GAAAS,CAAA,EAAA,IAAAP,EAAAC,EAAA,CAAA,EAAA,OAAAC,GAASF,EAAAQ,YAAA,CAAkB,CAAA,CAAA,EAAEtB,EAAA,EAAA,eAAA,EAAaC,EAAA,6BAzD1DH,EAAA,CAAA,EACIC,EAAA,EAAA,MAAA,CAAA,EAAoB,EAAA,MAAA,CAAA,EAKsD,EAAA,GAAA,EAC/DC,EAAA,EAAA,kBAAA,EAAaC,EAAA,EAChBsB,EAAA,EAAAC,GAAA,EAAA,EAAA,eAAA,CAAA,EAAmC,EAAAC,GAAA,EAAA,EAAA,eAAA,CAAA,EAQvCxB,EAAA,EACAF,EAAA,EAAA,MAAA,CAAA,EAIsE,EAAA,GAAA,EAC/DC,EAAA,EAAA,QAAA,EAAMC,EAAA,EACTsB,EAAA,GAAAG,GAAA,EAAA,EAAA,eAAA,CAAA,EAAmC,GAAAC,GAAA,EAAA,EAAA,eAAA,CAAA,EAQvC1B,EAAA,EACAF,EAAA,GAAA,MAAA,CAAA,EAIsE,GAAA,GAAA,EAC/DC,EAAA,GAAA,iBAAA,EAAeC,EAAA,EAClBsB,EAAA,GAAAK,GAAA,EAAA,EAAA,eAAA,CAAA,EAAmC,GAAAC,GAAA,EAAA,EAAA,eAAA,CAAA,EAQvC5B,EAAA,EAAM,EAEVF,EAAA,GAAA,MAAA,CAAA,EAEIwB,EAAA,GAAAO,GAAA,EAAA,EAAA,SAAA,CAAA,EACmC,GAAAC,GAAA,EAAA,EAAA,SAAA,CAAA,EAEJ,GAAAC,GAAA,EAAA,EAAA,SAAA,CAAA,EAEQ,GAAAC,GAAA,EAAA,EAAA,SAAA,CAAA,EAG3ChC,EAAA,oCArDSE,EAAA,CAAA,EAAA+B,GAAA,SAAApB,EAAAqB,eAAArB,EAAAsB,WAAAC,eAAAvB,EAAAqB,eAAArB,EAAAsB,WAAAE,SAAA,EAFAlC,EAAA,WAAAC,EAAAC,uBAAAC,OAAA,MAAAF,EAAAC,uBAAAE,KAAA,IAAA,EAKcL,EAAA,CAAA,EAAAC,EAAA,eAAA,EAAA,EAYdD,EAAA,CAAA,EAAA+B,GAAA,SAAApB,EAAAqB,eAAArB,EAAAsB,WAAAG,QAAAzB,EAAAqB,eAAArB,EAAAsB,WAAAE,SAAA,EAFAlC,EAAA,WAAAC,EAAAI,SAAAF,OAAA,MAAAF,EAAAI,SAAAD,KAAA,IAAA,EAKcL,EAAA,CAAA,EAAAC,EAAA,eAAA,EAAA,EAYdD,EAAA,CAAA,EAAA+B,GAAA,SAAApB,EAAAqB,eAAArB,EAAAsB,WAAAI,aAAA1B,EAAAqB,eAAArB,EAAAsB,WAAAE,SAAA,EAFAlC,EAAA,WAAAC,EAAAK,sBAAAH,OAAA,MAAAF,EAAAK,sBAAAF,KAAA,IAAA,EAKcL,EAAA,CAAA,EAAAC,EAAA,eAAA,EAAA,EAWlBD,EAAA,CAAA,EAAAC,EAAA,WAAAU,EAAAqB,aAAA,EACQhC,EAAA,EAAAC,EAAA,eAAAU,EAAAsB,WAAAK,OAAA,EAEAtC,EAAA,EAAAC,EAAA,eAAAU,EAAAsB,WAAAC,aAAA,EAEAlC,EAAA,EAAAC,EAAA,eAAAU,EAAAsB,WAAAG,MAAA,EAEApC,EAAA,EAAAC,EAAA,eAAAU,EAAAsB,WAAAI,WAAA,GD/BjB,IAAKJ,GAAL,SAAKA,EAAU,CAIXA,OAAAA,EAAAA,EAAA,QAAA,CAAA,EAAA,UAKAA,EAAAA,EAAA,cAAA,CAAA,EAAA,gBAKAA,EAAAA,EAAA,OAAA,CAAA,EAAA,SAKAA,EAAAA,EAAA,YAAA,CAAA,EAAA,cAKAA,EAAAA,EAAA,UAAA,CAAA,EAAA,YAxBCA,CAyBL,EAzBKA,IAAU,CAAA,CAAA,EAwCFM,IAAoB,IAAA,CAA3B,MAAOA,CAAoB,CAqB7BC,YACIC,EACAC,EAAsB,CAmBnB,KAAAT,WAAaA,GAjBhB,KAAKQ,sBAAwBA,EAC7B,KAAKC,UAAYA,EAEjB,KAAKV,cAAgBC,GAAWK,QAEhC,KAAKK,eAAiB,KAEtB,KAAKC,sBAAwB,KAAKC,kBAAiB,EACnD,KAAKC,+BAA8B,CAEvC,CAmCahC,eAAa,QAAAiC,EAAA,sBAEtB,IAAIC,EAAiB,MAAM,KAAKJ,sBAEhCI,EAAeC,QAAQC,8BAA6B,EACpDF,EAAeC,QAAQE,8BAA8BC,EAAcC,QAAQ,EAE3E,MAAM,KAAKZ,sBAAsBa,WAC7B,CACIC,KAAMP,EAAeC,QAAQM,KAC7BC,UAAWR,EAAeC,QAAQO,UACrC,EAGL,KAAKV,+BAA8B,CAEvC,GAOa3B,aAAW,QAAA4B,EAAA,sBAEpB,IAAIC,EAAiB,MAAM,KAAKJ,sBAEhCI,EAAeC,QAAQC,8BAA6B,EAEpD,MAAM,KAAKT,sBAAsBa,WAC7B,CACIC,KAAMP,EAAeC,QAAQM,KAC7BC,UAAWR,EAAeC,QAAQO,UACrC,EAGL,KAAKV,+BAA8B,CAEvC,GAOa9B,WAAS,QAAA+B,EAAA,sBAElB,IAAIC,EAAiB,MAAM,KAAKJ,sBAEhCI,EAAeC,QAAQC,8BAA6B,EACpDF,EAAeC,QAAQE,8BAA8BC,EAAcK,IAAI,EAEvE,MAAM,KAAKhB,sBAAsBa,WAC7B,CACIC,KAAMP,EAAeC,QAAQM,KAC7BC,UAAWR,EAAeC,QAAQO,UACrC,EAGL,KAAKV,+BAA8B,CAEvC,GAOaY,SAAO,QAAAX,EAAA,sBAEhB,IAAIC,EAAiB,MAAM,KAAKJ,sBAEhCI,EAAeC,QAAQC,8BAA6B,EAEpD,MAAM,KAAKT,sBAAsBa,WAC7B,CACIC,KAAMP,EAAeC,QAAQM,KAC7BC,UAAWR,EAAeC,QAAQO,UACrC,EAGL,KAAKV,+BAA8B,CAEvC,GAQcA,gCAA8B,QAAAC,EAAA,sBAExC,KAAKH,sBAAwB,KAAKC,kBAAiB,EACnD,IAAIc,EAAa,MAAM,KAAKf,sBAExBe,EAAWxD,uBAAuBC,OAAS,KAE3C,KAAK4B,cAAgBC,GAAWK,QAE3BqB,EAAWrD,SAASF,OAAS,KAElC,KAAK4B,cAAgBC,GAAWC,cAE3ByB,EAAWpD,sBAAsBH,OAAS,KAE/C,KAAK4B,cAAgBC,GAAWG,OAE3BuB,EAAWpD,sBAAsBF,KAAO,KAE7C,KAAK2B,cAAgBC,GAAWI,YAIhC,KAAKL,cAAgBC,GAAWE,SAExC,GAQcyB,uBAAqB,QAAAb,EAAA,sBAE/B,IAAIc,EAAc,IAAIN,KAClBO,EAAY,IAAIP,KAChBM,EAAYE,YAAW,EACvBF,EAAYG,SAAQ,EAAK,EACzBH,EAAYI,QAAO,CAAE,EAErBC,EAAW,IAAIX,KACfM,EAAYE,YAAW,EACvBF,EAAYG,SAAQ,EACpBH,EAAYI,QAAO,EAAK,CAAC,EAE7BC,EAASC,WAAW,EAAE,EAEtB,IAAIC,EAAW,MAAM,IAAIC,QACrB,CAAOC,EAASC,IAAUxB,EAAA,sBACtB,IAAIqB,EAAW,MAAM,KAAK3B,sBAAsB+B,YAAYV,EAAWI,CAAQ,EAE/EI,EAAQF,CAAQ,CACpB,EAAC,EAGL,KAAKzB,eAAiB,KAAKD,UAAU+B,wBAAwBC,GAAcC,OAAOP,CAAQ,EAAEQ,SAAS,CACzG,GASc/B,mBAAiB,QAAAE,EAAA,sBAE3B,IAAIc,EAAc,IAAIN,KAClBsB,EAAa,IAAItB,KACjBM,EAAYE,YAAW,EACvBF,EAAYG,SAAQ,EACpBH,EAAYI,QAAO,CAAE,EAErBC,EAAW,IAAIX,KACfM,EAAYE,YAAW,EACvBF,EAAYG,SAAQ,EACpBH,EAAYI,QAAO,EAAK,CAAC,EAE7BC,EAASC,WAAW,EAAE,EAEtB,IAAIC,EAAW,MAAM,KAAK3B,sBAAsB+B,YAAYK,EAAYX,CAAQ,EAE5EY,EAA6B,CAC7B3E,uBAAwB,CACpBC,MAAO,KACPC,IAAK,KACL0E,KAAM3B,EAAcC,UAExB/C,SAAU,CACNF,MAAO,KACPC,IAAK,KACL0E,KAAM3B,EAAcK,MAExBlD,sBAAuB,CACnBH,MAAO,KACPC,IAAK,KACL0E,KAAM3B,EAAcC,UAExBJ,QAAS,IAAI+B,GAAc,IAAIzB,IAAM,GAGzC,GAAIa,EAASa,OAAS,EACtB,CACI,IAAIC,EAAYd,EAAS,CAAC,EAAEZ,UAAU2B,OACjCC,GAEUA,EAAEL,MAAQ3B,EAAcC,QAClC,EAEDgC,EAAYjB,EAAS,CAAC,EAAEZ,UAAU2B,OACjCC,GAEUA,EAAEL,MAAQ3B,EAAcK,IAClC,EAGDyB,EAAUD,QAAU,IAEpBH,EAAe3E,uBAAuBC,MAAQ8E,EAAU,CAAC,EAAE9E,MAC3D0E,EAAe3E,uBAAuBE,IAAM6E,EAAU,CAAC,EAAE7E,KAGzD6E,EAAUD,QAAU,IAEpBH,EAAevE,sBAAsBH,MAAQ8E,EAAU,CAAC,EAAE9E,MAC1D0E,EAAevE,sBAAsBF,IAAM6E,EAAU,CAAC,EAAE7E,KAGxDgF,EAAUJ,QAAU,IAEpBH,EAAexE,SAASF,MAAQiF,EAAU,CAAC,EAAEjF,MAC7C0E,EAAexE,SAASD,IAAMgF,EAAU,CAAC,EAAEhF,KAG/CyE,EAAe7B,QAAU,IAAI+B,GAAcZ,EAAS,CAAC,EAAEb,KAAMa,EAAS,CAAC,EAAEZ,SAAS,CACtF,CAEA,OAAOsB,CACX,mDA5SSvC,GAAoB+C,EAAAC,EAAA,EAAAD,EAAAE,EAAA,CAAA,CAAA,CAAA,+BAApBjD,EAAoBkD,UAAA,CAAA,CAAA,kBAAA,CAAA,EAAAC,WAAA,GAAAC,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,iBAAA,EAAA,WAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,EAAA,cAAA,EAAA,UAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,CAAA,EAAA,QAAA,EAAA,cAAA,EAAA,CAAA,EAAA,OAAA,EAAA,CAAA,kBAAA,GAAA,EAAA,QAAA,EAAA,YAAA,SAAA,EAAA,CAAA,EAAA,OAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICjEjC7E,EAAA,EAAA+E,GAAA,GAAA,GAAA,eAAA,CAAA,gBA4DApG,EAAA,EAAA,MAAA,CAAA,SA5DeE,EAAA,OAAAmG,GAAA,EAAA,EAAAF,EAAAtD,qBAAA,CAAA,EA4Da5C,EAAA,CAAA,EAAAC,EAAA,YAAAiG,EAAAvD,eAAA0D,EAAA,kBDDpBC,GAAYC,GAAAC,GAAAC,GAAAC,GAAAC,GACZC,EAAqB,EAAAC,OAAA,CAAA;gEAAA,CAAA,CAAA,CAAA,SAKhBtE,CAAoB,GAAA,EE3DjC,IAAIuE,GAMJ,GAAI,CACFA,GAAqB,OAAO,KAAS,KAAe,KAAK,eAC3D,MAAQ,CACNA,GAAqB,EACvB,CAKA,IAAIC,IAAyB,IAAM,CACjC,MAAMA,CAAS,CACb,YAAYC,EAAa,CACvB,KAAK,YAAcA,EAKnB,KAAK,UAAY,KAAK,YAAcC,GAAkB,KAAK,WAAW,EAAI,OAAO,UAAa,UAAY,CAAC,CAAC,SAE5G,KAAK,KAAO,KAAK,WAAa,UAAU,KAAK,UAAU,SAAS,EAEhE,KAAK,QAAU,KAAK,WAAa,kBAAkB,KAAK,UAAU,SAAS,EAG3E,KAAK,MAAQ,KAAK,WAAa,CAAC,EAAE,OAAO,QAAUH,KAAuB,OAAO,IAAQ,KAAe,CAAC,KAAK,MAAQ,CAAC,KAAK,QAI5H,KAAK,OAAS,KAAK,WAAa,eAAe,KAAK,UAAU,SAAS,GAAK,CAAC,KAAK,OAAS,CAAC,KAAK,MAAQ,CAAC,KAAK,QAE/G,KAAK,IAAM,KAAK,WAAa,mBAAmB,KAAK,UAAU,SAAS,GAAK,EAAE,aAAc,QAM7F,KAAK,QAAU,KAAK,WAAa,uBAAuB,KAAK,UAAU,SAAS,EAGhF,KAAK,QAAU,KAAK,WAAa,WAAW,KAAK,UAAU,SAAS,GAAK,CAAC,KAAK,QAK/E,KAAK,OAAS,KAAK,WAAa,UAAU,KAAK,UAAU,SAAS,GAAK,KAAK,MAC9E,CACA,MAAO,CACL,KAAK,UAAO,SAA0B,EAAG,CACvC,OAAO,IAAK,GAAKC,GAAaG,EAASC,EAAW,CAAC,CACrD,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOL,EACP,QAASA,EAAS,UAClB,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAyDH,IAAIM,GAKJ,SAASC,IAAgC,CACvC,GAAID,IAAyB,MAAQ,OAAO,OAAW,IACrD,GAAI,CACF,OAAO,iBAAiB,OAAQ,KAAM,OAAO,eAAe,CAAC,EAAG,UAAW,CACzE,IAAK,IAAMA,GAAwB,EACrC,CAAC,CAAC,CACJ,QAAE,CACAA,GAAwBA,IAAyB,EACnD,CAEF,OAAOA,EACT,CAOA,SAASE,GAAgCC,EAAS,CAChD,OAAOF,GAA8B,EAAIE,EAAU,CAAC,CAACA,EAAQ,OAC/D,CA+FA,IAAIC,GAEJ,SAASC,IAAqB,CAC5B,GAAID,IAAwB,KAAM,CAChC,IAAME,EAAO,OAAO,SAAa,IAAc,SAAS,KAAO,KAC/DF,GAAuB,CAAC,EAAEE,IAASA,EAAK,kBAAoBA,EAAK,cACnE,CACA,OAAOF,EACT,CAEA,SAASG,GAAeC,EAAS,CAC/B,GAAIH,GAAmB,EAAG,CACxB,IAAMI,EAAWD,EAAQ,YAAcA,EAAQ,YAAY,EAAI,KAG/D,GAAI,OAAO,WAAe,KAAe,YAAcC,aAAoB,WACzE,OAAOA,CAEX,CACA,OAAO,IACT,CAkBA,SAASC,GAAgBC,EAAO,CAG9B,OAAOA,EAAM,aAAeA,EAAM,aAAa,EAAE,CAAC,EAAIA,EAAM,MAC9D,CAGA,SAASC,IAAqB,CAK5B,OAEE,OAAO,UAAc,KAAe,CAAC,CAAC,WAEtC,OAAO,QAAY,KAAe,CAAC,CAAC,SAEpC,OAAO,KAAS,KAAe,CAAC,CAAC,MAEjC,OAAO,MAAU,KAAe,CAAC,CAAC,KAEtC,CCxSA,SAASC,GAAeC,EAAO,CAI7B,MAAO,CAAC,MAAM,WAAWA,CAAK,CAAC,GAAK,CAAC,MAAM,OAAOA,CAAK,CAAC,CAC1D,CACA,SAASC,GAAYD,EAAO,CAC1B,OAAO,MAAM,QAAQA,CAAK,EAAIA,EAAQ,CAACA,CAAK,CAC9C,CAcA,SAASE,GAAcC,EAAc,CACnC,OAAOA,aAAwBC,EAAaD,EAAa,cAAgBA,CAC3E,CCRA,IAAME,GAAkD,IAAI,IAExDC,GAEAC,IAA6B,IAAM,CACrC,MAAMA,CAAa,CACjB,YAAYC,EAAWC,EAAQ,CAC7B,KAAK,UAAYD,EACjB,KAAK,OAASC,EACd,KAAK,YAAc,KAAK,UAAU,WAAa,OAAO,WAGtD,OAAO,WAAW,KAAK,MAAM,EAAIC,EACnC,CAOA,WAAWC,EAAO,CAChB,OAAI,KAAK,UAAU,QAAU,KAAK,UAAU,QAC1CC,GAAqBD,EAAO,KAAK,MAAM,EAElC,KAAK,YAAYA,CAAK,CAC/B,CACA,MAAO,CACL,KAAK,UAAO,SAA8B,EAAG,CAC3C,OAAO,IAAK,GAAKJ,GAAiBM,EAAYC,EAAQ,EAAMD,EAASE,GAAW,CAAC,CAAC,CACpF,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOT,EACP,QAASA,EAAa,UACtB,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAaH,SAASK,GAAqBD,EAAOM,EAAO,CAC1C,GAAI,CAAAZ,GAAmC,IAAIM,CAAK,EAGhD,GAAI,CACGL,KACHA,GAAsB,SAAS,cAAc,OAAO,EAChDW,GACFX,GAAoB,aAAa,QAASW,CAAK,EAEjDX,GAAoB,aAAa,OAAQ,UAAU,EACnD,SAAS,KAAK,YAAYA,EAAmB,GAE3CA,GAAoB,QACtBA,GAAoB,MAAM,WAAW,UAAUK,CAAK,aAAc,CAAC,EACnEN,GAAmC,IAAIM,CAAK,EAEhD,OAAS,EAAG,CACV,QAAQ,MAAM,CAAC,CACjB,CACF,CAEA,SAASD,GAAeC,EAAO,CAG7B,MAAO,CACL,QAASA,IAAU,OAASA,IAAU,GACtC,MAAOA,EACP,YAAa,IAAM,CAAC,EACpB,eAAgB,IAAM,CAAC,CACzB,CACF,CAGA,IAAIO,IAAmC,IAAM,CAC3C,MAAMA,CAAmB,CACvB,YAAYC,EAAeC,EAAO,CAChC,KAAK,cAAgBD,EACrB,KAAK,MAAQC,EAEb,KAAK,SAAW,IAAI,IAEpB,KAAK,gBAAkB,IAAIC,CAC7B,CAEA,aAAc,CACZ,KAAK,gBAAgB,KAAK,EAC1B,KAAK,gBAAgB,SAAS,CAChC,CAMA,UAAUC,EAAO,CAEf,OADgBC,GAAaC,GAAYF,CAAK,CAAC,EAChC,KAAKG,GAAc,KAAK,eAAeA,CAAU,EAAE,IAAI,OAAO,CAC/E,CAOA,QAAQH,EAAO,CAEb,IAAMI,EADUH,GAAaC,GAAYF,CAAK,CAAC,EACnB,IAAIX,GAAS,KAAK,eAAeA,CAAK,EAAE,UAAU,EAC1EgB,EAAkBC,GAAcF,CAAW,EAE/C,OAAAC,EAAkBE,GAAOF,EAAgB,KAAKG,EAAK,CAAC,CAAC,EAAGH,EAAgB,KAAKI,GAAK,CAAC,EAAGC,GAAa,CAAC,CAAC,CAAC,EAC/FL,EAAgB,KAAKM,EAAIC,GAAoB,CAClD,IAAMC,EAAW,CACf,QAAS,GACT,YAAa,CAAC,CAChB,EACA,OAAAD,EAAiB,QAAQ,CAAC,CACxB,QAAAE,EACA,MAAAzB,CACF,IAAM,CACJwB,EAAS,QAAUA,EAAS,SAAWC,EACvCD,EAAS,YAAYxB,CAAK,EAAIyB,CAChC,CAAC,EACMD,CACT,CAAC,CAAC,CACJ,CAEA,eAAexB,EAAO,CAEpB,GAAI,KAAK,SAAS,IAAIA,CAAK,EACzB,OAAO,KAAK,SAAS,IAAIA,CAAK,EAEhC,IAAM0B,EAAM,KAAK,cAAc,WAAW1B,CAAK,EAoBzC2B,EAAS,CACb,WAnBsB,IAAIC,GAAWC,GAAY,CAMjD,IAAMC,EAAUC,GAAK,KAAK,MAAM,IAAI,IAAMF,EAAS,KAAKE,CAAC,CAAC,EAC1D,OAAAL,EAAI,YAAYI,CAAO,EAChB,IAAM,CACXJ,EAAI,eAAeI,CAAO,CAC5B,CACF,CAAC,EAAE,KAAKE,GAAUN,CAAG,EAAGJ,EAAI,CAAC,CAC3B,QAAAG,CACF,KAAO,CACL,MAAAzB,EACA,QAAAyB,CACF,EAAE,EAAGQ,GAAU,KAAK,eAAe,CAAC,EAIlC,IAAAP,CACF,EACA,YAAK,SAAS,IAAI1B,EAAO2B,CAAM,EACxBA,CACT,CACA,MAAO,CACL,KAAK,UAAO,SAAoC,EAAG,CACjD,OAAO,IAAK,GAAKpB,GAAuBL,EAASN,EAAY,EAAMM,EAAYgC,CAAM,CAAC,CACxF,CACF,CACA,MAAO,CACL,KAAK,WAA0B7B,EAAmB,CAChD,MAAOE,EACP,QAASA,EAAmB,UAC5B,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAQH,SAASK,GAAauB,EAAS,CAC7B,OAAOA,EAAQ,IAAInC,GAASA,EAAM,MAAM,GAAG,CAAC,EAAE,OAAO,CAACoC,EAAIC,IAAOD,EAAG,OAAOC,CAAE,CAAC,EAAE,IAAIrC,GAASA,EAAM,KAAK,CAAC,CAC3G,CClNA,IAAMsC,GAAe,IAKrB,SAASC,GAAoBC,EAAIC,EAAMC,EAAI,CACzC,IAAMC,EAAMC,GAAoBJ,EAAIC,CAAI,EACxCC,EAAKA,EAAG,KAAK,EACT,CAAAC,EAAI,KAAKE,GAAcA,EAAW,KAAK,IAAMH,CAAE,IAGnDC,EAAI,KAAKD,CAAE,EACXF,EAAG,aAAaC,EAAME,EAAI,KAAKL,EAAY,CAAC,EAC9C,CAKA,SAASQ,GAAuBN,EAAIC,EAAMC,EAAI,CAC5C,IAAMC,EAAMC,GAAoBJ,EAAIC,CAAI,EACxCC,EAAKA,EAAG,KAAK,EACb,IAAMK,EAAcJ,EAAI,OAAOK,GAAOA,IAAQN,CAAE,EAC5CK,EAAY,OACdP,EAAG,aAAaC,EAAMM,EAAY,KAAKT,EAAY,CAAC,EAEpDE,EAAG,gBAAgBC,CAAI,CAE3B,CAKA,SAASG,GAAoBJ,EAAIC,EAAM,CAGrC,OADkBD,EAAG,aAAaC,CAAI,GACpB,MAAM,MAAM,GAAK,CAAC,CACtC,CAaA,IAAMQ,GAA4B,0BAM5BC,GAAiC,uBAEnCC,GAAS,EAMTC,IAA8B,IAAM,CACtC,MAAMA,CAAc,CAClB,YAAYC,EAKZC,EAAW,CACT,KAAK,UAAYA,EAEjB,KAAK,iBAAmB,IAAI,IAE5B,KAAK,mBAAqB,KAE1B,KAAK,IAAM,GAAGH,IAAQ,GACtB,KAAK,UAAYE,EACjB,KAAK,IAAME,EAAOC,EAAM,EAAI,IAAML,IACpC,CACA,SAASM,EAAaC,EAASC,EAAM,CACnC,GAAI,CAAC,KAAK,gBAAgBF,EAAaC,CAAO,EAC5C,OAEF,IAAME,EAAMC,GAAOH,EAASC,CAAI,EAC5B,OAAOD,GAAY,UAErBI,GAAaJ,EAAS,KAAK,GAAG,EAC9B,KAAK,iBAAiB,IAAIE,EAAK,CAC7B,eAAgBF,EAChB,eAAgB,CAClB,CAAC,GACS,KAAK,iBAAiB,IAAIE,CAAG,GACvC,KAAK,sBAAsBF,EAASC,CAAI,EAErC,KAAK,6BAA6BF,EAAaG,CAAG,GACrD,KAAK,qBAAqBH,EAAaG,CAAG,CAE9C,CACA,kBAAkBH,EAAaC,EAASC,EAAM,CAC5C,GAAI,CAACD,GAAW,CAAC,KAAK,eAAeD,CAAW,EAC9C,OAEF,IAAMG,EAAMC,GAAOH,EAASC,CAAI,EAMhC,GALI,KAAK,6BAA6BF,EAAaG,CAAG,GACpD,KAAK,wBAAwBH,EAAaG,CAAG,EAI3C,OAAOF,GAAY,SAAU,CAC/B,IAAMK,EAAoB,KAAK,iBAAiB,IAAIH,CAAG,EACnDG,GAAqBA,EAAkB,iBAAmB,GAC5D,KAAK,sBAAsBH,CAAG,CAElC,CACI,KAAK,oBAAoB,WAAW,SAAW,IACjD,KAAK,mBAAmB,OAAO,EAC/B,KAAK,mBAAqB,KAE9B,CAEA,aAAc,CACZ,IAAMI,EAAoB,KAAK,UAAU,iBAAiB,IAAId,EAA8B,KAAK,KAAK,GAAG,IAAI,EAC7G,QAASe,EAAI,EAAGA,EAAID,EAAkB,OAAQC,IAC5C,KAAK,kCAAkCD,EAAkBC,CAAC,CAAC,EAC3DD,EAAkBC,CAAC,EAAE,gBAAgBf,EAA8B,EAErE,KAAK,oBAAoB,OAAO,EAChC,KAAK,mBAAqB,KAC1B,KAAK,iBAAiB,MAAM,CAC9B,CAKA,sBAAsBQ,EAASC,EAAM,CACnC,IAAMO,EAAiB,KAAK,UAAU,cAAc,KAAK,EACzDJ,GAAaI,EAAgB,KAAK,GAAG,EACrCA,EAAe,YAAcR,EACzBC,GACFO,EAAe,aAAa,OAAQP,CAAI,EAE1C,KAAK,yBAAyB,EAC9B,KAAK,mBAAmB,YAAYO,CAAc,EAClD,KAAK,iBAAiB,IAAIL,GAAOH,EAASC,CAAI,EAAG,CAC/C,eAAAO,EACA,eAAgB,CAClB,CAAC,CACH,CAEA,sBAAsBN,EAAK,CACzB,KAAK,iBAAiB,IAAIA,CAAG,GAAG,gBAAgB,OAAO,EACvD,KAAK,iBAAiB,OAAOA,CAAG,CAClC,CAEA,0BAA2B,CACzB,GAAI,KAAK,mBACP,OAEF,IAAMO,EAAqB,oCACrBC,EAAmB,KAAK,UAAU,iBAAiB,IAAID,CAAkB,qBAAqB,EACpG,QAASF,EAAI,EAAGA,EAAIG,EAAiB,OAAQH,IAK3CG,EAAiBH,CAAC,EAAE,OAAO,EAE7B,IAAMI,EAAoB,KAAK,UAAU,cAAc,KAAK,EAK5DA,EAAkB,MAAM,WAAa,SAGrCA,EAAkB,UAAU,IAAIF,CAAkB,EAClDE,EAAkB,UAAU,IAAI,qBAAqB,EAEjD,KAAK,WAAa,CAAC,KAAK,UAAU,WACpCA,EAAkB,aAAa,WAAY,QAAQ,EAErD,KAAK,UAAU,KAAK,YAAYA,CAAiB,EACjD,KAAK,mBAAqBA,CAC5B,CAEA,kCAAkCC,EAAS,CAEzC,IAAMC,EAAuBC,GAAoBF,EAAS,kBAAkB,EAAE,OAAOG,GAAMA,EAAG,QAAQxB,EAAyB,GAAK,CAAC,EACrIqB,EAAQ,aAAa,mBAAoBC,EAAqB,KAAK,GAAG,CAAC,CACzE,CAKA,qBAAqBD,EAASV,EAAK,CACjC,IAAMG,EAAoB,KAAK,iBAAiB,IAAIH,CAAG,EAGvDc,GAAoBJ,EAAS,mBAAoBP,EAAkB,eAAe,EAAE,EACpFO,EAAQ,aAAapB,GAAgC,KAAK,GAAG,EAC7Da,EAAkB,gBACpB,CAKA,wBAAwBO,EAASV,EAAK,CACpC,IAAMG,EAAoB,KAAK,iBAAiB,IAAIH,CAAG,EACvDG,EAAkB,iBAClBY,GAAuBL,EAAS,mBAAoBP,EAAkB,eAAe,EAAE,EACvFO,EAAQ,gBAAgBpB,EAA8B,CACxD,CAEA,6BAA6BoB,EAASV,EAAK,CACzC,IAAMgB,EAAeJ,GAAoBF,EAAS,kBAAkB,EAC9DP,EAAoB,KAAK,iBAAiB,IAAIH,CAAG,EACjDiB,EAAYd,GAAqBA,EAAkB,eAAe,GACxE,MAAO,CAAC,CAACc,GAAaD,EAAa,QAAQC,CAAS,GAAK,EAC3D,CAEA,gBAAgBP,EAASZ,EAAS,CAChC,GAAI,CAAC,KAAK,eAAeY,CAAO,EAC9B,MAAO,GAET,GAAIZ,GAAW,OAAOA,GAAY,SAIhC,MAAO,GAET,IAAMoB,EAAiBpB,GAAW,KAAO,GAAK,GAAGA,CAAO,GAAG,KAAK,EAC1DqB,EAAYT,EAAQ,aAAa,YAAY,EAGnD,OAAOQ,EAAiB,CAACC,GAAaA,EAAU,KAAK,IAAMD,EAAiB,EAC9E,CAEA,eAAeR,EAAS,CACtB,OAAOA,EAAQ,WAAa,KAAK,UAAU,YAC7C,CACA,MAAO,CACL,KAAK,UAAO,SAA+B,EAAG,CAC5C,OAAO,IAAK,GAAKlB,GAAkB4B,EAASC,CAAQ,EAAMD,EAAYE,EAAQ,CAAC,CACjF,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAO/B,EACP,QAASA,EAAc,UACvB,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAKH,SAASS,GAAOH,EAASC,EAAM,CAC7B,OAAO,OAAOD,GAAY,SAAW,GAAGC,GAAQ,EAAE,IAAID,CAAO,GAAKA,CACpE,CAEA,SAASI,GAAaQ,EAASc,EAAW,CACnCd,EAAQ,KACXA,EAAQ,GAAK,GAAGrB,EAAyB,IAAImC,CAAS,IAAIjC,IAAQ,GAEtE,CAqqCA,SAASkC,GAAgCC,EAAO,CAM9C,OAAOA,EAAM,UAAY,GAAKA,EAAM,SAAW,CACjD,CAEA,SAASC,GAAiCD,EAAO,CAC/C,IAAME,EAAQF,EAAM,SAAWA,EAAM,QAAQ,CAAC,GAAKA,EAAM,gBAAkBA,EAAM,eAAe,CAAC,EAKjG,MAAO,CAAC,CAACE,GAASA,EAAM,aAAe,KAAOA,EAAM,SAAW,MAAQA,EAAM,UAAY,KAAOA,EAAM,SAAW,MAAQA,EAAM,UAAY,EAC7I,CAMA,IAAMC,GAA+C,IAAIC,EAAe,qCAAqC,EAiBvGC,GAA0C,CAC9C,WAAY,CAAC,GAAK,GAAS,IAAU,GAAM,EAAK,CAClD,EAQMC,GAAkB,IAKlBC,GAA4CC,GAAgC,CAChF,QAAS,GACT,QAAS,EACX,CAAC,EAeGC,IAAsC,IAAM,CAC9C,MAAMA,CAAsB,CAE1B,IAAI,oBAAqB,CACvB,OAAO,KAAK,UAAU,KACxB,CACA,YAAYC,EAAWC,EAAQC,EAAUC,EAAS,CAChD,KAAK,UAAYH,EAKjB,KAAK,kBAAoB,KAEzB,KAAK,UAAY,IAAII,EAAgB,IAAI,EAKzC,KAAK,aAAe,EAKpB,KAAK,WAAad,GAAS,CAGrB,KAAK,UAAU,YAAY,KAAKe,GAAWA,IAAYf,EAAM,OAAO,IAGxE,KAAK,UAAU,KAAK,UAAU,EAC9B,KAAK,kBAAoBgB,GAAgBhB,CAAK,EAChD,EAKA,KAAK,aAAeA,GAAS,CAIvB,KAAK,IAAI,EAAI,KAAK,aAAeM,KAKrC,KAAK,UAAU,KAAKP,GAAgCC,CAAK,EAAI,WAAa,OAAO,EACjF,KAAK,kBAAoBgB,GAAgBhB,CAAK,EAChD,EAKA,KAAK,cAAgBA,GAAS,CAG5B,GAAIC,GAAiCD,CAAK,EAAG,CAC3C,KAAK,UAAU,KAAK,UAAU,EAC9B,MACF,CAGA,KAAK,aAAe,KAAK,IAAI,EAC7B,KAAK,UAAU,KAAK,OAAO,EAC3B,KAAK,kBAAoBgB,GAAgBhB,CAAK,CAChD,EACA,KAAK,SAAWiB,IAAA,GACXZ,IACAQ,GAGL,KAAK,iBAAmB,KAAK,UAAU,KAAKK,GAAK,CAAC,CAAC,EACnD,KAAK,gBAAkB,KAAK,iBAAiB,KAAKC,GAAqB,CAAC,EAGpET,EAAU,WACZC,EAAO,kBAAkB,IAAM,CAC7BC,EAAS,iBAAiB,UAAW,KAAK,WAAYL,EAA4B,EAClFK,EAAS,iBAAiB,YAAa,KAAK,aAAcL,EAA4B,EACtFK,EAAS,iBAAiB,aAAc,KAAK,cAAeL,EAA4B,CAC1F,CAAC,CAEL,CACA,aAAc,CACZ,KAAK,UAAU,SAAS,EACpB,KAAK,UAAU,YACjB,SAAS,oBAAoB,UAAW,KAAK,WAAYA,EAA4B,EACrF,SAAS,oBAAoB,YAAa,KAAK,aAAcA,EAA4B,EACzF,SAAS,oBAAoB,aAAc,KAAK,cAAeA,EAA4B,EAE/F,CACA,MAAO,CACL,KAAK,UAAO,SAAuC,EAAG,CACpD,OAAO,IAAK,GAAKE,GAA0BW,EAAYC,EAAQ,EAAMD,EAAYE,CAAM,EAAMF,EAASG,CAAQ,EAAMH,EAASjB,GAAiC,CAAC,CAAC,CAClK,CACF,CACA,MAAO,CACL,KAAK,WAA0BqB,EAAmB,CAChD,MAAOf,EACP,QAASA,EAAsB,UAC/B,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAsNH,IAAIgB,GAAyC,SAAUA,EAA2B,CAMhF,OAAAA,EAA0BA,EAA0B,UAAe,CAAC,EAAI,YAKxEA,EAA0BA,EAA0B,SAAc,CAAC,EAAI,WAChEA,CACT,EAAEA,IAA6B,CAAC,CAAC,EAE3BC,GAA6C,IAAIC,EAAe,mCAAmC,EAKnGC,GAA2CC,GAAgC,CAC/E,QAAS,GACT,QAAS,EACX,CAAC,EAEGC,IAA6B,IAAM,CACrC,MAAMA,CAAa,CACjB,YAAYC,EAASC,EAAWC,EAChCC,EAAUC,EAAS,CACjB,KAAK,QAAUJ,EACf,KAAK,UAAYC,EACjB,KAAK,uBAAyBC,EAE9B,KAAK,QAAU,KAEf,KAAK,eAAiB,GAKtB,KAAK,4BAA8B,GAEnC,KAAK,aAAe,IAAI,IAExB,KAAK,uBAAyB,EAO9B,KAAK,4BAA8B,IAAI,IAKvC,KAAK,qBAAuB,IAAM,CAGhC,KAAK,eAAiB,GACtB,KAAK,sBAAwB,OAAO,WAAW,IAAM,KAAK,eAAiB,EAAK,CAClF,EAEA,KAAK,2BAA6B,IAAIG,EAKtC,KAAK,8BAAgCC,GAAS,CAC5C,IAAMC,EAASC,GAAgBF,CAAK,EAEpC,QAASG,EAAUF,EAAQE,EAASA,EAAUA,EAAQ,cAChDH,EAAM,OAAS,QACjB,KAAK,SAASA,EAAOG,CAAO,EAE5B,KAAK,QAAQH,EAAOG,CAAO,CAGjC,EACA,KAAK,UAAYN,EACjB,KAAK,eAAiBC,GAAS,eAAiBV,GAA0B,SAC5E,CACA,QAAQe,EAASC,EAAgB,GAAO,CACtC,IAAMC,EAAgBC,GAAcH,CAAO,EAE3C,GAAI,CAAC,KAAK,UAAU,WAAaE,EAAc,WAAa,EAE1D,OAAOE,EAAG,EAKZ,IAAMC,EAAWC,GAAeJ,CAAa,GAAK,KAAK,aAAa,EAC9DK,EAAa,KAAK,aAAa,IAAIL,CAAa,EAEtD,GAAIK,EACF,OAAIN,IAIFM,EAAW,cAAgB,IAEtBA,EAAW,QAGpB,IAAMC,EAAO,CACX,cAAeP,EACf,QAAS,IAAIL,EACb,SAAAS,CACF,EACA,YAAK,aAAa,IAAIH,EAAeM,CAAI,EACzC,KAAK,yBAAyBA,CAAI,EAC3BA,EAAK,OACd,CACA,eAAeR,EAAS,CACtB,IAAME,EAAgBC,GAAcH,CAAO,EACrCS,EAAc,KAAK,aAAa,IAAIP,CAAa,EACnDO,IACFA,EAAY,QAAQ,SAAS,EAC7B,KAAK,YAAYP,CAAa,EAC9B,KAAK,aAAa,OAAOA,CAAa,EACtC,KAAK,uBAAuBO,CAAW,EAE3C,CACA,SAAST,EAASU,EAAQf,EAAS,CACjC,IAAMO,EAAgBC,GAAcH,CAAO,EACrCW,EAAiB,KAAK,aAAa,EAAE,cAIvCT,IAAkBS,EACpB,KAAK,wBAAwBT,CAAa,EAAE,QAAQ,CAAC,CAACU,EAAgBJ,CAAI,IAAM,KAAK,eAAeI,EAAgBF,EAAQF,CAAI,CAAC,GAEjI,KAAK,WAAWE,CAAM,EAElB,OAAOR,EAAc,OAAU,YACjCA,EAAc,MAAMP,CAAO,EAGjC,CACA,aAAc,CACZ,KAAK,aAAa,QAAQ,CAACkB,EAAOb,IAAY,KAAK,eAAeA,CAAO,CAAC,CAC5E,CAEA,cAAe,CACb,OAAO,KAAK,WAAa,QAC3B,CAEA,YAAa,CAEX,OADY,KAAK,aAAa,EACnB,aAAe,MAC5B,CACA,gBAAgBc,EAAkB,CAChC,OAAI,KAAK,QAGH,KAAK,4BACA,KAAK,2BAA2BA,CAAgB,EAAI,QAAU,UAE9D,KAAK,QAYZ,KAAK,gBAAkB,KAAK,iBACvB,KAAK,iBAMVA,GAAoB,KAAK,iCAAiCA,CAAgB,EACrE,QAEF,SACT,CASA,2BAA2BA,EAAkB,CAW3C,OAAO,KAAK,iBAAmB7B,GAA0B,UAAY,CAAC,CAAC6B,GAAkB,SAAS,KAAK,uBAAuB,iBAAiB,CACjJ,CAMA,YAAYd,EAASU,EAAQ,CAC3BV,EAAQ,UAAU,OAAO,cAAe,CAAC,CAACU,CAAM,EAChDV,EAAQ,UAAU,OAAO,oBAAqBU,IAAW,OAAO,EAChEV,EAAQ,UAAU,OAAO,uBAAwBU,IAAW,UAAU,EACtEV,EAAQ,UAAU,OAAO,oBAAqBU,IAAW,OAAO,EAChEV,EAAQ,UAAU,OAAO,sBAAuBU,IAAW,SAAS,CACtE,CAQA,WAAWA,EAAQK,EAAoB,GAAO,CAC5C,KAAK,QAAQ,kBAAkB,IAAM,CAQnC,GAPA,KAAK,QAAUL,EACf,KAAK,4BAA8BA,IAAW,SAAWK,EAMrD,KAAK,iBAAmB9B,GAA0B,UAAW,CAC/D,aAAa,KAAK,gBAAgB,EAClC,IAAM+B,EAAK,KAAK,4BAA8BC,GAAkB,EAChE,KAAK,iBAAmB,WAAW,IAAM,KAAK,QAAU,KAAMD,CAAE,CAClE,CACF,CAAC,CACH,CAMA,SAASnB,EAAOG,EAAS,CAOvB,IAAMS,EAAc,KAAK,aAAa,IAAIT,CAAO,EAC3Cc,EAAmBf,GAAgBF,CAAK,EAC1C,CAACY,GAAe,CAACA,EAAY,eAAiBT,IAAYc,GAG9D,KAAK,eAAed,EAAS,KAAK,gBAAgBc,CAAgB,EAAGL,CAAW,CAClF,CAMA,QAAQZ,EAAOG,EAAS,CAGtB,IAAMS,EAAc,KAAK,aAAa,IAAIT,CAAO,EAC7C,CAACS,GAAeA,EAAY,eAAiBZ,EAAM,yBAAyB,MAAQG,EAAQ,SAASH,EAAM,aAAa,IAG5H,KAAK,YAAYG,CAAO,EACxB,KAAK,YAAYS,EAAa,IAAI,EACpC,CACA,YAAYD,EAAME,EAAQ,CACpBF,EAAK,QAAQ,UAAU,QACzB,KAAK,QAAQ,IAAI,IAAMA,EAAK,QAAQ,KAAKE,CAAM,CAAC,CAEpD,CACA,yBAAyBD,EAAa,CACpC,GAAI,CAAC,KAAK,UAAU,UAClB,OAEF,IAAMJ,EAAWI,EAAY,SACvBS,EAAyB,KAAK,4BAA4B,IAAIb,CAAQ,GAAK,EAC5Ea,GACH,KAAK,QAAQ,kBAAkB,IAAM,CACnCb,EAAS,iBAAiB,QAAS,KAAK,8BAA+BjB,EAA2B,EAClGiB,EAAS,iBAAiB,OAAQ,KAAK,8BAA+BjB,EAA2B,CACnG,CAAC,EAEH,KAAK,4BAA4B,IAAIiB,EAAUa,EAAyB,CAAC,EAErE,EAAE,KAAK,yBAA2B,IAGpC,KAAK,QAAQ,kBAAkB,IAAM,CACpB,KAAK,WAAW,EACxB,iBAAiB,QAAS,KAAK,oBAAoB,CAC5D,CAAC,EAED,KAAK,uBAAuB,iBAAiB,KAAKC,GAAU,KAAK,0BAA0B,CAAC,EAAE,UAAUC,GAAY,CAClH,KAAK,WAAWA,EAAU,EAA4B,CACxD,CAAC,EAEL,CACA,uBAAuBX,EAAa,CAClC,IAAMJ,EAAWI,EAAY,SAC7B,GAAI,KAAK,4BAA4B,IAAIJ,CAAQ,EAAG,CAClD,IAAMa,EAAyB,KAAK,4BAA4B,IAAIb,CAAQ,EACxEa,EAAyB,EAC3B,KAAK,4BAA4B,IAAIb,EAAUa,EAAyB,CAAC,GAEzEb,EAAS,oBAAoB,QAAS,KAAK,8BAA+BjB,EAA2B,EACrGiB,EAAS,oBAAoB,OAAQ,KAAK,8BAA+BjB,EAA2B,EACpG,KAAK,4BAA4B,OAAOiB,CAAQ,EAEpD,CAEM,EAAE,KAAK,yBACI,KAAK,WAAW,EACxB,oBAAoB,QAAS,KAAK,oBAAoB,EAE7D,KAAK,2BAA2B,KAAK,EAErC,aAAa,KAAK,qBAAqB,EACvC,aAAa,KAAK,gBAAgB,EAEtC,CAEA,eAAeL,EAASU,EAAQD,EAAa,CAC3C,KAAK,YAAYT,EAASU,CAAM,EAChC,KAAK,YAAYD,EAAaC,CAAM,EACpC,KAAK,iBAAmBA,CAC1B,CAMA,wBAAwBV,EAAS,CAC/B,IAAMqB,EAAU,CAAC,EACjB,YAAK,aAAa,QAAQ,CAACb,EAAMI,IAAmB,EAC9CA,IAAmBZ,GAAWQ,EAAK,eAAiBI,EAAe,SAASZ,CAAO,IACrFqB,EAAQ,KAAK,CAACT,EAAgBJ,CAAI,CAAC,CAEvC,CAAC,EACMa,CACT,CAMA,iCAAiCP,EAAkB,CACjD,GAAM,CACJ,kBAAmBQ,EACnB,mBAAAC,CACF,EAAI,KAAK,uBAIT,GAAIA,IAAuB,SAAW,CAACD,GAAoBA,IAAqBR,GAAoBA,EAAiB,WAAa,SAAWA,EAAiB,WAAa,YAAcA,EAAiB,SACxM,MAAO,GAET,IAAMU,EAASV,EAAiB,OAChC,GAAIU,GACF,QAASC,EAAI,EAAGA,EAAID,EAAO,OAAQC,IACjC,GAAID,EAAOC,CAAC,EAAE,SAASH,CAAgB,EACrC,MAAO,GAIb,MAAO,EACT,CACA,MAAO,CACL,KAAK,UAAO,SAA8B,EAAG,CAC3C,OAAO,IAAK,GAAKhC,GAAiBoC,EAAYC,CAAM,EAAMD,EAAYE,EAAQ,EAAMF,EAASG,EAAqB,EAAMH,EAASI,EAAU,CAAC,EAAMJ,EAASxC,GAA+B,CAAC,CAAC,CAC9L,CACF,CACA,MAAO,CACL,KAAK,WAA0B6C,EAAmB,CAChD,MAAOzC,EACP,QAASA,EAAa,UACtB,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EA6DH,IAAI0C,GAAgC,SAAUA,EAAkB,CAC9D,OAAAA,EAAiBA,EAAiB,KAAU,CAAC,EAAI,OACjDA,EAAiBA,EAAiB,eAAoB,CAAC,EAAI,iBAC3DA,EAAiBA,EAAiB,eAAoB,CAAC,EAAI,iBACpDA,CACT,EAAEA,IAAoB,CAAC,CAAC,EAElBC,GAA2B,mCAE3BC,GAA2B,mCAE3BC,GAAsC,2BAYxCC,IAAyC,IAAM,CACjD,MAAMA,CAAyB,CAC7B,YAAYC,EAAWC,EAAU,CAC/B,KAAK,UAAYD,EACjB,KAAK,UAAYC,EACjB,KAAK,wBAA0BC,EAAOC,EAAkB,EAAE,QAAQ,yBAAyB,EAAE,UAAU,IAAM,CACvG,KAAK,8BACP,KAAK,4BAA8B,GACnC,KAAK,qCAAqC,EAE9C,CAAC,CACH,CAEA,qBAAsB,CACpB,GAAI,CAAC,KAAK,UAAU,UAClB,OAAOR,GAAiB,KAK1B,IAAMS,EAAc,KAAK,UAAU,cAAc,KAAK,EACtDA,EAAY,MAAM,gBAAkB,aACpCA,EAAY,MAAM,SAAW,WAC7B,KAAK,UAAU,KAAK,YAAYA,CAAW,EAK3C,IAAMC,EAAiB,KAAK,UAAU,aAAe,OAC/CC,EAAgBD,GAAkBA,EAAe,iBAAmBA,EAAe,iBAAiBD,CAAW,EAAI,KACnHG,GAAiBD,GAAiBA,EAAc,iBAAmB,IAAI,QAAQ,KAAM,EAAE,EAE7F,OADAF,EAAY,OAAO,EACXG,EAAe,CAErB,IAAK,aAEL,IAAK,gBACL,IAAK,gBACH,OAAOZ,GAAiB,eAE1B,IAAK,mBAEL,IAAK,mBACH,OAAOA,GAAiB,cAC5B,CACA,OAAOA,GAAiB,IAC1B,CACA,aAAc,CACZ,KAAK,wBAAwB,YAAY,CAC3C,CAEA,sCAAuC,CACrC,GAAI,CAAC,KAAK,6BAA+B,KAAK,UAAU,WAAa,KAAK,UAAU,KAAM,CACxF,IAAMa,EAAc,KAAK,UAAU,KAAK,UACxCA,EAAY,OAAOV,GAAqCF,GAA0BC,EAAwB,EAC1G,KAAK,4BAA8B,GACnC,IAAMY,EAAO,KAAK,oBAAoB,EAClCA,IAASd,GAAiB,eAC5Ba,EAAY,IAAIV,GAAqCF,EAAwB,EACpEa,IAASd,GAAiB,gBACnCa,EAAY,IAAIV,GAAqCD,EAAwB,CAEjF,CACF,CACA,MAAO,CACL,KAAK,UAAO,SAA0C,EAAG,CACvD,OAAO,IAAK,GAAKE,GAA6BW,EAAYC,EAAQ,EAAMD,EAASE,CAAQ,CAAC,CAC5F,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOd,EACP,QAASA,EAAyB,UAClC,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EC11EH,IAAMe,GAA4B,IAAIC,EAAe,cAAe,CAClE,WAAY,OACZ,QAASC,EACX,CAAC,EAED,SAASA,IAAuB,CAC9B,OAAOC,EAAOC,CAAQ,CACxB,CAGA,IAAMC,GAAqB,qHAE3B,SAASC,GAAuBC,EAAU,CACxC,IAAMC,EAAQD,GAAU,YAAY,GAAK,GACzC,OAAIC,IAAU,QAAU,OAAO,UAAc,KAAe,WAAW,SAC9DH,GAAmB,KAAK,UAAU,QAAQ,EAAI,MAAQ,MAExDG,IAAU,MAAQ,MAAQ,KACnC,CAKA,IAAIC,IAA+B,IAAM,CACvC,MAAMA,CAAe,CACnB,YAAYC,EAAW,CAKrB,GAHA,KAAK,MAAQ,MAEb,KAAK,OAAS,IAAIC,GACdD,EAAW,CACb,IAAME,EAAUF,EAAU,KAAOA,EAAU,KAAK,IAAM,KAChDG,EAAUH,EAAU,gBAAkBA,EAAU,gBAAgB,IAAM,KAC5E,KAAK,MAAQJ,GAAuBM,GAAWC,GAAW,KAAK,CACjE,CACF,CACA,aAAc,CACZ,KAAK,OAAO,SAAS,CACvB,CACA,MAAO,CACL,KAAK,UAAO,SAAgC,EAAG,CAC7C,OAAO,IAAK,GAAKJ,GAAmBK,EAASd,GAAc,CAAC,CAAC,CAC/D,CACF,CACA,MAAO,CACL,KAAK,WAA0Be,EAAmB,CAChD,MAAON,EACP,QAASA,EAAe,UACxB,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAkFH,IAAIO,IAA2B,IAAM,CACnC,MAAMA,CAAW,CACf,MAAO,CACL,KAAK,UAAO,SAA4B,EAAG,CACzC,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAiB,CAC7C,KAAMD,CACR,CAAC,CACH,CACA,MAAO,CACL,KAAK,UAAyBE,EAAiB,CAAC,CAAC,CACnD,CACF,CACA,OAAOF,CACT,GAAG,ECpHH,IAAIG,IAAgC,IAAM,CACxC,MAAMA,CAAgB,CACpB,MAAO,CACL,KAAK,eAAiB,6BACxB,CACA,MAAO,CACL,KAAK,mBAAqB,6BAC5B,CACA,MAAO,CACL,KAAK,mBAAqB,2BAC5B,CACA,MAAO,CACL,KAAK,YAAc,6BACrB,CACF,CACA,OAAOA,CACT,GAAG,EAECC,IAAmC,IAAM,CAC3C,MAAMA,CAAmB,CACvB,MAAO,CACL,KAAK,QAAU,OACjB,CACA,MAAO,CACL,KAAK,SAAW,OAClB,CACA,MAAO,CACL,KAAK,QAAU,OACjB,CACF,CACA,OAAOA,CACT,GAAG,EAEH,SAASC,IAAiC,CACxC,MAAO,EACT,CAEA,IAAMC,GAAsC,IAAIC,EAAe,oBAAqB,CAClF,WAAY,OACZ,QAASF,EACX,CAAC,EAOGG,IAAgC,IAAM,CACxC,MAAMA,CAAgB,CACpB,YAAYC,EAA0BC,EAAeC,EAAW,CAC9D,KAAK,cAAgBD,EACrB,KAAK,UAAYC,EAEjB,KAAK,qBAAuB,GAG5BF,EAAyB,qCAAqC,EACzD,KAAK,uBACR,KAAK,qBAAuB,GAiBhC,CAEA,gBAAgBG,EAAM,CACpB,OAAIC,GAAmB,EACd,GAEL,OAAO,KAAK,eAAkB,UACzB,KAAK,cAEP,CAAC,CAAC,KAAK,cAAcD,CAAI,CAClC,CACA,MAAO,CACL,KAAK,UAAO,SAAiC,EAAG,CAC9C,OAAO,IAAK,GAAKJ,GAAoBM,EAAYC,EAAwB,EAAMD,EAASR,GAAwB,CAAC,EAAMQ,EAASE,CAAQ,CAAC,CAC3I,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAiB,CAC7C,KAAMT,CACR,CAAC,CACH,CACA,MAAO,CACL,KAAK,UAAyBU,EAAiB,CAC7C,QAAS,CAACC,GAAYA,EAAU,CAClC,CAAC,CACH,CACF,CACA,OAAOX,CACT,GAAG,EAivBH,IAAIY,GAA2B,SAAUA,EAAa,CACpD,OAAAA,EAAYA,EAAY,UAAe,CAAC,EAAI,YAC5CA,EAAYA,EAAY,QAAa,CAAC,EAAI,UAC1CA,EAAYA,EAAY,WAAgB,CAAC,EAAI,aAC7CA,EAAYA,EAAY,OAAY,CAAC,EAAI,SAClCA,CACT,EAAEA,IAAe,CAAC,CAAC,EAIbC,GAAN,KAAgB,CACd,YAAYC,EACZC,EACAC,EACAC,EAAuC,GAAO,CAC5C,KAAK,UAAYH,EACjB,KAAK,QAAUC,EACf,KAAK,OAASC,EACd,KAAK,qCAAuCC,EAE5C,KAAK,MAAQL,GAAY,MAC3B,CAEA,SAAU,CACR,KAAK,UAAU,cAAc,IAAI,CACnC,CACF,EAGMM,GAA8CC,GAAgC,CAClF,QAAS,GACT,QAAS,EACX,CAAC,EAEKC,GAAN,KAAyB,CACvB,aAAc,CACZ,KAAK,QAAU,IAAI,IAEnB,KAAK,sBAAwBC,GAAS,CACpC,IAAMC,EAASC,GAAgBF,CAAK,EAChCC,GACF,KAAK,QAAQ,IAAID,EAAM,IAAI,GAAG,QAAQ,CAACG,EAAUT,IAAY,EACvDA,IAAYO,GAAUP,EAAQ,SAASO,CAAM,IAC/CE,EAAS,QAAQC,GAAWA,EAAQ,YAAYJ,CAAK,CAAC,CAE1D,CAAC,CAEL,CACF,CAEA,WAAWK,EAAQC,EAAMZ,EAASU,EAAS,CACzC,IAAMG,EAAmB,KAAK,QAAQ,IAAID,CAAI,EAC9C,GAAIC,EAAkB,CACpB,IAAMC,EAAqBD,EAAiB,IAAIb,CAAO,EACnDc,EACFA,EAAmB,IAAIJ,CAAO,EAE9BG,EAAiB,IAAIb,EAAS,IAAI,IAAI,CAACU,CAAO,CAAC,CAAC,CAEpD,MACE,KAAK,QAAQ,IAAIE,EAAM,IAAI,IAAI,CAAC,CAACZ,EAAS,IAAI,IAAI,CAACU,CAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAC/DC,EAAO,kBAAkB,IAAM,CAC7B,SAAS,iBAAiBC,EAAM,KAAK,sBAAuBT,EAA8B,CAC5F,CAAC,CAEL,CAEA,cAAcS,EAAMZ,EAASU,EAAS,CACpC,IAAMG,EAAmB,KAAK,QAAQ,IAAID,CAAI,EAC9C,GAAI,CAACC,EACH,OAEF,IAAMC,EAAqBD,EAAiB,IAAIb,CAAO,EAClDc,IAGLA,EAAmB,OAAOJ,CAAO,EAC7BI,EAAmB,OAAS,GAC9BD,EAAiB,OAAOb,CAAO,EAE7Ba,EAAiB,OAAS,IAC5B,KAAK,QAAQ,OAAOD,CAAI,EACxB,SAAS,oBAAoBA,EAAM,KAAK,sBAAuBT,EAA8B,GAEjG,CACF,EAMMY,GAA+B,CACnC,cAAe,IACf,aAAc,GAChB,EAKMC,GAA2B,IAE3BC,GAA4Cb,GAAgC,CAChF,QAAS,GACT,QAAS,EACX,CAAC,EAEKc,GAAoB,CAAC,YAAa,YAAY,EAE9CC,GAAkB,CAAC,UAAW,aAAc,WAAY,aAAa,EAQrEC,GAAN,MAAMC,CAAe,CACnB,MAAO,CACL,KAAK,cAA6B,IAAIhB,EACxC,CACA,YAAYiB,EAASC,EAASC,EAAqBC,EAAW,CAC5D,KAAK,QAAUH,EACf,KAAK,QAAUC,EACf,KAAK,UAAYE,EAEjB,KAAK,eAAiB,GAOtB,KAAK,eAAiB,IAAI,IAE1B,KAAK,2BAA6B,GAE9BA,EAAU,YACZ,KAAK,kBAAoBC,GAAcF,CAAmB,EAE9D,CAOA,aAAaG,EAAGC,EAAG3B,EAAS,CAAC,EAAG,CAC9B,IAAM4B,EAAgB,KAAK,eAAiB,KAAK,gBAAkB,KAAK,kBAAkB,sBAAsB,EAC1GC,EAAkBC,IAAA,GACnBhB,IACAd,EAAO,WAERA,EAAO,WACT0B,EAAIE,EAAc,KAAOA,EAAc,MAAQ,EAC/CD,EAAIC,EAAc,IAAMA,EAAc,OAAS,GAEjD,IAAMG,EAAS/B,EAAO,QAAUgC,GAAyBN,EAAGC,EAAGC,CAAa,EACtEK,EAAUP,EAAIE,EAAc,KAC5BM,EAAUP,EAAIC,EAAc,IAC5BO,EAAgBN,EAAgB,cAChCO,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAU,IAAI,oBAAoB,EACzCA,EAAO,MAAM,KAAO,GAAGH,EAAUF,CAAM,KACvCK,EAAO,MAAM,IAAM,GAAGF,EAAUH,CAAM,KACtCK,EAAO,MAAM,OAAS,GAAGL,EAAS,CAAC,KACnCK,EAAO,MAAM,MAAQ,GAAGL,EAAS,CAAC,KAG9B/B,EAAO,OAAS,OAClBoC,EAAO,MAAM,gBAAkBpC,EAAO,OAExCoC,EAAO,MAAM,mBAAqB,GAAGD,CAAa,KAClD,KAAK,kBAAkB,YAAYC,CAAM,EAKzC,IAAMC,EAAiB,OAAO,iBAAiBD,CAAM,EAC/CE,EAAyBD,EAAe,mBACxCE,EAAyBF,EAAe,mBAMxCG,GAAsCF,IAA2B,QAGvEC,IAA2B,MAAQA,IAA2B,UAE9DX,EAAc,QAAU,GAAKA,EAAc,SAAW,EAEhDa,EAAY,IAAI5C,GAAU,KAAMuC,EAAQpC,EAAQwC,EAAmC,EAKzFJ,EAAO,MAAM,UAAY,mBACzBK,EAAU,MAAQ7C,GAAY,UACzBI,EAAO,aACV,KAAK,2BAA6ByC,GAEpC,IAAIC,EAAiB,KAGrB,MAAI,CAACF,KAAwCL,GAAiBN,EAAgB,eAC5E,KAAK,QAAQ,kBAAkB,IAAM,CACnC,IAAMc,GAAkB,IAAM,KAAK,wBAAwBF,CAAS,EAC9DG,GAAqB,IAAM,KAAK,eAAeH,CAAS,EAC9DL,EAAO,iBAAiB,gBAAiBO,EAAe,EAIxDP,EAAO,iBAAiB,mBAAoBQ,EAAkB,EAC9DF,EAAiB,CACf,gBAAAC,GACA,mBAAAC,EACF,CACF,CAAC,EAGH,KAAK,eAAe,IAAIH,EAAWC,CAAc,GAG7CF,IAAuC,CAACL,IAC1C,KAAK,wBAAwBM,CAAS,EAEjCA,CACT,CAEA,cAAcA,EAAW,CAEvB,GAAIA,EAAU,QAAU7C,GAAY,YAAc6C,EAAU,QAAU7C,GAAY,OAChF,OAEF,IAAMiD,EAAWJ,EAAU,QACrBZ,EAAkBC,IAAA,GACnBhB,IACA2B,EAAU,OAAO,WAItBI,EAAS,MAAM,mBAAqB,GAAGhB,EAAgB,YAAY,KACnEgB,EAAS,MAAM,QAAU,IACzBJ,EAAU,MAAQ7C,GAAY,YAG1B6C,EAAU,sCAAwC,CAACZ,EAAgB,eACrE,KAAK,wBAAwBY,CAAS,CAE1C,CAEA,YAAa,CACX,KAAK,kBAAkB,EAAE,QAAQL,GAAUA,EAAO,QAAQ,CAAC,CAC7D,CAEA,yBAA0B,CACxB,KAAK,kBAAkB,EAAE,QAAQA,GAAU,CACpCA,EAAO,OAAO,YACjBA,EAAO,QAAQ,CAEnB,CAAC,CACH,CAEA,mBAAmBb,EAAqB,CACtC,IAAMxB,EAAU0B,GAAcF,CAAmB,EAC7C,CAAC,KAAK,UAAU,WAAa,CAACxB,GAAWA,IAAY,KAAK,kBAI9D,KAAK,qBAAqB,EAC1B,KAAK,gBAAkBA,EAGvBkB,GAAkB,QAAQ6B,GAAQ,CAChC1B,EAAe,cAAc,WAAW,KAAK,QAAS0B,EAAM/C,EAAS,IAAI,CAC3E,CAAC,EACH,CAKA,YAAYM,EAAO,CACbA,EAAM,OAAS,YACjB,KAAK,aAAaA,CAAK,EACdA,EAAM,OAAS,aACxB,KAAK,cAAcA,CAAK,EAExB,KAAK,aAAa,EAKf,KAAK,6BAMR,KAAK,QAAQ,kBAAkB,IAAM,CACnCa,GAAgB,QAAQ4B,GAAQ,CAC9B,KAAK,gBAAgB,iBAAiBA,EAAM,KAAM9B,EAA4B,CAChF,CAAC,CACH,CAAC,EACD,KAAK,2BAA6B,GAEtC,CAEA,wBAAwByB,EAAW,CAC7BA,EAAU,QAAU7C,GAAY,UAClC,KAAK,wBAAwB6C,CAAS,EAC7BA,EAAU,QAAU7C,GAAY,YACzC,KAAK,eAAe6C,CAAS,CAEjC,CAKA,wBAAwBA,EAAW,CACjC,IAAMM,EAA8BN,IAAc,KAAK,2BACjD,CACJ,WAAAO,CACF,EAAIP,EAAU,OACdA,EAAU,MAAQ7C,GAAY,QAK1B,CAACoD,IAAe,CAACD,GAA+B,CAAC,KAAK,iBACxDN,EAAU,QAAQ,CAEtB,CAEA,eAAeA,EAAW,CACxB,IAAMC,EAAiB,KAAK,eAAe,IAAID,CAAS,GAAK,KAC7D,KAAK,eAAe,OAAOA,CAAS,EAE/B,KAAK,eAAe,OACvB,KAAK,eAAiB,MAIpBA,IAAc,KAAK,6BACrB,KAAK,2BAA6B,MAEpCA,EAAU,MAAQ7C,GAAY,OAC1B8C,IAAmB,OACrBD,EAAU,QAAQ,oBAAoB,gBAAiBC,EAAe,eAAe,EACrFD,EAAU,QAAQ,oBAAoB,mBAAoBC,EAAe,kBAAkB,GAE7FD,EAAU,QAAQ,OAAO,CAC3B,CAEA,aAAapC,EAAO,CAGlB,IAAM4C,EAAkBC,GAAgC7C,CAAK,EACvD8C,EAAmB,KAAK,sBAAwB,KAAK,IAAI,EAAI,KAAK,qBAAuBpC,GAC3F,CAAC,KAAK,QAAQ,gBAAkB,CAACkC,GAAmB,CAACE,IACvD,KAAK,eAAiB,GACtB,KAAK,aAAa9C,EAAM,QAASA,EAAM,QAAS,KAAK,QAAQ,YAAY,EAE7E,CAEA,cAAcA,EAAO,CACnB,GAAI,CAAC,KAAK,QAAQ,gBAAkB,CAAC+C,GAAiC/C,CAAK,EAAG,CAI5E,KAAK,qBAAuB,KAAK,IAAI,EACrC,KAAK,eAAiB,GAGtB,IAAMgD,EAAUhD,EAAM,eAGtB,GAAIgD,EACF,QAASC,EAAI,EAAGA,EAAID,EAAQ,OAAQC,IAClC,KAAK,aAAaD,EAAQC,CAAC,EAAE,QAASD,EAAQC,CAAC,EAAE,QAAS,KAAK,QAAQ,YAAY,CAGzF,CACF,CAEA,cAAe,CACR,KAAK,iBAGV,KAAK,eAAiB,GAEtB,KAAK,kBAAkB,EAAE,QAAQlB,GAAU,CAGzC,IAAMmB,EAAYnB,EAAO,QAAUxC,GAAY,SAAWwC,EAAO,OAAO,sBAAwBA,EAAO,QAAUxC,GAAY,UACzH,CAACwC,EAAO,OAAO,YAAcmB,GAC/BnB,EAAO,QAAQ,CAEnB,CAAC,EACH,CACA,mBAAoB,CAClB,OAAO,MAAM,KAAK,KAAK,eAAe,KAAK,CAAC,CAC9C,CAEA,sBAAuB,CACrB,IAAMoB,EAAU,KAAK,gBACjBA,IACFvC,GAAkB,QAAQ6B,GAAQ1B,EAAe,cAAc,cAAc0B,EAAMU,EAAS,IAAI,CAAC,EAC7F,KAAK,6BACPtC,GAAgB,QAAQ4B,GAAQU,EAAQ,oBAAoBV,EAAM,KAAM9B,EAA4B,CAAC,EACrG,KAAK,2BAA6B,IAGxC,CACF,EAIA,SAASgB,GAAyBN,EAAGC,EAAG8B,EAAM,CAC5C,IAAMC,EAAQ,KAAK,IAAI,KAAK,IAAIhC,EAAI+B,EAAK,IAAI,EAAG,KAAK,IAAI/B,EAAI+B,EAAK,KAAK,CAAC,EAClEE,EAAQ,KAAK,IAAI,KAAK,IAAIhC,EAAI8B,EAAK,GAAG,EAAG,KAAK,IAAI9B,EAAI8B,EAAK,MAAM,CAAC,EACxE,OAAO,KAAK,KAAKC,EAAQA,EAAQC,EAAQA,CAAK,CAChD,CC5yCA,IAAMC,GAAM,CAAC,kBAAmB,EAAE,EAC5BC,GAAM,CAAC,GAAG,EAChB,SAASC,GAAqCC,EAAIC,EAAK,CACrD,GAAID,EAAK,EAAG,CACV,IAAME,EAASC,GAAiB,EAC7BC,EAAe,EAAG,MAAO,CAAC,EAC1BC,GAAW,uBAAwB,UAA6F,CAC9HC,GAAcJ,CAAG,EACpB,IAAMK,EAAYC,EAAc,EAChC,OAAUC,GAAYF,EAAO,2BAA6B,EAAI,CAChE,CAAC,EAAE,sBAAuB,UAA4F,CACjHD,GAAcJ,CAAG,EACpB,IAAMK,EAAYC,EAAc,EAChC,OAAUC,GAAYF,EAAO,2BAA6B,EAAK,CACjE,CAAC,EACEG,EAAU,EAAG,MAAO,CAAC,EACrBN,EAAe,EAAG,MAAO,CAAC,EAC1BM,EAAU,EAAG,MAAO,CAAC,EAAE,EAAG,MAAO,CAAC,EAAE,EAAG,MAAO,CAAC,EAC/CC,EAAa,EAAE,CACpB,CACA,GAAIX,EAAK,EAAG,CACV,IAAMO,EAAYC,EAAc,EAC7BI,EAAW,gBAAiBL,EAAO,mBAAmB,CAAC,EAAE,iBAAkBA,EAAO,mBAAmB,CAAC,EAAE,iBAAkBA,EAAO,wBAAwB,CAAC,EAC1JM,EAAU,CAAC,EACXD,EAAW,aAAcL,EAAO,wBAAwB,CAAC,EACzDM,EAAU,EACVD,EAAW,eAAgBL,EAAO,wBAAwB,CAAC,EAC3DM,EAAU,EACVD,EAAW,gBAAiBL,EAAO,wBAAwB,CAAC,CACjE,CACF,CAkBA,IAAMO,GAAwC,IAAIC,EAAe,0BAA0B,EAEvFC,IAAwB,IAAM,CAChC,MAAMA,CAAQ,CAEZ,IAAI,WAAY,CACd,OAAO,KAAK,UACd,CACA,IAAI,UAAUC,EAAW,CAIvB,KAAK,WAAaA,CACpB,CACA,YAAYC,EAAiB,CAC3B,KAAK,gBAAkBA,EACvB,KAAK,mBAAqB,IAAIC,GAAc,CAAC,EAE7C,KAAK,UAAY,IAAI,IAErB,KAAK,cAAgB,IAAIC,EAKzB,KAAK,MAAQ,MACb,KAAK,WAAa,GAElB,KAAK,SAAW,GAEhB,KAAK,WAAa,IAAIC,GAEtB,KAAK,YAAc,KAAK,kBAC1B,CAKA,SAASC,EAAU,CASjB,KAAK,UAAU,IAAIA,EAAS,GAAIA,CAAQ,CAC1C,CAKA,WAAWA,EAAU,CACnB,KAAK,UAAU,OAAOA,EAAS,EAAE,CACnC,CAEA,KAAKA,EAAU,CACT,KAAK,QAAUA,EAAS,IAC1B,KAAK,OAASA,EAAS,GACvB,KAAK,UAAYA,EAAS,MAAQA,EAAS,MAAQ,KAAK,OAExD,KAAK,UAAY,KAAK,qBAAqBA,CAAQ,EAErD,KAAK,WAAW,KAAK,CACnB,OAAQ,KAAK,OACb,UAAW,KAAK,SAClB,CAAC,CACH,CAEA,qBAAqBA,EAAU,CAC7B,GAAI,CAACA,EACH,MAAO,GAGT,IAAMC,EAAeD,GAAU,cAAgB,KAAK,cAAgB,CAAC,CAAC,KAAK,iBAAiB,aACxFE,EAAqBC,GAAsBH,EAAS,OAAS,KAAK,MAAOC,CAAY,EAErFG,EAAqBF,EAAmB,QAAQ,KAAK,SAAS,EAAI,EACtE,OAAIE,GAAsBF,EAAmB,SAC3CE,EAAqB,GAEhBF,EAAmBE,CAAkB,CAC9C,CACA,UAAW,CACT,KAAK,mBAAmB,KAAK,CAC/B,CACA,aAAc,CACZ,KAAK,cAAc,KAAK,CAC1B,CACA,aAAc,CACZ,KAAK,cAAc,SAAS,EAC5B,KAAK,mBAAmB,SAAS,CACnC,CACA,MAAO,CACL,KAAK,UAAO,SAAyB,EAAG,CACtC,OAAO,IAAK,GAAKV,GAAYW,EAAkBb,GAA0B,CAAC,CAAC,CAC7E,CACF,CACA,MAAO,CACL,KAAK,UAAyBc,EAAkB,CAC9C,KAAMZ,EACN,UAAW,CAAC,CAAC,GAAI,UAAW,EAAE,CAAC,EAC/B,UAAW,CAAC,EAAG,UAAU,EACzB,OAAQ,CACN,OAAQ,CAAIa,EAAa,KAAM,gBAAiB,QAAQ,EACxD,MAAO,CAAIA,EAAa,KAAM,eAAgB,OAAO,EACrD,UAAW,CAAIA,EAAa,KAAM,mBAAoB,WAAW,EACjE,aAAc,CAAIA,EAAa,2BAA4B,sBAAuB,eAAgBC,EAAgB,EAClH,SAAU,CAAID,EAAa,2BAA4B,kBAAmB,WAAYC,EAAgB,CACxG,EACA,QAAS,CACP,WAAY,eACd,EACA,SAAU,CAAC,SAAS,EACpB,WAAY,GACZ,SAAU,CAAIC,GAA6BC,EAAoB,CACjE,CAAC,CACH,CACF,CACA,OAAOhB,CACT,GAAG,EAKH,SAASS,GAAsBQ,EAAOV,EAAc,CAClD,IAAIW,EAAY,CAAC,MAAO,MAAM,EAC9B,OAAID,GAAS,QACXC,EAAU,QAAQ,EAEfX,GACHW,EAAU,KAAK,EAAE,EAEZA,CACT,CACA,IAAMC,GAA4BC,GAAmB,SAAW,IAAMC,GAAgB,eAKhFC,GAAoB,CAExB,UAAwBC,GAAQ,YAAa,CAAcC,GAAM,kBAAgCC,EAAM,CACrG,UAAW,iBACb,CAAC,CAAC,EAGFD,GAAM,oBAAkCC,EAAM,CAC5C,UAAW,kBACb,CAAC,CAAC,EAAgBC,GAAW,6BAA2CC,GAAQR,EAAyB,CAAC,CAAC,CAAC,EAE5G,YAA0BI,GAAQ,cAAe,CAAcC,GAAM,kBAAgCC,EAAM,CACzG,UAAW,gBACb,CAAC,CAAC,EAAgBD,GAAM,oBAAkCC,EAAM,CAC9D,UAAW,eACb,CAAC,CAAC,EAAgBC,GAAW,6BAA2CC,GAAQR,EAAyB,CAAC,CAAC,CAAC,EAE5G,aAA2BI,GAAQ,eAAgB,CAAcC,GAAM,kBAAgCC,EAAM,CAC3G,UAAW,eACb,CAAC,CAAC,EAAgBD,GAAM,oBAAkCC,EAAM,CAC9D,UAAW,gBACb,CAAC,CAAC,EAAgBC,GAAW,6BAA2CC,GAAQR,EAAyB,CAAC,CAAC,CAAC,EAE5G,aAA2BI,GAAQ,eAAgB,CAAcC,GAAM,wCAAsDC,EAAM,CACjI,QAAS,CACX,CAAC,CAAC,EAAgBD,GAAM,kCAAgDC,EAAM,CAC5E,QAAS,GACX,CAAC,CAAC,EAAgBD,GAAM,4EAA0FC,EAAM,CACtH,QAAS,CACX,CAAC,CAAC,EAGFC,GAAW,yDAAuEC,GAAQ,KAAK,CAAC,EAAgBD,GAAW,UAAwBC,GAAQR,EAAyB,CAAC,CAAC,CAAC,EAQvL,cAA4BI,GAAQ,gBAAiB,CAGrDG,GAAW,yCAAuDC,GAAQR,GAAwCS,GAAU,CAAcH,EAAM,CAC9I,UAAW,kBACb,CAAC,EAAgBA,EAAM,CACrB,UAAW,eACb,CAAC,CAAC,CAAC,CAAC,CAAC,EAGLC,GAAW,yCAAuDC,GAAQR,GAAwCS,GAAU,CAAcH,EAAM,CAC9I,UAAW,eACb,CAAC,EAAgBA,EAAM,CACrB,UAAW,iBACb,CAAC,CAAC,CAAC,CAAC,CAAC,EAGLC,GAAW,uCAAqDC,GAAQR,GAAwCS,GAAU,CAAcH,EAAM,CAC5I,UAAW,iBACb,CAAC,EAAgBA,EAAM,CACrB,UAAW,eACb,CAAC,CAAC,CAAC,CAAC,CAAC,EAGLC,GAAW,uCAAqDC,GAAQR,GAAwCS,GAAU,CAAcH,EAAM,CAC5I,UAAW,eACb,CAAC,EAAgBA,EAAM,CACrB,UAAW,kBACb,CAAC,CAAC,CAAC,CAAC,CAAC,EAAgBD,GAAM,yEAAuFC,EAAM,CACtH,UAAW,eACb,CAAC,CAAC,EAAgBD,GAAM,qCAAmDC,EAAM,CAC/E,UAAW,kBACb,CAAC,CAAC,EAAgBD,GAAM,kCAAgDC,EAAM,CAC5E,UAAW,iBACb,CAAC,CAAC,CAAC,CAAC,EAEJ,cAA4BF,GAAQ,gBAAiB,CAAcG,GAAW,UAAW,CAAcG,GAAM,KAAmBC,GAAa,EAAG,CAC9I,SAAU,EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CACP,EAMIC,IAAkC,IAAM,CAC1C,MAAMA,CAAkB,CACtB,aAAc,CAKZ,KAAK,QAAU,IAAI3B,CACrB,CACA,MAAO,CACL,KAAK,UAAO,SAAmC,EAAG,CAChD,OAAO,IAAK,GAAK2B,EACnB,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOD,EACP,QAASA,EAAkB,UAC3B,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAKH,SAASE,GAAsCC,EAAY,CACzD,OAAOA,GAAc,IAAIH,EAC3B,CAEA,IAAMI,GAAgC,CAEpC,QAASJ,GACT,KAAM,CAAC,CAAc,IAAIK,GAAyB,IAAIC,GAAYN,EAAiB,CAAC,EACpF,WAAYE,EACd,EAWIK,IAA8B,IAAM,CACtC,MAAMA,CAAc,CAKlB,IAAI,uBAAwB,CAC1B,OAAO,KAAK,sBACd,CACA,IAAI,sBAAsBC,EAAO,CAC/B,KAAK,6BAA6BA,CAAK,CACzC,CACA,YAKAC,EAAOC,EAGPC,EAAOC,EAAYC,EAAeC,EAClCC,EAAgBC,EAAgB,CAC9B,KAAK,MAAQP,EACb,KAAK,mBAAqBC,EAC1B,KAAK,MAAQC,EACb,KAAK,WAAaC,EAClB,KAAK,cAAgBC,EACrB,KAAK,YAAcC,EACnB,KAAK,eAAiBC,EAKtB,KAAK,mBAAqB,GAM1B,KAAK,WAAa,CAAC,EAEnB,KAAK,gBAAkB,GAIvB,KAAK,2BAA6B,GAElC,KAAK,cAAgB,QAErB,KAAK,SAAW,GAIhB,KAAK,uBAAyB,OAQ1BC,GAAgB,gBAClB,KAAK,cAAgBA,GAAgB,eAEvC,KAAK,oBAAoB,CAC3B,CACA,UAAW,CACL,CAAC,KAAK,IAAM,KAAK,aACnB,KAAK,GAAK,KAAK,WAAW,MAG5B,KAAK,sBAAsB,EAC3B,KAAK,6BAA6B,CAChC,QAAS,KAAK,UAAU,EAAI,SAAW,KAAK,eAC9C,CAAC,EACD,KAAK,MAAM,SAAS,IAAI,EACxB,KAAK,YAAc,KAAK,YAAY,cAAc,cAAc,4BAA4B,EAC5F,KAAK,6BAA6B,KAAK,sBAAsB,CAC/D,CACA,iBAAkB,CAGhB,KAAK,cAAc,QAAQ,KAAK,YAAa,EAAI,EAAE,UAAUC,GAAU,CACrE,IAAMC,EAAW,CAAC,CAACD,EACfC,IAAa,KAAK,qBACpB,KAAK,yBAAyBA,CAAQ,EACtC,KAAK,mBAAmB,aAAa,EAEzC,CAAC,CACH,CACA,aAAc,CACZ,KAAK,cAAc,eAAe,KAAK,WAAW,EAClD,KAAK,MAAM,WAAW,IAAI,EAC1B,KAAK,sBAAsB,YAAY,EACnC,KAAK,aACP,KAAK,gBAAgB,kBAAkB,KAAK,YAAa,KAAK,sBAAsB,CAExF,CAKA,yBAAyBC,EAAS,CAE5B,KAAK,YAAY,GAAKA,IAG1B,KAAK,mBAAqBA,EACrB,KAAK,UAAU,IAClB,KAAK,sBAAsB,EACvB,KAAK,mBACP,KAAK,6BAA6B,CAChC,UAAW,KAAK,gBAChB,QAAS,MACX,CAAC,EAED,KAAK,6BAA6B,CAChC,UAAW,OACX,QAAS,KAAK,eAChB,CAAC,GAGP,CAMA,6BAA6BC,EAAW,CACtC,KAAK,WAAaA,GAAa,CAAC,EAG5B,KAAK,6BACP,KAAK,WAAa,CAChB,QAASA,EAAU,OACrB,EAEJ,CAEA,sBAAuB,CACrB,KAAK,MAAM,KAAK,IAAI,GAEhB,KAAK,WAAW,UAAY,QAAU,KAAK,WAAW,UAAY,YACpE,KAAK,2BAA6B,GAEtC,CACA,cAAe,CACR,KAAK,YAAY,GACpB,KAAK,MAAM,KAAK,IAAI,CAExB,CACA,eAAeC,EAAO,CAChB,CAAC,KAAK,YAAY,IAAMA,EAAM,UAAY,IAASA,EAAM,UAAY,MACvEA,EAAM,eAAe,EACrB,KAAK,qBAAqB,EAE9B,CAEA,WAAY,CACV,OAAO,KAAK,MAAM,QAAU,KAAK,KAAO,KAAK,MAAM,YAAc,OAAS,KAAK,MAAM,YAAc,OACrG,CAEA,yBAA0B,CACxB,MAAO,GAAG,KAAK,UAAU,EAAI,UAAY,EAAE,GAAG,KAAK,eAAe,EACpE,CAEA,oBAAqB,CACnB,IAAMC,EAAY,KAAK,WAAW,UAClC,OAAQA,EAAY,GAAGA,CAAS,OAAS,IAAM,KAAK,WAAW,OACjE,CAWA,uBAAwB,CACtB,KAAK,gBAAkB,KAAK,UAAU,EAAI,KAAK,MAAM,UAAY,KAAK,OAAS,KAAK,MAAM,KAC5F,CACA,aAAc,CACZ,OAAO,KAAK,MAAM,UAAY,KAAK,QACrC,CAOA,uBAAwB,CACtB,OAAK,KAAK,UAAU,EAGb,KAAK,MAAM,WAAa,MAAQ,YAAc,aAF5C,MAGX,CAEA,cAAe,CACb,MAAO,CAAC,KAAK,YAAY,GAAK,KAAK,UAAU,CAC/C,CACA,6BAA6BC,EAAgB,CAMvC,KAAK,cAGP,KAAK,gBAAgB,kBAAkB,KAAK,YAAa,KAAK,sBAAsB,EACpF,KAAK,gBAAgB,SAAS,KAAK,YAAaA,CAAc,GAEhE,KAAK,uBAAyBA,CAChC,CAEA,qBAAsB,CACpB,KAAK,sBAAwBC,GAAM,KAAK,MAAM,WAAY,KAAK,MAAM,cAAe,KAAK,MAAM,OAAO,EAAE,UAAU,IAAM,CAClH,KAAK,UAAU,IACjB,KAAK,sBAAsB,GAEvB,KAAK,WAAW,UAAY,QAAU,KAAK,WAAW,UAAY,YACpE,KAAK,2BAA6B,IAEpC,KAAK,6BAA6B,CAChC,UAAW,KAAK,gBAChB,QAAS,QACX,CAAC,EACD,KAAK,mBAAqB,IAGxB,CAAC,KAAK,UAAU,GAAK,KAAK,YAAc,KAAK,WAAW,UAAY,WACtE,KAAK,2BAA6B,GAClC,KAAK,6BAA6B,CAChC,UAAW,SACX,QAAS,KAAK,eAChB,CAAC,GAEH,KAAK,mBAAmB,aAAa,CACvC,CAAC,CACH,CACA,MAAO,CACL,KAAK,UAAO,SAA+B,EAAG,CAC5C,OAAO,IAAK,GAAKjB,GAAkB3B,EAAkBoB,EAAiB,EAAMpB,EAAqB6C,EAAiB,EAAM7C,EAAkBX,GAAS,CAAC,EAAMW,EAAkB,6BAA8B,CAAC,EAAMA,EAAqB8C,EAAY,EAAM9C,EAAqB+C,CAAU,EAAM/C,EAAqBgD,GAAe,CAAC,EAAMhD,EAAkBb,GAA0B,CAAC,CAAC,CACxX,CACF,CACA,MAAO,CACL,KAAK,UAAyB8D,EAAkB,CAC9C,KAAMtB,EACN,UAAW,CAAC,CAAC,GAAI,kBAAmB,EAAE,CAAC,EACvC,UAAW,CAAC,EAAG,iBAAiB,EAChC,SAAU,EACV,aAAc,SAAoCuB,EAAIC,EAAK,CACrDD,EAAK,GACJE,GAAW,QAAS,UAAkD,CACvE,OAAOD,EAAI,aAAa,CAC1B,CAAC,EAAE,UAAW,SAAkDE,EAAQ,CACtE,OAAOF,EAAI,eAAeE,CAAM,CAClC,CAAC,EAAE,aAAc,UAAuD,CACtE,OAAOF,EAAI,yBAAyB,EAAI,CAC1C,CAAC,EAAE,aAAc,UAAuD,CACtE,OAAOA,EAAI,yBAAyB,EAAK,CAC3C,CAAC,EAECD,EAAK,IACJI,GAAY,YAAaH,EAAI,sBAAsB,CAAC,EACpDI,GAAY,2BAA4BJ,EAAI,YAAY,CAAC,EAEhE,EACA,OAAQ,CACN,GAAI,CAAIjD,EAAa,KAAM,kBAAmB,IAAI,EAClD,cAAe,gBACf,MAAO,QACP,SAAU,CAAIA,EAAa,2BAA4B,WAAY,WAAYC,EAAgB,EAC/F,sBAAuB,wBACvB,aAAc,CAAID,EAAa,2BAA4B,eAAgB,eAAgBC,EAAgB,CAC7G,EACA,SAAU,CAAC,eAAe,EAC1B,WAAY,GACZ,SAAU,CAAIC,GAA6BoD,CAAmB,EAC9D,MAAOC,GACP,mBAAoBC,GACpB,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,EAAG,4BAA6B,qBAAqB,EAAG,CAAC,EAAG,yBAAyB,EAAG,CAAC,EAAG,uBAAuB,EAAG,CAAC,EAAG,sBAAsB,EAAG,CAAC,EAAG,2BAA2B,EAAG,CAAC,EAAG,8BAA8B,EAAG,CAAC,EAAG,+BAA+B,EAAG,CAAC,EAAG,gCAAgC,CAAC,EAC/S,SAAU,SAAgCR,EAAIC,EAAK,CAC7CD,EAAK,IACJS,GAAgB,EAChBC,EAAe,EAAG,MAAO,CAAC,EAAE,EAAG,MAAO,CAAC,EACvCC,GAAa,CAAC,EACdC,EAAa,EACbC,EAAW,EAAGC,GAAsC,EAAG,EAAG,MAAO,CAAC,EAClEF,EAAa,GAEdZ,EAAK,IACJK,GAAY,yBAA0BJ,EAAI,UAAU,CAAC,EAAE,kCAAmCA,EAAI,gBAAkB,QAAQ,EACxHG,GAAY,WAAYH,EAAI,YAAY,EAAI,KAAO,CAAC,EAAE,OAAQA,EAAI,YAAY,EAAI,KAAO,QAAQ,EACjGc,EAAU,CAAC,EACXC,GAAc,EAAGf,EAAI,aAAa,EAAI,EAAI,EAAE,EAEnD,EACA,OAAQ,CAAC,o2DAAo2D,EAC72D,cAAe,EACf,KAAM,CACJ,UAAW,CAACxC,GAAkB,UAAWA,GAAkB,YAAaA,GAAkB,aAAcA,GAAkB,aAAcA,GAAkB,cAAeA,GAAkB,aAAa,CAC1M,EACA,gBAAiB,CACnB,CAAC,CACH,CACF,CACA,OAAOgB,CACT,GAAG,EAICwC,IAA8B,IAAM,CACtC,MAAMA,CAAc,CAClB,MAAO,CACL,KAAK,UAAO,SAA+B,EAAG,CAC5C,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAiB,CAC7C,KAAMD,CACR,CAAC,CACH,CACA,MAAO,CACL,KAAK,UAAyBE,EAAiB,CAC7C,UAAW,CAAC7C,EAA6B,EACzC,QAAS,CAAC8C,EAAe,CAC3B,CAAC,CACH,CACF,CACA,OAAOH,CACT,GAAG,ECxpBH,IAAMI,GAAN,KAAiB,CAAC,EAElB,SAASC,GAAaC,EAAO,CAK3B,OAAOA,GAAS,OAAOA,EAAM,SAAY,YAAc,EAAEA,aAAiBC,GAC5E,CAeA,IAAIC,GAAsC,SAAUA,EAAwB,CAE1E,OAAAA,EAAuBA,EAAuB,SAAc,CAAC,EAAI,WAEjEA,EAAuBA,EAAuB,SAAc,CAAC,EAAI,WAEjEA,EAAuBA,EAAuB,MAAW,CAAC,EAAI,QAE9DA,EAAuBA,EAAuB,QAAa,CAAC,EAAI,UACzDA,CACT,EAAEA,IAA0B,CAAC,CAAC,EAKxBC,GAAuC,IAAIC,EAAe,eAAe,EAWzEC,GAAN,KAAmC,CACjC,aAAaC,EAASC,EAAkBC,EAAoBC,EAAmBC,EAAiB,CAC9FJ,EAAQ,iBAAiB,CAACK,EAAQC,EAAuBC,IAAiB,CACxE,IAAIC,EACAC,EACJ,GAAIJ,EAAO,eAAiB,KAAM,CAChC,IAAMK,EAAgBR,EAAmBG,EAAQC,EAAuBC,CAAY,EACpFC,EAAOP,EAAiB,mBAAmBS,EAAc,YAAaA,EAAc,QAASA,EAAc,KAAK,EAChHD,EAAYb,GAAuB,QACrC,MAAWW,GAAgB,MACzBN,EAAiB,OAAOK,CAAqB,EAC7CG,EAAYb,GAAuB,UAEnCY,EAAOP,EAAiB,IAAIK,CAAqB,EACjDL,EAAiB,KAAKO,EAAMD,CAAY,EACxCE,EAAYb,GAAuB,OAEjCQ,GACFA,EAAgB,CACd,QAASI,GAAM,QACf,UAAAC,EACA,OAAAJ,CACF,CAAC,CAEL,CAAC,CACH,CACA,QAAS,CAAC,CACZ,ECscA,IAAMM,GAAsB,GAKxBC,IAA8B,IAAM,CACtC,MAAMA,CAAc,CAClB,YAAYC,EAAWC,EAAQC,EAAU,CACvC,KAAK,UAAYF,EAEjB,KAAK,QAAU,IAAIG,EAEnB,KAAK,gBAAkBC,GAAS,CAC9B,KAAK,QAAQ,KAAKA,CAAK,CACzB,EACA,KAAK,UAAYF,EACjBD,EAAO,kBAAkB,IAAM,CAC7B,GAAID,EAAU,UAAW,CACvB,IAAMK,EAAS,KAAK,WAAW,EAG/BA,EAAO,iBAAiB,SAAU,KAAK,eAAe,EACtDA,EAAO,iBAAiB,oBAAqB,KAAK,eAAe,CACnE,CAGA,KAAK,OAAO,EAAE,UAAU,IAAM,KAAK,cAAgB,IAAI,CACzD,CAAC,CACH,CACA,aAAc,CACZ,GAAI,KAAK,UAAU,UAAW,CAC5B,IAAMA,EAAS,KAAK,WAAW,EAC/BA,EAAO,oBAAoB,SAAU,KAAK,eAAe,EACzDA,EAAO,oBAAoB,oBAAqB,KAAK,eAAe,CACtE,CACA,KAAK,QAAQ,SAAS,CACxB,CAEA,iBAAkB,CACX,KAAK,eACR,KAAK,oBAAoB,EAE3B,IAAMC,EAAS,CACb,MAAO,KAAK,cAAc,MAC1B,OAAQ,KAAK,cAAc,MAC7B,EAEA,OAAK,KAAK,UAAU,YAClB,KAAK,cAAgB,MAEhBA,CACT,CAEA,iBAAkB,CAUhB,IAAMC,EAAiB,KAAK,0BAA0B,EAChD,CACJ,MAAAC,EACA,OAAAC,CACF,EAAI,KAAK,gBAAgB,EACzB,MAAO,CACL,IAAKF,EAAe,IACpB,KAAMA,EAAe,KACrB,OAAQA,EAAe,IAAME,EAC7B,MAAOF,EAAe,KAAOC,EAC7B,OAAAC,EACA,MAAAD,CACF,CACF,CAEA,2BAA4B,CAG1B,GAAI,CAAC,KAAK,UAAU,UAClB,MAAO,CACL,IAAK,EACL,KAAM,CACR,EAQF,IAAMN,EAAW,KAAK,UAChBG,EAAS,KAAK,WAAW,EACzBK,EAAkBR,EAAS,gBAC3BS,EAAeD,EAAgB,sBAAsB,EACrDE,EAAM,CAACD,EAAa,KAAOT,EAAS,KAAK,WAAaG,EAAO,SAAWK,EAAgB,WAAa,EACrGG,EAAO,CAACF,EAAa,MAAQT,EAAS,KAAK,YAAcG,EAAO,SAAWK,EAAgB,YAAc,EAC/G,MAAO,CACL,IAAAE,EACA,KAAAC,CACF,CACF,CAMA,OAAOC,EAAehB,GAAqB,CACzC,OAAOgB,EAAe,EAAI,KAAK,QAAQ,KAAKC,GAAUD,CAAY,CAAC,EAAI,KAAK,OAC9E,CAEA,YAAa,CACX,OAAO,KAAK,UAAU,aAAe,MACvC,CAEA,qBAAsB,CACpB,IAAMT,EAAS,KAAK,WAAW,EAC/B,KAAK,cAAgB,KAAK,UAAU,UAAY,CAC9C,MAAOA,EAAO,WACd,OAAQA,EAAO,WACjB,EAAI,CACF,MAAO,EACP,OAAQ,CACV,CACF,CACA,MAAO,CACL,KAAK,UAAO,SAA+B,EAAG,CAC5C,OAAO,IAAK,GAAKN,GAAkBiB,EAAYC,EAAQ,EAAMD,EAAYE,CAAM,EAAMF,EAASG,EAAU,CAAC,CAAC,CAC5G,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOrB,EACP,QAASA,EAAc,UACvB,WAAY,MACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAgzBH,IAAIsB,IAAoC,IAAM,CAC5C,MAAMA,CAAoB,CACxB,MAAO,CACL,KAAK,UAAO,SAAqC,EAAG,CAClD,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAiB,CAC7C,KAAMD,CACR,CAAC,CACH,CACA,MAAO,CACL,KAAK,UAAyBE,EAAiB,CAAC,CAAC,CACnD,CACF,CACA,OAAOF,CACT,GAAG,EAOCG,IAAgC,IAAM,CACxC,MAAMA,CAAgB,CACpB,MAAO,CACL,KAAK,UAAO,SAAiC,EAAG,CAC9C,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,UAAyBF,EAAiB,CAC7C,KAAME,CACR,CAAC,CACH,CACA,MAAO,CACL,KAAK,UAAyBD,EAAiB,CAC7C,QAAS,CAACE,GAAYJ,GAAqBI,GAAYJ,EAAmB,CAC5E,CAAC,CACH,CACF,CACA,OAAOG,CACT,GAAG,EC5+CH,IAAME,GAAM,CAAC,CAAC,CAAC,SAAS,CAAC,EAAG,CAAC,CAAC,UAAU,EAAG,CAAC,KAAK,CAAC,EAAG,GAAG,EAClDC,GAAM,CAAC,UAAW,gBAAiB,GAAG,EAC5C,SAASC,GAAgCC,EAAIC,EAAK,CAC5CD,EAAK,GACJE,GAAa,EAAG,CAAC,CAExB,CACA,SAASC,GAAgCH,EAAIC,EAAK,CAC5CD,EAAK,IACJI,EAAe,EAAG,QAAS,CAAC,EAC5BC,GAAmB,EAAG,CAAC,EACvBC,EAAa,EACbF,EAAe,EAAG,QAAS,CAAC,EAC5BC,GAAmB,EAAG,CAAC,EAAE,EAAG,CAAC,EAC7BC,EAAa,EACbF,EAAe,EAAG,QAAS,CAAC,EAC5BC,GAAmB,EAAG,CAAC,EACvBC,EAAa,EAEpB,CACA,SAASC,GAAgCP,EAAIC,EAAK,CAC5CD,EAAK,GACJK,GAAmB,EAAG,CAAC,EAAE,EAAG,CAAC,EAAE,EAAG,CAAC,EAAE,EAAG,CAAC,CAEhD,CA4BA,IAAMG,GAAyB,IAAIC,EAAe,WAAW,EAQ7D,IAAIC,IAA2B,IAAM,CACnC,MAAMA,CAAW,CACf,YAAiCC,EAAU,CACzC,KAAK,SAAWA,CAClB,CACA,MAAO,CACL,KAAK,UAAO,SAA4B,EAAG,CACzC,OAAO,IAAK,GAAKD,GAAeE,EAAqBC,EAAW,CAAC,CACnE,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMJ,EACN,UAAW,CAAC,CAAC,GAAI,aAAc,EAAE,CAAC,EAClC,WAAY,EACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAQCK,IAAiC,IAAM,CACzC,MAAMA,CAAiB,CACrB,YAAiCJ,EAAU,CACzC,KAAK,SAAWA,CAClB,CACA,MAAO,CACL,KAAK,UAAO,SAAkC,EAAG,CAC/C,OAAO,IAAK,GAAKI,GAAqBH,EAAqBC,EAAW,CAAC,CACzE,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMC,EACN,UAAW,CAAC,CAAC,GAAI,mBAAoB,EAAE,CAAC,EACxC,WAAY,EACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAQCC,IAAiC,IAAM,CACzC,MAAMA,CAAiB,CACrB,YAAiCL,EAAU,CACzC,KAAK,SAAWA,CAClB,CACA,MAAO,CACL,KAAK,UAAO,SAAkC,EAAG,CAC/C,OAAO,IAAK,GAAKK,GAAqBJ,EAAqBC,EAAW,CAAC,CACzE,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAME,EACN,UAAW,CAAC,CAAC,GAAI,mBAAoB,EAAE,CAAC,EACxC,WAAY,EACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAQCC,IAA6B,IAAM,CACrC,MAAMA,CAAa,CAEjB,IAAI,MAAO,CACT,OAAO,KAAK,KACd,CACA,IAAI,KAAKC,EAAM,CACb,KAAK,cAAcA,CAAI,CACzB,CAEA,IAAI,QAAS,CACX,OAAO,KAAK,OACd,CACA,IAAI,OAAOC,EAAO,CACZA,IAAU,KAAK,UACjB,KAAK,QAAUA,EACf,KAAK,kBAAoB,GAE7B,CAMA,IAAI,WAAY,CACd,OAAO,KAAK,UACd,CACA,IAAI,UAAUA,EAAO,CACfA,IAAU,KAAK,aACjB,KAAK,WAAaA,EAClB,KAAK,kBAAoB,GAE7B,CACA,YAAYC,EAAQ,CAClB,KAAK,OAASA,EACd,KAAK,kBAAoB,GACzB,KAAK,QAAU,GACf,KAAK,WAAa,EACpB,CAEA,kBAAmB,CACjB,IAAMC,EAAmB,KAAK,kBAC9B,YAAK,mBAAmB,EACjBA,CACT,CAEA,oBAAqB,CACnB,KAAK,kBAAoB,EAC3B,CAQA,2BAA4B,CAC1B,KAAK,oBAAsB,CAAC,cAAc,KAAK,oBAAoB,EAAE,CACvE,CAOA,cAAcF,EAAO,CAGfA,IACF,KAAK,MAAQA,EACb,KAAK,qBAAuBA,EAAM,QAAQ,gBAAiB,GAAG,EAC9D,KAAK,0BAA0B,EAEnC,CACA,MAAO,CACL,KAAK,UAAO,SAA8B,EAAG,CAC3C,OAAO,IAAK,GAAKF,GAAiBL,EAAkBU,GAAW,CAAC,CAAC,CACnE,CACF,CACA,MAAO,CACL,KAAK,UAAyBR,EAAkB,CAC9C,KAAMG,EACN,UAAW,CAAC,CAAC,GAAI,eAAgB,EAAE,CAAC,EACpC,eAAgB,SAAqCM,EAAIC,EAAKC,EAAU,CAMtE,GALIF,EAAK,IACJG,GAAeD,EAAUf,GAAY,CAAC,EACtCgB,GAAeD,EAAUV,GAAkB,CAAC,EAC5CW,GAAeD,EAAUT,GAAkB,CAAC,GAE7CO,EAAK,EAAG,CACV,IAAII,EACDC,GAAeD,EAAQE,GAAY,CAAC,IAAML,EAAI,KAAOG,EAAG,OACxDC,GAAeD,EAAQE,GAAY,CAAC,IAAML,EAAI,WAAaG,EAAG,OAC9DC,GAAeD,EAAQE,GAAY,CAAC,IAAML,EAAI,WAAaG,EAAG,MACnE,CACF,EACA,OAAQ,CACN,KAAM,CAAIG,EAAa,KAAM,eAAgB,MAAM,EACnD,OAAQ,CAAIA,EAAa,2BAA4B,SAAU,SAAUC,EAAgB,EACzF,UAAW,CAAID,EAAa,2BAA4B,YAAa,YAAaC,EAAgB,CACpG,EACA,WAAY,GACZ,SAAU,CAAIC,GAAmB,CAAC,CAChC,QAAS,6BACT,YAAaf,CACf,CAAC,CAAC,EAAMgB,EAAwB,CAClC,CAAC,CACH,CACF,CACA,OAAOhB,CACT,GAAG,EAKGiB,GAAN,KAAkB,CAChB,YAAYC,EAAWC,EAAY,CACjCA,EAAW,cAAc,UAAU,IAAI,GAAGD,EAAU,mBAAmB,CACzE,CACF,EAEIE,IAA8B,IAAM,CACtC,MAAMA,UAAsBH,EAAY,CACtC,YAAYC,EAAWC,EAAY,CACjC,MAAMD,EAAWC,CAAU,CAC7B,CACA,MAAO,CACL,KAAK,UAAO,SAA+B,EAAG,CAC5C,OAAO,IAAK,GAAKC,GAAkBzB,EAAkBK,EAAY,EAAML,EAAqB0B,CAAU,CAAC,CACzG,CACF,CACA,MAAO,CACL,KAAK,UAAyBxB,EAAkB,CAC9C,KAAMuB,EACN,UAAW,CAAC,CAAC,iBAAiB,EAAG,CAAC,KAAM,kBAAmB,EAAE,CAAC,EAC9D,UAAW,CAAC,OAAQ,eAAgB,EAAG,iBAAiB,EACxD,WAAY,GACZ,SAAU,CAAIE,CAA0B,CAC1C,CAAC,CACH,CACF,CACA,OAAOF,CACT,GAAG,EAmCH,IAAIG,IAAwB,IAAM,CAChC,MAAMA,UAAgBC,EAAY,CAChC,YAAYC,EAAWC,EAAY,CACjC,MAAMD,EAAWC,CAAU,EAC3B,IAAMC,EAAOF,EAAU,QAAQ,aAAa,EACxCE,GACFD,EAAW,cAAc,aAAa,OAAQC,CAAI,CAEtD,CACA,MAAO,CACL,KAAK,UAAO,SAAyB,EAAG,CACtC,OAAO,IAAK,GAAKJ,GAAYK,EAAkBC,EAAY,EAAMD,EAAqBE,CAAU,CAAC,CACnG,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMR,EACN,UAAW,CAAC,CAAC,UAAU,EAAG,CAAC,KAAM,WAAY,EAAE,CAAC,EAChD,UAAW,CAAC,EAAG,UAAU,EACzB,WAAY,GACZ,SAAU,CAAIS,CAA0B,CAC1C,CAAC,CACH,CACF,CACA,OAAOT,CACT,GAAG,EAQGU,GAAN,KAAgB,CACd,aAAc,CACZ,KAAK,MAAQ,CAAC,EACd,KAAK,SAAW,CAAC,CACnB,CACF,EAEMC,GAA0C,IAAIC,EAAe,4BAA4B,EAQ3FC,IAAyC,IAAM,CACjD,MAAMA,CAAyB,CAC7B,YAAYC,EAAS,CACnB,KAAK,QAAUA,EACf,KAAK,iBAAmB,KACxB,KAAK,WAAa,IAAIC,CACxB,CAIA,SAASC,EAAM,CACb,KAAK,wBAAwB,EAC7B,KAAK,iBAAiB,MAAM,KAAKA,CAAI,CACvC,CAKA,YAAYA,EAAM,CAChB,KAAK,wBAAwB,EAC7B,KAAK,iBAAiB,SAAS,KAAKA,CAAI,CAC1C,CAEA,aAAc,CACZ,KAAK,WAAW,KAAK,EACrB,KAAK,WAAW,SAAS,CAC3B,CACA,yBAA0B,CACpB,KAAK,mBAGT,KAAK,iBAAmB,IAAIN,GAC5B,KAAK,uBAAuB,EAAE,KAAKO,GAAU,KAAK,UAAU,CAAC,EAAE,UAAU,IAAM,CAC7E,KAAO,KAAK,iBAAiB,MAAM,QAAU,KAAK,iBAAiB,SAAS,QAAQ,CAClF,IAAMC,EAAW,KAAK,iBAEtB,KAAK,iBAAmB,IAAIR,GAC5B,QAAWM,KAAQE,EAAS,MAC1BF,EAAK,EAEP,QAAWA,KAAQE,EAAS,SAC1BF,EAAK,CAET,CACA,KAAK,iBAAmB,IAC1B,CAAC,EACH,CACA,wBAAyB,CAGvB,OAAO,KAAK,QAAQ,SAAWG,GAAK,QAAQ,QAAQ,MAAS,CAAC,EAAI,KAAK,QAAQ,SAAS,KAAKC,EAAK,CAAC,CAAC,CACtG,CACA,MAAO,CACL,KAAK,UAAO,SAA0C,EAAG,CACvD,OAAO,IAAK,GAAKP,GAA6BQ,EAAYC,CAAM,CAAC,CACnE,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOV,EACP,QAASA,EAAyB,SACpC,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAcH,IAAIW,IAA2B,IAAM,CACnC,MAAMA,CAAW,CACf,YAAiCC,EAAUC,EAAU,CACnD,KAAK,SAAWD,EAChB,KAAK,SAAWC,CAClB,CACA,YAAYC,EAAS,CAGnB,GAAI,CAAC,KAAK,eAAgB,CACxB,IAAMC,EAAUD,EAAQ,SAAcA,EAAQ,QAAW,cAAgB,CAAC,EAC1E,KAAK,eAAiB,KAAK,SAAS,KAAKC,CAAO,EAAE,OAAO,EACzD,KAAK,eAAe,KAAKA,CAAO,CAClC,CACF,CAKA,gBAAiB,CACf,OAAO,KAAK,eAAe,KAAK,KAAK,OAAO,CAC9C,CAEA,oBAAoBC,EAAQ,CAC1B,OAAI,gBAAgBC,GACXD,EAAO,WAAW,SAEvB,gBAAgBE,GACXF,EAAO,WAAW,SAElBA,EAAO,KAAK,QAEvB,CACA,MAAO,CACL,KAAK,UAAO,SAA4B,EAAG,CACzC,OAAO,IAAK,GAAKL,GAAeQ,EAAqBC,EAAW,EAAMD,EAAqBE,EAAe,CAAC,CAC7G,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMX,EACN,SAAU,CAAIY,EAAoB,CACpC,CAAC,CACH,CACF,CACA,OAAOZ,CACT,GAAG,EAQCM,IAAgC,IAAM,CACxC,MAAMA,UAAwBN,EAAW,CAEvC,IAAI,QAAS,CACX,OAAO,KAAK,OACd,CACA,IAAI,OAAOa,EAAO,CACZA,IAAU,KAAK,UACjB,KAAK,QAAUA,EACf,KAAK,kBAAoB,GAE7B,CACA,YAAYZ,EAAUC,EAAUY,EAAQ,CACtC,MAAMb,EAAUC,CAAQ,EACxB,KAAK,OAASY,EACd,KAAK,kBAAoB,GACzB,KAAK,QAAU,EACjB,CAGA,YAAYX,EAAS,CACnB,MAAM,YAAYA,CAAO,CAC3B,CAEA,kBAAmB,CACjB,IAAMY,EAAmB,KAAK,kBAC9B,YAAK,mBAAmB,EACjBA,CACT,CAEA,oBAAqB,CACnB,KAAK,kBAAoB,EAC3B,CACA,MAAO,CACL,KAAK,UAAO,SAAiC,EAAG,CAC9C,OAAO,IAAK,GAAKT,GAAoBE,EAAqBC,EAAW,EAAMD,EAAqBE,EAAe,EAAMF,EAAkBQ,GAAW,CAAC,CAAC,CACtJ,CACF,CACA,MAAO,CACL,KAAK,UAAyBL,EAAkB,CAC9C,KAAML,EACN,UAAW,CAAC,CAAC,GAAI,kBAAmB,EAAE,CAAC,EACvC,OAAQ,CACN,QAAS,CAAIW,EAAa,KAAM,kBAAmB,SAAS,EAC5D,OAAQ,CAAIA,EAAa,2BAA4B,wBAAyB,SAAUC,EAAgB,CAC1G,EACA,WAAY,GACZ,SAAU,CAAIC,GAA6BC,EAA+BR,EAAoB,CAChG,CAAC,CACH,CACF,CACA,OAAON,CACT,GAAG,EAQCC,IAAgC,IAAM,CACxC,MAAMA,UAAwBP,EAAW,CAEvC,IAAI,QAAS,CACX,OAAO,KAAK,OACd,CACA,IAAI,OAAOa,EAAO,CACZA,IAAU,KAAK,UACjB,KAAK,QAAUA,EACf,KAAK,kBAAoB,GAE7B,CACA,YAAYZ,EAAUC,EAAUY,EAAQ,CACtC,MAAMb,EAAUC,CAAQ,EACxB,KAAK,OAASY,EACd,KAAK,kBAAoB,GACzB,KAAK,QAAU,EACjB,CAGA,YAAYX,EAAS,CACnB,MAAM,YAAYA,CAAO,CAC3B,CAEA,kBAAmB,CACjB,IAAMY,EAAmB,KAAK,kBAC9B,YAAK,mBAAmB,EACjBA,CACT,CAEA,oBAAqB,CACnB,KAAK,kBAAoB,EAC3B,CACA,MAAO,CACL,KAAK,UAAO,SAAiC,EAAG,CAC9C,OAAO,IAAK,GAAKR,GAAoBC,EAAqBC,EAAW,EAAMD,EAAqBE,EAAe,EAAMF,EAAkBQ,GAAW,CAAC,CAAC,CACtJ,CACF,CACA,MAAO,CACL,KAAK,UAAyBL,EAAkB,CAC9C,KAAMJ,EACN,UAAW,CAAC,CAAC,GAAI,kBAAmB,EAAE,CAAC,EACvC,OAAQ,CACN,QAAS,CAAIU,EAAa,KAAM,kBAAmB,SAAS,EAC5D,OAAQ,CAAIA,EAAa,2BAA4B,wBAAyB,SAAUC,EAAgB,CAC1G,EACA,WAAY,GACZ,SAAU,CAAIC,GAA6BC,EAA+BR,EAAoB,CAChG,CAAC,CACH,CACF,CACA,OAAOL,CACT,GAAG,EASCc,IAA0B,IAAM,CAClC,MAAMA,UAAkBrB,EAAW,CAGjC,YAAYC,EAAUC,EAAUY,EAAQ,CACtC,MAAMb,EAAUC,CAAQ,EACxB,KAAK,OAASY,CAChB,CACA,MAAO,CACL,KAAK,UAAO,SAA2B,EAAG,CACxC,OAAO,IAAK,GAAKO,GAAcb,EAAqBC,EAAW,EAAMD,EAAqBE,EAAe,EAAMF,EAAkBQ,GAAW,CAAC,CAAC,CAChJ,CACF,CACA,MAAO,CACL,KAAK,UAAyBL,EAAkB,CAC9C,KAAMU,EACN,UAAW,CAAC,CAAC,GAAI,YAAa,EAAE,CAAC,EACjC,OAAQ,CACN,QAAS,CAAIJ,EAAa,KAAM,mBAAoB,SAAS,EAC7D,KAAM,CAAIA,EAAa,KAAM,gBAAiB,MAAM,CACtD,EACA,WAAY,GACZ,SAAU,CAAIG,CAA0B,CAC1C,CAAC,CACH,CACF,CACA,OAAOC,CACT,GAAG,EAQCC,IAA8B,IAAM,CACtC,MAAMA,CAAc,CAQlB,MAAO,CACL,KAAK,qBAAuB,IAC9B,CACA,YAAYC,EAAgB,CAC1B,KAAK,eAAiBA,EACtBD,EAAc,qBAAuB,IACvC,CACA,aAAc,CAGRA,EAAc,uBAAyB,OACzCA,EAAc,qBAAuB,KAEzC,CACA,MAAO,CACL,KAAK,UAAO,SAA+B,EAAG,CAC5C,OAAO,IAAK,GAAKA,GAAkBd,EAAqBgB,EAAgB,CAAC,CAC3E,CACF,CACA,MAAO,CACL,KAAK,UAAyBb,EAAkB,CAC9C,KAAMW,EACN,UAAW,CAAC,CAAC,GAAI,gBAAiB,EAAE,CAAC,EACrC,WAAY,EACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAKCG,IAA6B,IAAM,CACrC,MAAMA,CAAa,CACjB,MAAO,CACL,KAAK,UAAO,SAA8B,EAAG,CAC3C,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMD,EACN,UAAW,CAAC,CAAC,gBAAgB,EAAG,CAAC,KAAM,iBAAkB,EAAE,CAAC,EAC5D,UAAW,CAAC,OAAQ,MAAO,EAAG,gBAAgB,EAC9C,WAAY,GACZ,SAAU,CAAIE,CAAmB,EACjC,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,gBAAiB,EAAE,CAAC,EAC9B,SAAU,SAA+BC,EAAIC,EAAK,CAC5CD,EAAK,GACJE,GAAmB,EAAG,CAAC,CAE9B,EACA,aAAc,CAACR,EAAa,EAC5B,cAAe,CACjB,CAAC,CACH,CACF,CACA,OAAOG,CACT,GAAG,EAsCH,IAAIM,IAAuB,IAAM,CAC/B,MAAMA,CAAO,CACX,MAAO,CACL,KAAK,UAAO,SAAwB,EAAG,CACrC,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMD,EACN,UAAW,CAAC,CAAC,SAAS,EAAG,CAAC,KAAM,UAAW,EAAE,CAAC,EAC9C,UAAW,CAAC,OAAQ,MAAO,EAAG,SAAS,EACvC,WAAY,GACZ,SAAU,CAAIE,CAAmB,EACjC,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,gBAAiB,EAAE,CAAC,EAC9B,SAAU,SAAyBC,EAAIC,EAAK,CACtCD,EAAK,GACJE,GAAmB,EAAG,CAAC,CAE9B,EACA,aAAc,CAACC,EAAa,EAC5B,cAAe,CACjB,CAAC,CACH,CACF,CACA,OAAON,CACT,GAAG,EAKCO,IAA6B,IAAM,CACrC,MAAMA,CAAa,CACjB,YAAYC,EAAa,CACvB,KAAK,YAAcA,EACnB,KAAK,kBAAoB,iBAC3B,CACA,MAAO,CACL,KAAK,UAAO,SAA8B,EAAG,CAC3C,OAAO,IAAK,GAAKD,GAAiBE,EAAqBC,EAAW,CAAC,CACrE,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMJ,EACN,UAAW,CAAC,CAAC,cAAe,eAAgB,EAAE,CAAC,EAC/C,WAAY,EACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EASGK,GAAoB,CAAC,MAAO,SAAU,OAAQ,OAAO,EAKrDC,GAAN,KAAmB,CAejB,YAAYC,EAAoBC,EAAeC,EAAWC,EAA0BC,EAAa,GAAMC,EAAgC,GAAMC,EAAmB,CAC9J,KAAK,mBAAqBN,EAC1B,KAAK,cAAgBC,EACrB,KAAK,UAAYC,EACjB,KAAK,yBAA2BC,EAChC,KAAK,WAAaC,EAClB,KAAK,8BAAgCC,EACrC,KAAK,kBAAoBC,EACzB,KAAK,kBAAoB,CAAC,EAC1B,KAAK,eAAiB,CACpB,IAAO,GAAGL,CAAa,mBACvB,OAAU,GAAGA,CAAa,sBAC1B,KAAQ,GAAGA,CAAa,oBACxB,MAAS,GAAGA,CAAa,oBAC3B,CACF,CAOA,uBAAuBM,EAAMC,EAAkB,CAC7C,IAAMC,EAAkB,CAAC,EACzB,QAAWC,KAAOH,EAGhB,GAAIG,EAAI,WAAaA,EAAI,aAGzB,CAAAD,EAAgB,KAAKC,CAAG,EACxB,QAASC,EAAI,EAAGA,EAAID,EAAI,SAAS,OAAQC,IACvCF,EAAgB,KAAKC,EAAI,SAASC,CAAC,CAAC,EAIxC,KAAK,yBAAyB,SAAS,IAAM,CAC3C,QAAWC,KAAWH,EACpB,KAAK,mBAAmBG,EAASJ,CAAgB,CAErD,CAAC,CACH,CAYA,oBAAoBD,EAAMM,EAAmBC,EAAiBC,EAAwB,GAAM,CAC1F,GAAI,CAACR,EAAK,QAAU,CAAC,KAAK,YAAc,EAAEM,EAAkB,KAAKG,GAASA,CAAK,GAAKF,EAAgB,KAAKE,GAASA,CAAK,GAAI,CACrH,KAAK,oBACP,KAAK,kBAAkB,qBAAqB,CAC1C,MAAO,CAAC,CACV,CAAC,EACD,KAAK,kBAAkB,wBAAwB,CAC7C,MAAO,CAAC,CACV,CAAC,GAEH,MACF,CAEA,KAAK,yBAAyB,SAAS,IAAM,CAC3C,IAAMC,EAAWV,EAAK,CAAC,EACjBW,EAAWD,EAAS,SAAS,OAC7BE,EAAa,KAAK,eAAeF,EAAUF,CAAqB,EAChEK,EAAiB,KAAK,+BAA+BD,EAAYN,CAAiB,EAClFQ,EAAe,KAAK,6BAA6BF,EAAYL,CAAe,EAC5EQ,EAAkBT,EAAkB,YAAY,EAAI,EACpDU,EAAiBT,EAAgB,QAAQ,EAAI,EAC7CU,EAAQ,KAAK,YAAc,MAC3BC,EAAQD,EAAQ,QAAU,OAC1BE,GAAMF,EAAQ,OAAS,QAC7B,QAAWd,KAAOH,EAChB,QAASI,EAAI,EAAGA,EAAIO,EAAUP,IAAK,CACjC,IAAMgB,GAAOjB,EAAI,SAASC,CAAC,EACvBE,EAAkBF,CAAC,GACrB,KAAK,gBAAgBgB,GAAMF,EAAOL,EAAeT,CAAC,EAAGA,IAAMW,CAAe,EAExER,EAAgBH,CAAC,GACnB,KAAK,gBAAgBgB,GAAMD,GAAKL,EAAaV,CAAC,EAAGA,IAAMY,CAAc,CAEzE,CAEE,KAAK,oBACP,KAAK,kBAAkB,qBAAqB,CAC1C,MAAOD,IAAoB,GAAK,CAAC,EAAIH,EAAW,MAAM,EAAGG,EAAkB,CAAC,EAAE,IAAI,CAACM,EAAOC,IAAUhB,EAAkBgB,CAAK,EAAID,EAAQ,IAAI,CAC7I,CAAC,EACD,KAAK,kBAAkB,wBAAwB,CAC7C,MAAOL,IAAmB,GAAK,CAAC,EAAIJ,EAAW,MAAMI,CAAc,EAAE,IAAI,CAACK,EAAOC,IAAUf,EAAgBe,EAAQN,CAAc,EAAIK,EAAQ,IAAI,EAAE,QAAQ,CAC7J,CAAC,EAEL,CAAC,CACH,CAYA,UAAUE,EAAaC,EAAcC,EAAU,CAExC,KAAK,YAKV,KAAK,yBAAyB,SAAS,IAAM,CAI3C,IAAMzB,EAAOyB,IAAa,SAAWF,EAAY,MAAM,EAAE,QAAQ,EAAIA,EAC/DG,EAASD,IAAa,SAAWD,EAAa,MAAM,EAAE,QAAQ,EAAIA,EAElEG,EAAgB,CAAC,EACjBC,EAAoB,CAAC,EACrBC,EAAkB,CAAC,EACzB,QAASC,EAAW,EAAGC,EAAe,EAAGD,EAAW9B,EAAK,OAAQ8B,IAAY,CAC3E,GAAI,CAACJ,EAAOI,CAAQ,EAClB,SAEFH,EAAcG,CAAQ,EAAIC,EAC1B,IAAM5B,EAAMH,EAAK8B,CAAQ,EACzBD,EAAgBC,CAAQ,EAAI,KAAK,mBAAqB,MAAM,KAAK3B,EAAI,QAAQ,EAAI,CAACA,CAAG,EACrF,IAAM6B,EAAS7B,EAAI,sBAAsB,EAAE,OAC3C4B,GAAgBC,EAChBJ,EAAkBE,CAAQ,EAAIE,CAChC,CACA,IAAMC,EAAmBP,EAAO,YAAY,EAAI,EAChD,QAASI,EAAW,EAAGA,EAAW9B,EAAK,OAAQ8B,IAAY,CACzD,GAAI,CAACJ,EAAOI,CAAQ,EAClB,SAEF,IAAMI,EAASP,EAAcG,CAAQ,EAC/BK,EAAqBL,IAAaG,EACxC,QAAW5B,KAAWwB,EAAgBC,CAAQ,EAC5C,KAAK,gBAAgBzB,EAASoB,EAAUS,EAAQC,CAAkB,CAEtE,CACIV,IAAa,MACf,KAAK,mBAAmB,wBAAwB,CAC9C,MAAOG,EACP,QAASD,EACT,SAAUE,CACZ,CAAC,EAED,KAAK,mBAAmB,wBAAwB,CAC9C,MAAOD,EACP,QAASD,EACT,SAAUE,CACZ,CAAC,CAEL,CAAC,CACH,CAOA,4BAA4BO,EAAcZ,EAAc,CACjD,KAAK,oBAIV,KAAK,yBAAyB,SAAS,IAAM,CAC3C,IAAMa,EAAQD,EAAa,cAAc,OAAO,EAC5CC,IACEb,EAAa,KAAKf,GAAS,CAACA,CAAK,EACnC,KAAK,mBAAmB4B,EAAO,CAAC,QAAQ,CAAC,EAEzC,KAAK,gBAAgBA,EAAO,SAAU,EAAG,EAAK,EAGpD,CAAC,CACH,CAMA,mBAAmBhC,EAASJ,EAAkB,CAC5C,QAAWqC,KAAOrC,EAChBI,EAAQ,MAAMiC,CAAG,EAAI,GACrBjC,EAAQ,UAAU,OAAO,KAAK,eAAeiC,CAAG,CAAC,EAM9B/C,GAAkB,KAAK+C,GAAOrC,EAAiB,QAAQqC,CAAG,IAAM,IAAMjC,EAAQ,MAAMiC,CAAG,CAAC,EAE3GjC,EAAQ,MAAM,OAAS,KAAK,qBAAqBA,CAAO,GAGxDA,EAAQ,MAAM,OAAS,GACnB,KAAK,gCACPA,EAAQ,MAAM,SAAW,IAE3BA,EAAQ,UAAU,OAAO,KAAK,aAAa,EAE/C,CAMA,gBAAgBA,EAASiC,EAAKC,EAAUC,EAAiB,CACvDnC,EAAQ,UAAU,IAAI,KAAK,aAAa,EACpCmC,GACFnC,EAAQ,UAAU,IAAI,KAAK,eAAeiC,CAAG,CAAC,EAEhDjC,EAAQ,MAAMiC,CAAG,EAAI,GAAGC,CAAQ,KAChClC,EAAQ,MAAM,OAAS,KAAK,qBAAqBA,CAAO,EACpD,KAAK,gCACPA,EAAQ,MAAM,SAAW,+CAE7B,CAYA,qBAAqBA,EAAS,CAC5B,IAAMoC,EAAmB,CACvB,IAAK,IACL,OAAQ,GACR,KAAM,EACN,MAAO,CACT,EACIC,EAAS,EAIb,QAAWJ,KAAO/C,GACZc,EAAQ,MAAMiC,CAAG,IACnBI,GAAUD,EAAiBH,CAAG,GAGlC,OAAOI,EAAS,GAAGA,CAAM,GAAK,EAChC,CAEA,eAAevC,EAAKK,EAAwB,GAAM,CAChD,GAAI,CAACA,GAAyB,KAAK,kBAAkB,OACnD,OAAO,KAAK,kBAEd,IAAMI,EAAa,CAAC,EACd+B,EAAgBxC,EAAI,SAC1B,QAASC,EAAI,EAAGA,EAAIuC,EAAc,OAAQvC,IAAK,CAC7C,IAAIgB,EAAOuB,EAAcvC,CAAC,EAC1BQ,EAAW,KAAKQ,EAAK,sBAAsB,EAAE,KAAK,CACpD,CACA,YAAK,kBAAoBR,EAClBA,CACT,CAMA,+BAA+BgC,EAAQpB,EAAc,CACnD,IAAMqB,EAAY,CAAC,EACfC,EAAe,EACnB,QAAS1C,EAAI,EAAGA,EAAIwC,EAAO,OAAQxC,IAC7BoB,EAAapB,CAAC,IAChByC,EAAUzC,CAAC,EAAI0C,EACfA,GAAgBF,EAAOxC,CAAC,GAG5B,OAAOyC,CACT,CAMA,6BAA6BD,EAAQpB,EAAc,CACjD,IAAMqB,EAAY,CAAC,EACfC,EAAe,EACnB,QAAS1C,EAAIwC,EAAO,OAAQxC,EAAI,EAAGA,IAC7BoB,EAAapB,CAAC,IAChByC,EAAUzC,CAAC,EAAI0C,EACfA,GAAgBF,EAAOxC,CAAC,GAG5B,OAAOyC,CACT,CACF,EA6DA,IAAME,GAA2C,IAAIC,EAAe,SAAS,EAkC7E,IAAIC,IAA8B,IAAM,CACtC,MAAMA,CAAc,CAClB,YAAYC,EAAeC,EAAY,CACrC,KAAK,cAAgBD,EACrB,KAAK,WAAaC,EAClB,IAAMC,EAAQC,EAAOC,EAAS,EAC9BF,EAAM,WAAa,KACnBA,EAAM,gBAAgB,CACxB,CACA,MAAO,CACL,KAAK,UAAO,SAA+B,EAAG,CAC5C,OAAO,IAAK,GAAKH,GAAkBM,EAAqBC,EAAgB,EAAMD,EAAqBE,CAAU,CAAC,CAChH,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMT,EACN,UAAW,CAAC,CAAC,GAAI,YAAa,EAAE,CAAC,EACjC,WAAY,EACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAQCU,IAAgC,IAAM,CACxC,MAAMA,CAAgB,CACpB,YAAYT,EAAeC,EAAY,CACrC,KAAK,cAAgBD,EACrB,KAAK,WAAaC,EAClB,IAAMC,EAAQC,EAAOC,EAAS,EAC9BF,EAAM,iBAAmB,KACzBA,EAAM,gBAAgB,CACxB,CACA,MAAO,CACL,KAAK,UAAO,SAAiC,EAAG,CAC9C,OAAO,IAAK,GAAKO,GAAoBJ,EAAqBC,EAAgB,EAAMD,EAAqBE,CAAU,CAAC,CAClH,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMC,EACN,UAAW,CAAC,CAAC,GAAI,kBAAmB,EAAE,CAAC,EACvC,WAAY,EACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAQCC,IAAgC,IAAM,CACxC,MAAMA,CAAgB,CACpB,YAAYV,EAAeC,EAAY,CACrC,KAAK,cAAgBD,EACrB,KAAK,WAAaC,EAClB,IAAMC,EAAQC,EAAOC,EAAS,EAC9BF,EAAM,iBAAmB,KACzBA,EAAM,gBAAgB,CACxB,CACA,MAAO,CACL,KAAK,UAAO,SAAiC,EAAG,CAC9C,OAAO,IAAK,GAAKQ,GAAoBL,EAAqBC,EAAgB,EAAMD,EAAqBE,CAAU,CAAC,CAClH,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAME,EACN,UAAW,CAAC,CAAC,GAAI,kBAAmB,EAAE,CAAC,EACvC,WAAY,EACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EASCC,IAAgC,IAAM,CACxC,MAAMA,CAAgB,CACpB,YAAYX,EAAeC,EAAY,CACrC,KAAK,cAAgBD,EACrB,KAAK,WAAaC,EAClB,IAAMC,EAAQC,EAAOC,EAAS,EAC9BF,EAAM,iBAAmB,KACzBA,EAAM,gBAAgB,CACxB,CACA,MAAO,CACL,KAAK,UAAO,SAAiC,EAAG,CAC9C,OAAO,IAAK,GAAKS,GAAoBN,EAAqBC,EAAgB,EAAMD,EAAqBE,CAAU,CAAC,CAClH,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAkB,CAC9C,KAAMG,EACN,UAAW,CAAC,CAAC,GAAI,kBAAmB,EAAE,CAAC,EACvC,WAAY,EACd,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAqDH,IAAIC,IAAyB,IAAM,CACjC,MAAMA,CAAS,CAEb,cAAe,CACb,GAAI,KAAK,oBAAsB,OAAW,CAExC,IAAMC,EAAO,KAAK,YAAY,cAAc,aAAa,MAAM,EACzDC,EAAWD,IAAS,QAAUA,IAAS,WAAa,WAAa,OACvE,KAAK,kBAAoB,KAAK,oBAAsBC,IAAa,OAAS,KAAOA,CACnF,CACA,OAAO,KAAK,iBACd,CAOA,IAAI,SAAU,CACZ,OAAO,KAAK,UACd,CACA,IAAI,QAAQC,EAAI,CAId,KAAK,WAAaA,CACpB,CAqBA,IAAI,YAAa,CACf,OAAO,KAAK,WACd,CACA,IAAI,WAAWC,EAAY,CACrB,KAAK,cAAgBA,GACvB,KAAK,kBAAkBA,CAAU,CAErC,CAOA,IAAI,uBAAwB,CAC1B,OAAO,KAAK,sBACd,CACA,IAAI,sBAAsBC,EAAO,CAC/B,KAAK,uBAAyBA,EAG1B,KAAK,YAAc,KAAK,WAAW,cAAc,SACnD,KAAK,qBAAqB,EAC1B,KAAK,yBAAyB,EAElC,CAKA,IAAI,aAAc,CAChB,OAAO,KAAK,YACd,CACA,IAAI,YAAYA,EAAO,CACrB,KAAK,aAAeA,EAEpB,KAAK,4BAA8B,GACnC,KAAK,6BAA+B,EACtC,CACA,YAAYC,EAAUC,EAAoBC,EAAaP,EAAMQ,EAAMC,EAAWC,EAAWC,EAAeC,EAA0BC,EAKlIC,EAKAC,EAAS,CACP,KAAK,SAAWV,EAChB,KAAK,mBAAqBC,EAC1B,KAAK,YAAcC,EACnB,KAAK,KAAOC,EACZ,KAAK,UAAYE,EACjB,KAAK,cAAgBC,EACrB,KAAK,yBAA2BC,EAChC,KAAK,eAAiBC,EACtB,KAAK,2BAA6BC,EAClC,KAAK,QAAUC,EAEf,KAAK,WAAa,IAAIC,EAMtB,KAAK,kBAAoB,IAAI,IAM7B,KAAK,kBAAoB,IAAI,IAM7B,KAAK,eAAiB,IAAI,IAM1B,KAAK,qBAAuB,IAAI,IAMhC,KAAK,qBAAuB,IAAI,IAKhC,KAAK,qBAAuB,GAK5B,KAAK,qBAAuB,GAK5B,KAAK,6BAA+B,GAMpC,KAAK,4BAA8B,GAcnC,KAAK,qBAAuB,IAAI,IAKhC,KAAK,eAAiB,mBAMtB,KAAK,6BAA+B,GAEpC,KAAK,oBAAsB,GAE3B,KAAK,eAAiB,GAEtB,KAAK,gBAAkB,GACvB,KAAK,kBAAoB,OACzB,KAAK,uBAAyB,GAC9B,KAAK,aAAe,GAKpB,KAAK,eAAiB,IAAIC,GAS1B,KAAK,WAAa,IAAIC,EAAgB,CACpC,MAAO,EACP,IAAK,OAAO,SACd,CAAC,EACIlB,GACHO,EAAY,cAAc,aAAa,OAAQ,OAAO,EAExD,KAAK,UAAYE,EACjB,KAAK,UAAY,CAACC,EAAU,UAC5B,KAAK,mBAAqBH,EAAY,cAAc,WAAa,OACnE,CACA,UAAW,CACT,KAAK,mBAAmB,EAIxB,KAAK,YAAc,KAAK,SAAS,KAAK,CAAC,CAAC,EAAE,OAAO,CAACY,EAAIC,IAC7C,KAAK,QAAU,KAAK,QAAQA,EAAQ,UAAWA,EAAQ,IAAI,EAAIA,CACvE,EACD,KAAK,eAAe,OAAO,EAAE,KAAKC,GAAU,KAAK,UAAU,CAAC,EAAE,UAAU,IAAM,CAC5E,KAAK,4BAA8B,EACrC,CAAC,CACH,CACA,oBAAqB,CACnB,KAAK,gBAAkB,EACzB,CACA,uBAAwB,CAElB,KAAK,WAAW,GAClB,KAAK,QAAQ,CAEjB,CACA,aAAc,CACZ,CAAC,KAAK,YAAY,cAAe,KAAK,kBAAkB,cAAe,KAAK,kBAAkB,cAAe,KAAK,qBAAsB,KAAK,kBAAmB,KAAK,eAAgB,KAAK,qBAAsB,KAAK,qBAAsB,KAAK,iBAAiB,EAAE,QAAQC,GAAO,CAChRA,GAAK,MAAM,CACb,CAAC,EACD,KAAK,eAAiB,CAAC,EACvB,KAAK,eAAiB,CAAC,EACvB,KAAK,eAAiB,KACtB,KAAK,WAAW,KAAK,EACrB,KAAK,WAAW,SAAS,EACrBC,GAAa,KAAK,UAAU,GAC9B,KAAK,WAAW,WAAW,IAAI,CAEnC,CAWA,YAAa,CACX,KAAK,YAAc,KAAK,kBAAkB,EAC1C,IAAMC,EAAU,KAAK,YAAY,KAAK,KAAK,WAAW,EACtD,GAAI,CAACA,EAAS,CACZ,KAAK,iBAAiB,EACtB,KAAK,eAAe,KAAK,EACzB,MACF,CACA,IAAMC,EAAgB,KAAK,WAAW,cACtC,KAAK,cAAc,aAAaD,EAASC,EAAe,CAACC,EAAQC,EAAwBC,IAAiB,KAAK,qBAAqBF,EAAO,KAAME,CAAY,EAAGF,GAAUA,EAAO,KAAK,KAAMG,GAAU,CAChMA,EAAO,YAAcC,GAAuB,UAAYD,EAAO,SACjE,KAAK,2BAA2BA,EAAO,OAAO,KAAK,OAAQA,EAAO,OAAO,CAE7E,CAAC,EAED,KAAK,uBAAuB,EAG5BL,EAAQ,sBAAsBE,GAAU,CACtC,IAAMK,EAAUN,EAAc,IAAIC,EAAO,YAAY,EACrDK,EAAQ,QAAQ,UAAYL,EAAO,KAAK,IAC1C,CAAC,EACD,KAAK,iBAAiB,EAGlB,KAAK,SAAWM,EAAO,gBAAgB,EACzC,KAAK,QAAQ,SAAS,KAAKC,EAAK,CAAC,EAAGZ,GAAU,KAAK,UAAU,CAAC,EAAE,UAAU,IAAM,CAC9E,KAAK,yBAAyB,CAChC,CAAC,EAED,KAAK,yBAAyB,EAEhC,KAAK,eAAe,KAAK,CAC3B,CAEA,aAAaa,EAAW,CACtB,KAAK,kBAAkB,IAAIA,CAAS,CACtC,CAEA,gBAAgBA,EAAW,CACzB,KAAK,kBAAkB,OAAOA,CAAS,CACzC,CAEA,UAAUC,EAAQ,CAChB,KAAK,eAAe,IAAIA,CAAM,CAChC,CAEA,aAAaA,EAAQ,CACnB,KAAK,eAAe,OAAOA,CAAM,CACnC,CAEA,gBAAgBC,EAAc,CAC5B,KAAK,qBAAqB,IAAIA,CAAY,EAC1C,KAAK,qBAAuB,EAC9B,CAEA,mBAAmBA,EAAc,CAC/B,KAAK,qBAAqB,OAAOA,CAAY,EAC7C,KAAK,qBAAuB,EAC9B,CAEA,gBAAgBC,EAAc,CAC5B,KAAK,qBAAqB,IAAIA,CAAY,EAC1C,KAAK,qBAAuB,EAC9B,CAEA,mBAAmBA,EAAc,CAC/B,KAAK,qBAAqB,OAAOA,CAAY,EAC7C,KAAK,qBAAuB,EAC9B,CAEA,aAAaC,EAAW,CACtB,KAAK,iBAAmBA,CAC1B,CAQA,6BAA8B,CAC5B,IAAMC,EAAa,KAAK,iBAAiB,KAAK,gBAAgB,EAI9D,GAAI,KAAK,mBAAoB,CAC3B,IAAMC,EAAQC,GAAoB,KAAK,iBAAkB,OAAO,EAC5DD,IACFA,EAAM,MAAM,QAAUD,EAAW,OAAS,GAAK,OAEnD,CACA,IAAMG,EAAe,KAAK,eAAe,IAAIpB,GAAOA,EAAI,MAAM,EAC9D,KAAK,cAAc,uBAAuBiB,EAAY,CAAC,KAAK,CAAC,EAC7D,KAAK,cAAc,UAAUA,EAAYG,EAAc,KAAK,EAE5D,KAAK,eAAe,QAAQpB,GAAOA,EAAI,mBAAmB,CAAC,CAC7D,CAQA,6BAA8B,CAC5B,IAAMqB,EAAa,KAAK,iBAAiB,KAAK,gBAAgB,EAI9D,GAAI,KAAK,mBAAoB,CAC3B,IAAMC,EAAQH,GAAoB,KAAK,iBAAkB,OAAO,EAC5DG,IACFA,EAAM,MAAM,QAAUD,EAAW,OAAS,GAAK,OAEnD,CACA,IAAMD,EAAe,KAAK,eAAe,IAAIpB,GAAOA,EAAI,MAAM,EAC9D,KAAK,cAAc,uBAAuBqB,EAAY,CAAC,QAAQ,CAAC,EAChE,KAAK,cAAc,UAAUA,EAAYD,EAAc,QAAQ,EAC/D,KAAK,cAAc,4BAA4B,KAAK,YAAY,cAAeA,CAAY,EAE3F,KAAK,eAAe,QAAQpB,GAAOA,EAAI,mBAAmB,CAAC,CAC7D,CAQA,0BAA2B,CACzB,IAAMiB,EAAa,KAAK,iBAAiB,KAAK,gBAAgB,EACxDM,EAAW,KAAK,iBAAiB,KAAK,UAAU,EAChDF,EAAa,KAAK,iBAAiB,KAAK,gBAAgB,GAK1D,KAAK,oBAAsB,CAAC,KAAK,cAAgB,KAAK,gCAGxD,KAAK,cAAc,uBAAuB,CAAC,GAAGJ,EAAY,GAAGM,EAAU,GAAGF,CAAU,EAAG,CAAC,OAAQ,OAAO,CAAC,EACxG,KAAK,6BAA+B,IAGtCJ,EAAW,QAAQ,CAACO,EAAWC,IAAM,CACnC,KAAK,uBAAuB,CAACD,CAAS,EAAG,KAAK,eAAeC,CAAC,CAAC,CACjE,CAAC,EAED,KAAK,SAAS,QAAQZ,GAAU,CAE9B,IAAMa,EAAO,CAAC,EACd,QAASD,EAAI,EAAGA,EAAIF,EAAS,OAAQE,IAC/B,KAAK,YAAYA,CAAC,EAAE,SAAWZ,GACjCa,EAAK,KAAKH,EAASE,CAAC,CAAC,EAGzB,KAAK,uBAAuBC,EAAMb,CAAM,CAC1C,CAAC,EAEDQ,EAAW,QAAQ,CAACM,EAAWF,IAAM,CACnC,KAAK,uBAAuB,CAACE,CAAS,EAAG,KAAK,eAAeF,CAAC,CAAC,CACjE,CAAC,EAED,MAAM,KAAK,KAAK,kBAAkB,OAAO,CAAC,EAAE,QAAQzB,GAAOA,EAAI,mBAAmB,CAAC,CACrF,CAEA,iBAAkB,CAMZ,CAAC,KAAK,gBAAkB,KAAK,YAAc,KAAK,kBAAoB,KAAK,kBAAoB,KAAK,mBACpG,KAAK,eAAiB,GAGlB,KAAK,WAAW,GAClB,KAAK,QAAQ,EAGnB,CAEA,YAAa,CACX,OAAO,KAAK,gBAAkB,KAAK,eACrC,CAEA,SAAU,CAER,KAAK,cAAc,EACnB,KAAK,iBAAiB,EAElB,CAAC,KAAK,eAAe,QAAU,CAAC,KAAK,eAAe,QAAW,KAAK,SAAS,OAKjF,IAAM4B,EADiB,KAAK,sBAAsB,GACT,KAAK,sBAAwB,KAAK,qBAE3E,KAAK,6BAA+B,KAAK,8BAAgCA,EACzE,KAAK,4BAA8BA,EAE/B,KAAK,uBACP,KAAK,uBAAuB,EAC5B,KAAK,qBAAuB,IAG1B,KAAK,uBACP,KAAK,uBAAuB,EAC5B,KAAK,qBAAuB,IAI1B,KAAK,YAAc,KAAK,SAAS,OAAS,GAAK,CAAC,KAAK,0BACvD,KAAK,sBAAsB,EAClB,KAAK,8BAGd,KAAK,yBAAyB,EAEhC,KAAK,mBAAmB,CAC1B,CAMA,mBAAoB,CAClB,IAAMC,EAAa,CAAC,EAGdC,EAAuB,KAAK,qBAClC,KAAK,qBAAuB,IAAI,IAGhC,QAASL,EAAI,EAAGA,EAAI,KAAK,MAAM,OAAQA,IAAK,CAC1C,IAAIM,EAAO,KAAK,MAAMN,CAAC,EACjBO,EAAoB,KAAK,sBAAsBD,EAAMN,EAAGK,EAAqB,IAAIC,CAAI,CAAC,EACvF,KAAK,qBAAqB,IAAIA,CAAI,GACrC,KAAK,qBAAqB,IAAIA,EAAM,IAAI,OAAS,EAEnD,QAASE,EAAI,EAAGA,EAAID,EAAkB,OAAQC,IAAK,CACjD,IAAIC,EAAYF,EAAkBC,CAAC,EAC7BE,EAAQ,KAAK,qBAAqB,IAAID,EAAU,IAAI,EACtDC,EAAM,IAAID,EAAU,MAAM,EAC5BC,EAAM,IAAID,EAAU,MAAM,EAAE,KAAKA,CAAS,EAE1CC,EAAM,IAAID,EAAU,OAAQ,CAACA,CAAS,CAAC,EAEzCL,EAAW,KAAKK,CAAS,CAC3B,CACF,CACA,OAAOL,CACT,CAMA,sBAAsBE,EAAMK,EAAWD,EAAO,CAE5C,OADgB,KAAK,YAAYJ,EAAMK,CAAS,EACjC,IAAIvB,GAAU,CAC3B,IAAMwB,EAAmBF,GAASA,EAAM,IAAItB,CAAM,EAAIsB,EAAM,IAAItB,CAAM,EAAI,CAAC,EAC3E,GAAIwB,EAAiB,OAAQ,CAC3B,IAAMvC,EAAUuC,EAAiB,MAAM,EACvC,OAAAvC,EAAQ,UAAYsC,EACbtC,CACT,KACE,OAAO,CACL,KAAAiC,EACA,OAAAlB,EACA,UAAAuB,CACF,CAEJ,CAAC,CACH,CAEA,kBAAmB,CACjB,KAAK,kBAAkB,MAAM,EACVE,GAAiB,KAAK,YAAY,KAAK,kBAAkB,EAAG,KAAK,iBAAiB,EAC1F,QAAQ1B,GAAa,CAC1B,KAAK,kBAAkB,IAAIA,EAAU,IAAI,EAG7C,KAAK,kBAAkB,IAAIA,EAAU,KAAMA,CAAS,CACtD,CAAC,CACH,CAEA,eAAgB,CACd,KAAK,eAAiB0B,GAAiB,KAAK,YAAY,KAAK,qBAAqB,EAAG,KAAK,oBAAoB,EAC9G,KAAK,eAAiBA,GAAiB,KAAK,YAAY,KAAK,qBAAqB,EAAG,KAAK,oBAAoB,EAC9G,KAAK,SAAWA,GAAiB,KAAK,YAAY,KAAK,eAAe,EAAG,KAAK,cAAc,EAE5F,IAAMC,EAAiB,KAAK,SAAS,OAAOvC,GAAO,CAACA,EAAI,IAAI,EACxD,CAAC,KAAK,uBAAyBuC,EAAe,OAAS,EAG3D,KAAK,eAAiBA,EAAe,CAAC,CACxC,CAMA,uBAAwB,CACtB,IAAMC,EAAqB,CAACC,EAAKzC,IAAQyC,GAAO,CAAC,CAACzC,EAAI,eAAe,EAE/D0C,EAAqB,KAAK,SAAS,OAAOF,EAAoB,EAAK,EACrEE,GACF,KAAK,qBAAqB,EAG5B,IAAMC,EAAuB,KAAK,eAAe,OAAOH,EAAoB,EAAK,EAC7EG,GACF,KAAK,uBAAuB,EAE9B,IAAMC,EAAuB,KAAK,eAAe,OAAOJ,EAAoB,EAAK,EACjF,OAAII,GACF,KAAK,uBAAuB,EAEvBF,GAAsBC,GAAwBC,CACvD,CAMA,kBAAkB/D,EAAY,CAC5B,KAAK,MAAQ,CAAC,EACVoB,GAAa,KAAK,UAAU,GAC9B,KAAK,WAAW,WAAW,IAAI,EAG7B,KAAK,4BACP,KAAK,0BAA0B,YAAY,EAC3C,KAAK,0BAA4B,MAE9BpB,IACC,KAAK,aACP,KAAK,YAAY,KAAK,CAAC,CAAC,EAEtB,KAAK,YACP,KAAK,WAAW,cAAc,MAAM,GAGxC,KAAK,YAAcA,CACrB,CAEA,uBAAwB,CAEtB,GAAI,CAAC,KAAK,WACR,OAEF,IAAIgE,EACA5C,GAAa,KAAK,UAAU,EAC9B4C,EAAa,KAAK,WAAW,QAAQ,IAAI,EAChCC,GAAa,KAAK,UAAU,EACrCD,EAAa,KAAK,WACT,MAAM,QAAQ,KAAK,UAAU,IACtCA,EAAaE,EAAG,KAAK,UAAU,GAKjC,KAAK,0BAA4BF,EAAW,KAAK9C,GAAU,KAAK,UAAU,CAAC,EAAE,UAAUgC,GAAQ,CAC7F,KAAK,MAAQA,GAAQ,CAAC,EACtB,KAAK,WAAW,CAClB,CAAC,CACH,CAKA,wBAAyB,CAEnB,KAAK,iBAAiB,cAAc,OAAS,GAC/C,KAAK,iBAAiB,cAAc,MAAM,EAE5C,KAAK,eAAe,QAAQ,CAAC/B,EAAKyB,IAAM,KAAK,WAAW,KAAK,iBAAkBzB,EAAKyB,CAAC,CAAC,EACtF,KAAK,4BAA4B,CACnC,CAKA,wBAAyB,CAEnB,KAAK,iBAAiB,cAAc,OAAS,GAC/C,KAAK,iBAAiB,cAAc,MAAM,EAE5C,KAAK,eAAe,QAAQ,CAACzB,EAAKyB,IAAM,KAAK,WAAW,KAAK,iBAAkBzB,EAAKyB,CAAC,CAAC,EACtF,KAAK,4BAA4B,CACnC,CAEA,uBAAuBC,EAAMb,EAAQ,CACnC,IAAMmC,EAAa,MAAM,KAAKnC,EAAO,SAAW,CAAC,CAAC,EAAE,IAAIoC,GAAc,CACpE,IAAMrC,EAAY,KAAK,kBAAkB,IAAIqC,CAAU,EAIvD,OAAOrC,CACT,CAAC,EACKsC,EAAoBF,EAAW,IAAIpC,GAAaA,EAAU,MAAM,EAChEuC,EAAkBH,EAAW,IAAIpC,GAAaA,EAAU,SAAS,EACvE,KAAK,cAAc,oBAAoBc,EAAMwB,EAAmBC,EAAiB,CAAC,KAAK,cAAgB,KAAK,2BAA2B,CACzI,CAEA,iBAAiBC,EAAW,CAC1B,IAAMC,EAAe,CAAC,EACtB,QAAS5B,EAAI,EAAGA,EAAI2B,EAAU,cAAc,OAAQ3B,IAAK,CACvD,IAAM6B,EAAUF,EAAU,cAAc,IAAI3B,CAAC,EAC7C4B,EAAa,KAAKC,EAAQ,UAAU,CAAC,CAAC,CACxC,CACA,OAAOD,CACT,CAOA,YAAYtB,EAAMK,EAAW,CAC3B,GAAI,KAAK,SAAS,QAAU,EAC1B,MAAO,CAAC,KAAK,SAAS,CAAC,CAAC,EAE1B,IAAImB,EAAU,CAAC,EACf,GAAI,KAAK,sBACPA,EAAU,KAAK,SAAS,OAAOvD,GAAO,CAACA,EAAI,MAAQA,EAAI,KAAKoC,EAAWL,CAAI,CAAC,MACvE,CACL,IAAIlB,EAAS,KAAK,SAAS,KAAKb,GAAOA,EAAI,MAAQA,EAAI,KAAKoC,EAAWL,CAAI,CAAC,GAAK,KAAK,eAClFlB,GACF0C,EAAQ,KAAK1C,CAAM,CAEvB,CACI,OAAC0C,EAAQ,OAGNA,CACT,CACA,qBAAqBrB,EAAWsB,EAAO,CACrC,IAAM3C,EAASqB,EAAU,OACnBuB,EAAU,CACd,UAAWvB,EAAU,IACvB,EACA,MAAO,CACL,YAAarB,EAAO,SACpB,QAAA4C,EACA,MAAAD,CACF,CACF,CAMA,WAAWE,EAAQ7C,EAAQ2C,EAAOC,EAAU,CAAC,EAAG,CAE9C,IAAME,EAAOD,EAAO,cAAc,mBAAmB7C,EAAO,SAAU4C,EAASD,CAAK,EACpF,YAAK,2BAA2B3C,EAAQ4C,CAAO,EACxCE,CACT,CACA,2BAA2B9C,EAAQ4C,EAAS,CAC1C,QAASG,KAAgB,KAAK,kBAAkB/C,CAAM,EAChDgD,GAAc,sBAChBA,GAAc,qBAAqB,eAAe,mBAAmBD,EAAcH,CAAO,EAG9F,KAAK,mBAAmB,aAAa,CACvC,CAKA,wBAAyB,CACvB,IAAMtD,EAAgB,KAAK,WAAW,cACtC,QAAS2D,EAAc,EAAGC,EAAQ5D,EAAc,OAAQ2D,EAAcC,EAAOD,IAAe,CAE1F,IAAML,EADUtD,EAAc,IAAI2D,CAAW,EACrB,QACxBL,EAAQ,MAAQM,EAChBN,EAAQ,MAAQK,IAAgB,EAChCL,EAAQ,KAAOK,IAAgBC,EAAQ,EACvCN,EAAQ,KAAOK,EAAc,IAAM,EACnCL,EAAQ,IAAM,CAACA,EAAQ,KACnB,KAAK,uBACPA,EAAQ,UAAY,KAAK,YAAYK,CAAW,EAAE,UAClDL,EAAQ,YAAcK,GAEtBL,EAAQ,MAAQ,KAAK,YAAYK,CAAW,EAAE,SAElD,CACF,CAEA,kBAAkBjD,EAAQ,CACxB,MAAI,CAACA,GAAU,CAACA,EAAO,QACd,CAAC,EAEH,MAAM,KAAKA,EAAO,QAASmD,GAAY,CAC5C,IAAMC,EAAS,KAAK,kBAAkB,IAAID,CAAQ,EAIlD,OAAOnD,EAAO,oBAAoBoD,CAAM,CAC1C,CAAC,CACH,CAMA,sBAAuB,CACrB,KAAK,YAAY,KAAK,CAAC,CAAC,EACxB,KAAK,WAAW,cAAc,MAAM,EACpC,KAAK,WAAW,CAClB,CAMA,oBAAqB,CACnB,IAAMC,EAAqB,CAACzB,EAAK0B,IACxB1B,GAAO0B,EAAE,iBAAiB,EAK/B,KAAK,eAAe,OAAOD,EAAoB,EAAK,GACtD,KAAK,4BAA4B,EAE/B,KAAK,eAAe,OAAOA,EAAoB,EAAK,GACtD,KAAK,4BAA4B,EAE/B,MAAM,KAAK,KAAK,kBAAkB,OAAO,CAAC,EAAE,OAAOA,EAAoB,EAAK,IAC9E,KAAK,6BAA+B,GACpC,KAAK,yBAAyB,EAElC,CAMA,oBAAqB,CACnB,IAAME,EAAY,KAAK,KAAO,KAAK,KAAK,MAAQ,MAChD,KAAK,cAAgB,IAAIC,GAAa,KAAK,mBAAoB,KAAK,eAAgBD,EAAW,KAAK,yBAA0B,KAAK,UAAU,UAAW,KAAK,6BAA8B,KAAK,0BAA0B,GACzN,KAAK,KAAO,KAAK,KAAK,OAASrB,EAAG,GAAG,KAAKhD,GAAU,KAAK,UAAU,CAAC,EAAE,UAAUjB,GAAS,CACxF,KAAK,cAAc,UAAYA,EAC/B,KAAK,yBAAyB,CAChC,CAAC,CACH,CAEA,YAAYwF,EAAO,CACjB,OAAOA,EAAM,OAAOC,GAAQ,CAACA,EAAK,QAAUA,EAAK,SAAW,IAAI,CAClE,CAEA,kBAAmB,CACjB,IAAMvD,EAAY,KAAK,kBAAoB,KAAK,WAChD,GAAI,CAACA,EACH,OAEF,IAAMwD,EAAa,KAAK,WAAW,cAAc,SAAW,EAC5D,GAAIA,IAAe,KAAK,oBACtB,OAEF,IAAMC,EAAY,KAAK,iBAAiB,cACxC,GAAID,EAAY,CACd,IAAMb,EAAOc,EAAU,mBAAmBzD,EAAU,WAAW,EACzD0D,EAAWf,EAAK,UAAU,CAAC,EAG7BA,EAAK,UAAU,SAAW,GAAKe,GAAU,WAAa,KAAK,UAAU,eACvEA,EAAS,aAAa,OAAQ,KAAK,EACnCA,EAAS,UAAU,IAAI1D,EAAU,iBAAiB,EAEtD,MACEyD,EAAU,MAAM,EAElB,KAAK,oBAAsBD,EAC3B,KAAK,mBAAmB,aAAa,CACvC,CACA,MAAO,CACL,KAAK,UAAO,SAA0B,EAAG,CACvC,OAAO,IAAK,GAAK/F,GAAakG,EAAqBC,EAAe,EAAMD,EAAqBE,EAAiB,EAAMF,EAAqBG,CAAU,EAAMC,GAAkB,MAAM,EAAMJ,EAAqBK,GAAgB,CAAC,EAAML,EAAkBM,CAAQ,EAAMN,EAAqBO,EAAQ,EAAMP,EAAkBQ,EAAuB,EAAMR,EAAkBS,EAA0B,EAAMT,EAAqBU,EAAa,EAAMV,EAAkBW,GAA6B,EAAE,EAAMX,EAAqBjE,EAAQ,CAAC,CAAC,CACvgB,CACF,CACA,MAAO,CACL,KAAK,UAAyB6E,EAAkB,CAC9C,KAAM9G,EACN,UAAW,CAAC,CAAC,WAAW,EAAG,CAAC,QAAS,YAAa,EAAE,CAAC,EACrD,eAAgB,SAAiC+G,EAAIC,EAAKC,EAAU,CAQlE,GAPIF,EAAK,IACJG,GAAeD,EAAUE,GAAc,CAAC,EACxCD,GAAeD,EAAUG,GAAc,CAAC,EACxCF,GAAeD,EAAUI,GAAW,CAAC,EACrCH,GAAeD,EAAUK,GAAiB,CAAC,EAC3CJ,GAAeD,EAAUM,GAAiB,CAAC,GAE5CR,EAAK,EAAG,CACV,IAAIS,EACDC,GAAeD,EAAQE,GAAY,CAAC,IAAMV,EAAI,WAAaQ,EAAG,OAC9DC,GAAeD,EAAQE,GAAY,CAAC,IAAMV,EAAI,mBAAqBQ,GACnEC,GAAeD,EAAQE,GAAY,CAAC,IAAMV,EAAI,gBAAkBQ,GAChEC,GAAeD,EAAQE,GAAY,CAAC,IAAMV,EAAI,sBAAwBQ,GACtEC,GAAeD,EAAQE,GAAY,CAAC,IAAMV,EAAI,sBAAwBQ,EAC3E,CACF,EACA,UAAW,CAAC,EAAG,WAAW,EAC1B,SAAU,EACV,aAAc,SAA+BT,EAAIC,EAAK,CAChDD,EAAK,GACJY,GAAY,yBAA0BX,EAAI,WAAW,CAE5D,EACA,OAAQ,CACN,QAAS,UACT,WAAY,aACZ,sBAAuB,CAAIY,EAAa,2BAA4B,wBAAyB,wBAAyBC,EAAgB,EACtI,YAAa,CAAID,EAAa,2BAA4B,cAAe,cAAeC,EAAgB,CAC1G,EACA,QAAS,CACP,eAAgB,gBAClB,EACA,SAAU,CAAC,UAAU,EACrB,WAAY,GACZ,SAAU,CAAIC,GAAmB,CAAC,CAChC,QAASC,GACT,YAAa/H,CACf,EAAG,CACD,QAAS0G,GACT,SAAUsB,EACZ,EAAG,CACD,QAASrB,GACT,SAAUsB,EACZ,EAEA,CACE,QAASpB,GACT,SAAU,IACZ,CAAC,CAAC,EAAMqB,GAA6BC,CAAmB,EACxD,mBAAoBC,GACpB,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,OAAQ,UAAU,EAAG,CAAC,kBAAmB,EAAE,EAAG,CAAC,YAAa,EAAE,EAAG,CAAC,kBAAmB,EAAE,EAAG,CAAC,kBAAmB,EAAE,CAAC,EAC3H,SAAU,SAA2BrB,EAAIC,EAAK,CACxCD,EAAK,IACJsB,GAAgBC,EAAG,EACnBC,GAAa,CAAC,EACdA,GAAa,EAAG,CAAC,EACjBC,EAAW,EAAGC,GAAiC,EAAG,CAAC,EAAE,EAAGC,GAAiC,EAAG,CAAC,EAAE,EAAGC,GAAiC,EAAG,CAAC,GAExI5B,EAAK,IACJ6B,EAAU,CAAC,EACXC,GAAc,EAAG7B,EAAI,UAAY,EAAI,EAAE,EACvC4B,EAAU,EACVC,GAAc,EAAG7B,EAAI,mBAAqB,EAAI,CAAC,EAEtD,EACA,aAAc,CAAC8B,GAAiBC,GAAeC,GAAiBC,EAAe,EAC/E,OAAQ,CAAC,6CAA6C,EACtD,cAAe,CACjB,CAAC,CACH,CACF,CACA,OAAOjJ,CACT,GAAG,EAKH,SAAS6D,GAAiBqF,EAAOC,EAAK,CACpC,OAAOD,EAAM,OAAO,MAAM,KAAKC,CAAG,CAAC,CACrC,CAKA,SAASzG,GAAoBuC,EAAQmE,EAAS,CAC5C,IAAMC,EAAmBD,EAAQ,YAAY,EACzCE,EAAUrE,EAAO,cAAc,QAAQ,cAC3C,KAAOqE,GAAS,CAEd,IAAMC,EAAWD,EAAQ,WAAa,EAAIA,EAAQ,SAAW,KAC7D,GAAIC,IAAaF,EACf,OAAOC,EACF,GAAIC,IAAa,QAEtB,MAEFD,EAAUA,EAAQ,UACpB,CACA,OAAO,IACT,CAiIA,IAAIE,IAA+B,IAAM,CACvC,MAAMA,CAAe,CACnB,MAAO,CACL,KAAK,UAAO,SAAgC,EAAG,CAC7C,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAiB,CAC7C,KAAMD,CACR,CAAC,CACH,CACA,MAAO,CACL,KAAK,UAAyBE,EAAiB,CAC7C,QAAS,CAACC,EAAe,CAC3B,CAAC,CACH,CACF,CACA,OAAOH,CACT,GAAG,ECr9EH,IAAMI,GAAM,CAAC,CAAC,CAAC,SAAS,CAAC,EAAG,CAAC,CAAC,UAAU,EAAG,CAAC,KAAK,CAAC,EAAG,GAAG,EAClDC,GAAM,CAAC,UAAW,gBAAiB,GAAG,EAC5C,SAASC,GAAgCC,EAAIC,EAAK,CAC5CD,EAAK,GACJE,GAAa,EAAG,CAAC,CAExB,CACA,SAASC,GAAgCH,EAAIC,EAAK,CAC5CD,EAAK,IACJI,EAAe,EAAG,QAAS,CAAC,EAC5BC,GAAmB,EAAG,CAAC,EACvBC,EAAa,EACbF,EAAe,EAAG,QAAS,CAAC,EAC5BC,GAAmB,EAAG,CAAC,EAAE,EAAG,CAAC,EAC7BC,EAAa,EACbF,EAAe,EAAG,QAAS,CAAC,EAC5BC,GAAmB,EAAG,CAAC,EACvBC,EAAa,EAEpB,CACA,SAASC,GAAgCP,EAAIC,EAAK,CAC5CD,EAAK,GACJK,GAAmB,EAAG,CAAC,EAAE,EAAG,CAAC,EAAE,EAAG,CAAC,EAAE,EAAG,CAAC,CAEhD,CAoDA,IAAIG,IAAyB,IAAM,CACjC,MAAMA,UAAiBC,EAAS,CAC9B,aAAc,CACZ,MAAM,GAAG,SAAS,EAElB,KAAK,eAAiB,uBAEtB,KAAK,6BAA+B,EACtC,CACA,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIC,EACJ,OAAO,SAA0BC,EAAG,CAClC,OAAQD,IAA0BA,EAA2BE,GAAsBJ,CAAQ,IAAIG,GAAKH,CAAQ,CAC9G,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,UAAyBK,EAAkB,CAC9C,KAAML,EACN,UAAW,CAAC,CAAC,WAAW,EAAG,CAAC,QAAS,YAAa,EAAE,CAAC,EACrD,UAAW,CAAC,EAAG,gBAAiB,uBAAuB,EACvD,SAAU,EACV,aAAc,SAA+BM,EAAIC,EAAK,CAChDD,EAAK,GACJE,GAAY,yBAA0BD,EAAI,WAAW,CAE5D,EACA,SAAU,CAAC,UAAU,EACrB,WAAY,GACZ,SAAU,CAAIE,GAAmB,CAAC,CAChC,QAASR,GACT,YAAaD,CACf,EAAG,CACD,QAASU,GACT,YAAaV,CACf,EAAG,CACD,QAASW,GACT,SAAUC,EACZ,EAGA,CACE,QAASC,GACT,SAAUC,EACZ,EAEA,CACE,QAASC,GACT,SAAU,IACZ,CAAC,CAAC,EAAMC,EAA+BC,CAAmB,EAC1D,mBAAoBC,GACpB,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,OAAQ,UAAU,EAAG,CAAC,kBAAmB,EAAE,EAAG,CAAC,OAAQ,WAAY,EAAG,yBAAyB,EAAG,CAAC,YAAa,EAAE,EAAG,CAAC,kBAAmB,EAAE,EAAG,CAAC,kBAAmB,EAAE,CAAC,EAC/K,SAAU,SAA2BZ,EAAIC,EAAK,CACxCD,EAAK,IACJa,GAAgBC,EAAG,EACnBC,GAAa,CAAC,EACdA,GAAa,EAAG,CAAC,EACjBC,EAAW,EAAGC,GAAiC,EAAG,CAAC,EAAE,EAAGC,GAAiC,EAAG,CAAC,EAAE,EAAGC,GAAiC,EAAG,CAAC,GAExInB,EAAK,IACJoB,EAAU,CAAC,EACXC,GAAc,EAAGpB,EAAI,UAAY,EAAI,EAAE,EACvCmB,EAAU,EACVC,GAAc,EAAGpB,EAAI,mBAAqB,EAAI,CAAC,EAEtD,EACA,aAAc,CAACqB,GAAiBC,GAAeC,GAAiBC,EAAe,EAC/E,OAAQ,CAAC,qyKAAqyK,EAC9yK,cAAe,CACjB,CAAC,CACH,CACF,CACA,OAAO/B,CACT,GAAG,EASCgC,IAA2B,IAAM,CACnC,MAAMA,UAAmBC,EAAW,CAClC,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIC,EACJ,OAAO,SAA4B/B,EAAG,CACpC,OAAQ+B,IAA4BA,EAA6B9B,GAAsB4B,CAAU,IAAI7B,GAAK6B,CAAU,CACtH,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,UAAyBG,EAAkB,CAC9C,KAAMH,EACN,UAAW,CAAC,CAAC,GAAI,aAAc,EAAE,CAAC,EAClC,WAAY,GACZ,SAAU,CAAIvB,GAAmB,CAAC,CAChC,QAASwB,GACT,YAAaD,CACf,CAAC,CAAC,EAAMhB,CAA0B,CACpC,CAAC,CACH,CACF,CACA,OAAOgB,CACT,GAAG,EAQCI,IAAiC,IAAM,CACzC,MAAMA,UAAyBC,EAAiB,CAC9C,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIC,EACJ,OAAO,SAAkCnC,EAAG,CAC1C,OAAQmC,IAAkCA,EAAmClC,GAAsBgC,CAAgB,IAAIjC,GAAKiC,CAAgB,CAC9I,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,UAAyBD,EAAkB,CAC9C,KAAMC,EACN,UAAW,CAAC,CAAC,GAAI,mBAAoB,EAAE,CAAC,EACxC,WAAY,GACZ,SAAU,CAAI3B,GAAmB,CAAC,CAChC,QAAS4B,GACT,YAAaD,CACf,CAAC,CAAC,EAAMpB,CAA0B,CACpC,CAAC,CACH,CACF,CACA,OAAOoB,CACT,GAAG,EAuCH,IAAIG,IAA6B,IAAM,CACrC,MAAMA,UAAqBC,EAAa,CAEtC,IAAI,MAAO,CACT,OAAO,KAAK,KACd,CACA,IAAI,KAAKC,EAAM,CACb,KAAK,cAAcA,CAAI,CACzB,CAOA,2BAA4B,CAC1B,MAAM,0BAA0B,EAChC,KAAK,oBAAoB,KAAK,cAAc,KAAK,oBAAoB,EAAE,CACzE,CACA,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIC,EACJ,OAAO,SAA8BC,EAAG,CACtC,OAAQD,IAA8BA,EAA+BE,GAAsBL,CAAY,IAAII,GAAKJ,CAAY,CAC9H,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,UAAyBM,EAAkB,CAC9C,KAAMN,EACN,UAAW,CAAC,CAAC,GAAI,eAAgB,EAAE,CAAC,EACpC,OAAQ,CACN,KAAM,CAAIO,EAAa,KAAM,eAAgB,MAAM,CACrD,EACA,WAAY,GACZ,SAAU,CAAIC,GAAmB,CAAC,CAChC,QAASP,GACT,YAAaD,CACf,EAAG,CACD,QAAS,6BACT,YAAaA,CACf,CAAC,CAAC,EAAMS,CAA0B,CACpC,CAAC,CACH,CACF,CACA,OAAOT,CACT,GAAG,EAKCU,IAA8B,IAAM,CACtC,MAAMA,UAAsBC,EAAc,CACxC,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIC,EACJ,OAAO,SAA+BR,EAAG,CACvC,OAAQQ,IAA+BA,EAAgCP,GAAsBK,CAAa,IAAIN,GAAKM,CAAa,CAClI,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,UAAyBJ,EAAkB,CAC9C,KAAMI,EACN,UAAW,CAAC,CAAC,iBAAiB,EAAG,CAAC,KAAM,kBAAmB,EAAE,CAAC,EAC9D,UAAW,CAAC,OAAQ,eAAgB,EAAG,sBAAuB,6BAA6B,EAC3F,WAAY,GACZ,SAAU,CAAID,CAA0B,CAC1C,CAAC,CACH,CACF,CACA,OAAOC,CACT,GAAG,EA+BH,IAAIG,IAAwB,IAAM,CAChC,MAAMA,UAAgBC,EAAQ,CAC5B,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIC,EACJ,OAAO,SAAyBC,EAAG,CACjC,OAAQD,IAAyBA,EAA0BE,GAAsBJ,CAAO,IAAIG,GAAKH,CAAO,CAC1G,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,UAAyBK,EAAkB,CAC9C,KAAML,EACN,UAAW,CAAC,CAAC,UAAU,EAAG,CAAC,KAAM,WAAY,EAAE,CAAC,EAChD,UAAW,CAAC,EAAG,eAAgB,sBAAsB,EACrD,WAAY,GACZ,SAAU,CAAIM,CAA0B,CAC1C,CAAC,CACH,CACF,CACA,OAAON,CACT,GAAG,EAWH,IAAIO,IAAgC,IAAM,CACxC,MAAMA,UAAwBC,EAAgB,CAC5C,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIC,EACJ,OAAO,SAAiCC,EAAG,CACzC,OAAQD,IAAiCA,EAAkCE,GAAsBJ,CAAe,IAAIG,GAAKH,CAAe,CAC1I,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,UAAyBK,EAAkB,CAC9C,KAAML,EACN,UAAW,CAAC,CAAC,GAAI,kBAAmB,EAAE,CAAC,EACvC,OAAQ,CACN,QAAS,CAAIM,EAAa,KAAM,kBAAmB,SAAS,EAC5D,OAAQ,CAAIA,EAAa,2BAA4B,wBAAyB,SAAUC,EAAgB,CAC1G,EACA,WAAY,GACZ,SAAU,CAAIC,GAAmB,CAAC,CAChC,QAASP,GACT,YAAaD,CACf,CAAC,CAAC,EAAMS,GAA6BC,CAA0B,CACjE,CAAC,CACH,CACF,CACA,OAAOV,CACT,GAAG,EA4CH,IAAIW,IAA0B,IAAM,CAClC,MAAMA,UAAkBC,EAAU,CAChC,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIC,EACJ,OAAO,SAA2BC,EAAG,CACnC,OAAQD,IAA2BA,EAA4BE,GAAsBJ,CAAS,IAAIG,GAAKH,CAAS,CAClH,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,UAAyBK,EAAkB,CAC9C,KAAML,EACN,UAAW,CAAC,CAAC,GAAI,YAAa,EAAE,CAAC,EACjC,OAAQ,CACN,QAAS,CAAIM,EAAa,KAAM,mBAAoB,SAAS,EAC7D,KAAM,CAAIA,EAAa,KAAM,gBAAiB,MAAM,CACtD,EACA,WAAY,GACZ,SAAU,CAAIC,GAAmB,CAAC,CAChC,QAASN,GACT,YAAaD,CACf,CAAC,CAAC,EAAMQ,CAA0B,CACpC,CAAC,CACH,CACF,CACA,OAAOR,CACT,GAAG,EAKCS,IAA6B,IAAM,CACrC,MAAMA,UAAqBC,EAAa,CACtC,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIC,EACJ,OAAO,SAA8BR,EAAG,CACtC,OAAQQ,IAA8BA,EAA+BP,GAAsBK,CAAY,IAAIN,GAAKM,CAAY,CAC9H,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,UAAyBG,EAAkB,CAC9C,KAAMH,EACN,UAAW,CAAC,CAAC,gBAAgB,EAAG,CAAC,KAAM,iBAAkB,EAAE,CAAC,EAC5D,UAAW,CAAC,OAAQ,MAAO,EAAG,qBAAsB,4BAA4B,EAChF,SAAU,CAAC,cAAc,EACzB,WAAY,GACZ,SAAU,CAAIF,GAAmB,CAAC,CAChC,QAASG,GACT,YAAaD,CACf,CAAC,CAAC,EAAMD,EAA+BK,CAAmB,EAC1D,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,gBAAiB,EAAE,CAAC,EAC9B,SAAU,SAA+BC,EAAIC,EAAK,CAC5CD,EAAK,GACJE,GAAmB,EAAG,CAAC,CAE9B,EACA,aAAc,CAACC,EAAa,EAC5B,cAAe,CACjB,CAAC,CACH,CACF,CACA,OAAOR,CACT,GAAG,EA6CH,IAAIS,IAAuB,IAAM,CAC/B,MAAMA,UAAeC,EAAO,CAC1B,MAAO,CACL,KAAK,WAAuB,IAAM,CAChC,IAAIC,EACJ,OAAO,SAAwBC,EAAG,CAChC,OAAQD,IAAwBA,EAAyBE,GAAsBJ,CAAM,IAAIG,GAAKH,CAAM,CACtG,CACF,GAAG,CACL,CACA,MAAO,CACL,KAAK,UAAyBK,EAAkB,CAC9C,KAAML,EACN,UAAW,CAAC,CAAC,SAAS,EAAG,CAAC,KAAM,UAAW,EAAE,CAAC,EAC9C,UAAW,CAAC,OAAQ,MAAO,EAAG,cAAe,qBAAqB,EAClE,SAAU,CAAC,QAAQ,EACnB,WAAY,GACZ,SAAU,CAAIM,GAAmB,CAAC,CAChC,QAASL,GACT,YAAaD,CACf,CAAC,CAAC,EAAMO,EAA+BC,CAAmB,EAC1D,MAAO,EACP,KAAM,EACN,OAAQ,CAAC,CAAC,gBAAiB,EAAE,CAAC,EAC9B,SAAU,SAAyBC,EAAIC,EAAK,CACtCD,EAAK,GACJE,GAAmB,EAAG,CAAC,CAE9B,EACA,aAAc,CAACC,EAAa,EAC5B,cAAe,CACjB,CAAC,CACH,CACF,CACA,OAAOZ,CACT,GAAG,EA2FH,IAAIa,IAA+B,IAAM,CACvC,MAAMA,CAAe,CACnB,MAAO,CACL,KAAK,UAAO,SAAgC,EAAG,CAC7C,OAAO,IAAK,GAAKA,EACnB,CACF,CACA,MAAO,CACL,KAAK,UAAyBC,EAAiB,CAC7C,KAAMD,CACR,CAAC,CACH,CACA,MAAO,CACL,KAAK,UAAyBE,EAAiB,CAC7C,QAAS,CAACC,GAAiBC,GAAgBD,EAAe,CAC5D,CAAC,CACH,CACF,CACA,OAAOH,CACT,GAAG,EASGK,GAAmB,iBAcnBC,GAAN,cAAiCC,EAAW,CAE1C,IAAI,MAAO,CACT,OAAO,KAAK,MAAM,KACpB,CACA,IAAI,KAAKC,EAAM,CACbA,EAAO,MAAM,QAAQA,CAAI,EAAIA,EAAO,CAAC,EACrC,KAAK,MAAM,KAAKA,CAAI,EAGf,KAAK,4BACR,KAAK,YAAYA,CAAI,CAEzB,CAKA,IAAI,QAAS,CACX,OAAO,KAAK,QAAQ,KACtB,CACA,IAAI,OAAOC,EAAQ,CACjB,KAAK,QAAQ,KAAKA,CAAM,EAGnB,KAAK,4BACR,KAAK,YAAY,KAAK,IAAI,CAE9B,CAKA,IAAI,MAAO,CACT,OAAO,KAAK,KACd,CACA,IAAI,KAAKC,EAAM,CACb,KAAK,MAAQA,EACb,KAAK,0BAA0B,CACjC,CAWA,IAAI,WAAY,CACd,OAAO,KAAK,UACd,CACA,IAAI,UAAUC,EAAW,CACvB,KAAK,WAAaA,EAClB,KAAK,0BAA0B,CACjC,CACA,YAAYC,EAAc,CAAC,EAAG,CAC5B,MAAM,EAEN,KAAK,YAAc,IAAIC,EAAgB,CAAC,CAAC,EAEzC,KAAK,QAAU,IAAIA,EAAgB,EAAE,EAErC,KAAK,qBAAuB,IAAIC,EAKhC,KAAK,2BAA6B,KAUlC,KAAK,oBAAsB,CAACN,EAAMO,IAAiB,CACjD,IAAMC,EAAQR,EAAKO,CAAY,EAC/B,GAAIE,GAAeD,CAAK,EAAG,CACzB,IAAME,EAAc,OAAOF,CAAK,EAGhC,OAAOE,EAAcb,GAAmBa,EAAcF,CACxD,CACA,OAAOA,CACT,EAUA,KAAK,SAAW,CAACR,EAAME,IAAS,CAC9B,IAAMS,EAAST,EAAK,OACdU,EAAYV,EAAK,UACvB,MAAI,CAACS,GAAUC,GAAa,GACnBZ,EAEFA,EAAK,KAAK,CAACa,EAAGC,IAAM,CACzB,IAAIC,EAAS,KAAK,oBAAoBF,EAAGF,CAAM,EAC3CK,EAAS,KAAK,oBAAoBF,EAAGH,CAAM,EAIzCM,EAAa,OAAOF,EACpBG,EAAa,OAAOF,EACtBC,IAAeC,IACbD,IAAe,WACjBF,GAAU,IAERG,IAAe,WACjBF,GAAU,KAOd,IAAIG,EAAmB,EACvB,OAAIJ,GAAU,MAAQC,GAAU,KAE1BD,EAASC,EACXG,EAAmB,EACVJ,EAASC,IAClBG,EAAmB,IAEZJ,GAAU,KACnBI,EAAmB,EACVH,GAAU,OACnBG,EAAmB,IAEdA,GAAoBP,GAAa,MAAQ,EAAI,GACtD,CAAC,CACH,EAWA,KAAK,gBAAkB,CAACZ,EAAMC,IAAW,CAEvC,IAAMmB,EAAU,OAAO,KAAKpB,CAAI,EAAE,OAAO,CAACqB,EAAaC,IAO9CD,EAAcrB,EAAKsB,CAAG,EAAI,SAChC,EAAE,EAAE,YAAY,EAEbC,EAAoBtB,EAAO,KAAK,EAAE,YAAY,EACpD,OAAOmB,EAAQ,QAAQG,CAAiB,GAAK,EAC/C,EACA,KAAK,MAAQ,IAAIlB,EAAgBD,CAAW,EAC5C,KAAK,0BAA0B,CACjC,CAMA,2BAA4B,CAO1B,IAAMoB,EAAa,KAAK,MAAQC,GAAM,KAAK,MAAM,WAAY,KAAK,MAAM,WAAW,EAAIC,EAAG,IAAI,EACxFC,EAAa,KAAK,WAAaF,GAAM,KAAK,WAAW,KAAM,KAAK,qBAAsB,KAAK,WAAW,WAAW,EAAIC,EAAG,IAAI,EAC5HE,EAAa,KAAK,MAElBC,EAAeC,GAAc,CAACF,EAAY,KAAK,OAAO,CAAC,EAAE,KAAKG,EAAI,CAAC,CAAC/B,CAAI,IAAM,KAAK,YAAYA,CAAI,CAAC,CAAC,EAErGgC,EAAcF,GAAc,CAACD,EAAcL,CAAU,CAAC,EAAE,KAAKO,EAAI,CAAC,CAAC/B,CAAI,IAAM,KAAK,WAAWA,CAAI,CAAC,CAAC,EAEnGiC,EAAgBH,GAAc,CAACE,EAAaL,CAAU,CAAC,EAAE,KAAKI,EAAI,CAAC,CAAC/B,CAAI,IAAM,KAAK,UAAUA,CAAI,CAAC,CAAC,EAEzG,KAAK,4BAA4B,YAAY,EAC7C,KAAK,2BAA6BiC,EAAc,UAAUjC,GAAQ,KAAK,YAAY,KAAKA,CAAI,CAAC,CAC/F,CAMA,YAAYA,EAAM,CAIhB,YAAK,aAAe,KAAK,QAAU,MAAQ,KAAK,SAAW,GAAKA,EAAOA,EAAK,OAAOkC,GAAO,KAAK,gBAAgBA,EAAK,KAAK,MAAM,CAAC,EAC5H,KAAK,WACP,KAAK,iBAAiB,KAAK,aAAa,MAAM,EAEzC,KAAK,YACd,CAMA,WAAWlC,EAAM,CAEf,OAAK,KAAK,KAGH,KAAK,SAASA,EAAK,MAAM,EAAG,KAAK,IAAI,EAFnCA,CAGX,CAKA,UAAUA,EAAM,CACd,GAAI,CAAC,KAAK,UACR,OAAOA,EAET,IAAMmC,EAAa,KAAK,UAAU,UAAY,KAAK,UAAU,SAC7D,OAAOnC,EAAK,MAAMmC,EAAYA,EAAa,KAAK,UAAU,QAAQ,CACpE,CAMA,iBAAiBC,EAAoB,CACnC,QAAQ,QAAQ,EAAE,KAAK,IAAM,CAC3B,IAAMjC,EAAY,KAAK,UACvB,GAAKA,IAGLA,EAAU,OAASiC,EAEfjC,EAAU,UAAY,GAAG,CAC3B,IAAMkC,EAAgB,KAAK,KAAKlC,EAAU,OAASA,EAAU,QAAQ,EAAI,GAAK,EACxEmC,EAAe,KAAK,IAAInC,EAAU,UAAWkC,CAAa,EAC5DC,IAAiBnC,EAAU,YAC7BA,EAAU,UAAYmC,EAGtB,KAAK,qBAAqB,KAAK,EAEnC,CACF,CAAC,CACH,CAKA,SAAU,CACR,OAAK,KAAK,4BACR,KAAK,0BAA0B,EAE1B,KAAK,WACd,CAKA,YAAa,CACX,KAAK,4BAA4B,YAAY,EAC7C,KAAK,2BAA6B,IACpC,CACF,EC5/BA,IAAaC,IAAY,IAAA,CAAnB,MAAOA,CAAY,CAErBC,UAAUC,KAAkBC,EAAe,CAEvC,IAAIC,EAAYC,GAAsBC,2BAA2BJ,CAAK,EAEtE,MAAO,GAAGE,EAAUG,MAAMC,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,IAAIL,EAAUM,QAAQF,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,EAC1G,iDAPST,EAAY,CAAA,qDAAZA,EAAYW,KAAA,GAAAC,WAAA,EAAA,CAAA,CAAA,SAAZZ,CAAY,GAAA,ECDnB,IAAOa,GAAP,KAAiB,CASZ,OAAOC,WAAWC,EAAmBC,EAAc,CAEtD,GAAID,GAAQ,KAER,MAAO,GAGX,IAAIE,EAASD,EAEb,OAAIC,EAAOC,QAAQ,IAAI,GAAK,KAExBD,EAASA,EAAOE,WAAW,KAAMJ,EAAKK,QAAO,EAAGC,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,GAG3EL,EAAOC,QAAQ,IAAI,GAAK,KAExBD,EAASA,EAAOE,WAAW,MAAOJ,EAAKQ,SAAQ,EAAK,GAAGF,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,GAGlFL,EAAOC,QAAQ,MAAM,GAAK,KAE1BD,EAASA,EAAOE,WAAW,OAAQJ,EAAKS,YAAW,EAAGH,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,GAGjFL,EAAOC,QAAQ,IAAI,GAAK,KAExBD,EAASA,EAAOE,WAAW,KAAMJ,EAAKU,SAAQ,EAAGJ,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,GAG5EL,EAAOC,QAAQ,IAAI,GAAK,KAExBD,EAASA,EAAOE,WAAW,KAAMJ,EAAKW,WAAU,EAAGL,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,GAG9EL,EAAOC,QAAQ,IAAI,GAAK,KAExBD,EAASA,EAAOE,WAAW,KAAMJ,EAAKY,WAAU,EAAGN,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,GAG3EL,CACX,GChDE,IAAOW,GAAP,KAAmB,CAUd,OAAOC,aAAaC,EAAkCC,EAAoB,IAAG,CAEhF,IAAIC,EAAgB,IAAIC,MACpB,QACAF,EACA,eACAA,EACA,cACAA,EACA,qBACAA,EACA,iBACAA,EACA,mBACA;CAAI,EAGR,QAASG,KAAWJ,EACpB,CACIE,EAAcG,KAAKC,GAAWC,WAAWH,EAAQI,KAAM,YAAY,CAAC,EACpEN,EAAcG,KAAKJ,CAAS,EAE5BC,EAAcG,KAAKC,GAAWC,WAAWH,EAAQK,YAAa,OAAO,CAAC,EACtEP,EAAcG,KAAK,KAAK,EACxBH,EAAcG,KAAKC,GAAWC,WAAWH,EAAQM,UAAW,OAAO,CAAC,EACpER,EAAcG,KAAKJ,CAAS,EAE5BC,EAAcG,KAAKC,GAAWC,WAAWH,EAAQO,UAAW,OAAO,CAAC,EACpET,EAAcG,KAAK,KAAK,EACxBH,EAAcG,KAAKC,GAAWC,WAAWH,EAAQQ,QAAS,OAAO,CAAC,EAClEV,EAAcG,KAAKJ,CAAS,EAE5BC,EAAcG,KAAKC,GAAWC,WAAWH,EAAQK,YAAa,OAAO,CAAC,EACtEP,EAAcG,KAAK,KAAK,EACxBH,EAAcG,KAAKC,GAAWC,WAAWH,EAAQS,UAAW,OAAO,CAAC,EACpEX,EAAcG,KAAKJ,CAAS,EAE5B,IAAIa,EAAgBC,GAAsBC,2BAA2BZ,EAAQa,UAAU,EACvFf,EAAcG,KAAK,GAAGS,EAAcI,MAAMC,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,IAAIN,EAAcO,QAAQF,SAAQ,EAAGG,OAAO,EAAG,GAAG,CAAC,EAAE,EAC1HpB,EAAcG,KAAKJ,CAAS,EAE5B,IAAIsB,EAAoBR,GAAsBC,2BAA2BZ,EAAQoB,WAAW,EAC5FtB,EAAcG,KAAK,GAAGkB,EAAkBL,MAAMC,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,IAAIG,EAAkBF,QAAQF,SAAQ,EAAGG,OAAO,EAAG,GAAG,CAAC,EAAE,EAElIpB,EAAcG,KAAK;CAAI,CAC3B,CAEA,OAAO,IAAIoB,KAAK,CAACvB,EAAcwB,KAAK,EAAE,CAAC,EAAG,CAAEC,KAAM,UAAU,CAAE,CAClE,GC9DE,IAAOC,GAAP,KAAqB,CAShB,OAAaC,iBAAiBC,EAAgBC,EAAuB,QAAAC,EAAA,sBAGxE,IAAIC,EAAWC,SAASC,cAAc,GAAG,EAGrCC,EAAYC,IAAIC,gBAAgBR,CAAQ,EAG5CG,EAASM,KAAOH,EAGhBH,EAASO,SAAWT,EAGpBE,EAASQ,cAAc,IAAIC,WAAW,QAAS,CAAEC,QAAS,GAAMC,WAAY,GAAMC,KAAMC,MAAM,CAAE,CAAC,EAGjG,MAAM,IAAIC,QAAc,CAACC,EAASC,IAAQ,CAEtCC,WAAW,IAAMF,EAAO,EAAI,CAAC,CACjC,CAAC,EAGDX,IAAIc,gBAAgBf,CAAS,EAG7BH,EAASmB,OAAM,CACnB,4BEhCIC,EAAA,EAAA,KAAA,EAAA,EAAsDC,EAAA,EAAA,OAAA,EAAKC,EAAA,6BAC3DF,EAAA,EAAA,KAAA,EAAA,EAAuCC,EAAA,CAAA,eAA0CC,EAAA,0BAA1CC,EAAA,EAAAC,GAAAC,GAAA,EAAA,EAAAC,EAAAC,KAAA,gBAAA,CAAA,0BAKvCP,EAAA,EAAA,KAAA,EAAA,EAAsCC,EAAA,EAAA,UAAA,EAAQC,EAAA,6BAC9CF,EAAA,EAAA,KAAA,EAAA,EAAuCC,EAAA,CAAA,4BAA6EC,EAAA,0BAA7EC,EAAA,EAAAK,GAAA,GAAAH,GAAA,EAAA,EAAAI,EAAAC,YAAA,OAAA,EAAA,MAAAL,GAAA,EAAA,EAAAI,EAAAE,UAAA,OAAA,EAAA,EAAA,0BAKvCX,EAAA,EAAA,KAAA,EAAA,EAAsCC,EAAA,EAAA,QAAA,EAAMC,EAAA,6BAC5CF,EAAA,EAAA,KAAA,EAAA,EAAuCC,EAAA,CAAA,4BAAyEC,EAAA,0BAAzEC,EAAA,EAAAK,GAAA,GAAAH,GAAA,EAAA,EAAAO,EAAAC,UAAA,OAAA,EAAA,MAAAR,GAAA,EAAA,EAAAO,EAAAE,QAAA,OAAA,EAAA,EAAA,0BAKvCd,EAAA,EAAA,KAAA,EAAA,EAAsCC,EAAA,EAAA,UAAA,EAAQC,EAAA,6BAC9CF,EAAA,EAAA,KAAA,EAAA,EAAuCC,EAAA,CAAA,4BAA6EC,EAAA,0BAA7EC,EAAA,EAAAK,GAAA,GAAAH,GAAA,EAAA,EAAAU,EAAAC,YAAA,OAAA,EAAA,MAAAX,GAAA,EAAA,EAAAU,EAAAE,UAAA,OAAA,EAAA,EAAA,0BAKvCjB,EAAA,EAAA,KAAA,EAAA,EAAsDC,EAAA,EAAA,aAAA,EAAWC,EAAA,6BACjEF,EAAA,EAAA,KAAA,EAAA,EAAuCC,EAAA,CAAA,uBAAuCC,EAAA,0BAAvCC,EAAA,EAAAe,GAAA,GAAAC,GAAA,EAAA,EAAAC,EAAAC,UAAA,EAAA,IAAA,0BAKvCrB,EAAA,EAAA,KAAA,EAAA,EAAsDC,EAAA,EAAA,UAAA,EAAQC,EAAA,6BAC9DF,EAAA,EAAA,KAAA,EAAA,EAAuCC,EAAA,CAAA,uBAAwCC,EAAA,0BAAxCC,EAAA,EAAAe,GAAA,GAAAC,GAAA,EAAA,EAAAG,EAAAC,WAAA,EAAA,IAAA,yBAKvCC,EAAA,EAAA,KAAA,EAAA,sCACAxB,EAAA,EAAA,KAAA,EAAA,EAAuCyB,GAAA,QAAA,UAAA,CAAA,IAAAC,EAAAC,GAAAC,CAAA,EAAAC,UAAAC,EAAAC,EAAA,EAAA,OAAAC,GAASF,EAAAG,mBAAAP,EAAAnB,IAAA,CAAqC,CAAA,CAAA,EAAEN,EAAA,EAAA,GAAA,EAACC,EAAA,yBAG5FsB,EAAA,EAAA,KAAA,EAAA,wBACAA,EAAA,EAAA,KAAA,EAAA,ED/BJ,IAAaU,IAAgB,IAAA,CAAvB,MAAOA,CAAgB,CAazBC,YAAmBC,EAA4C,CAE3D,KAAKA,sBAAwBA,EAE7B,KAAKC,WAAa,IAAIC,GAEtB,KAAKC,iBAAmB,IAAIC,MACxB,OACA,SACA,OACA,SACA,WACA,YACA,QAAQ,EAGZ,KAAKC,eAAc,CACvB,CAOOC,iBAAe,CAElB,KAAKL,WAAWM,KAAO,KAAKC,IAChC,CA8BaX,mBAAmBY,EAAU,QAAAC,EAAA,sBAEtC,IAAIC,EAAa,GAAGF,EAAKG,QAAO,EAAGC,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,KAAKL,EAAKM,SAAQ,EAAK,GAAGF,SAAQ,EAAGC,SAAS,EAAG,GAAG,CAAC,IAAIL,EAAKO,YAAW,CAAE,GAErIC,QAAQ,uBAAoBN,CAAU,IAAI,IAE1C,MAAM,KAAKX,sBAAsBkB,cAAcT,CAAI,EAEnD,KAAKJ,eAAc,EAE3B,GAOac,aAAW,QAAAT,EAAA,sBAEpB,IAAIU,EAAUC,GAAaC,aAAa,KAAKrB,WAAWsB,IAAI,EAExDC,EAA8B,KAC9BC,EAA8B,KAElC,QAASC,KAAW,KAAKzB,WAAWsB,MAE5BC,GAAkB,MAAQE,EAAQvD,KAAaqD,KAE/CA,EAAiBE,EAAQvD,OAGzBsD,GAAkB,MAAQC,EAAQvD,KAAasD,KAE/CA,EAAiBC,EAAQvD,MAIjC,MAAMwD,GAAeC,iBACjBR,EACA,iBAAiBS,GAAWC,WAAWN,EAAgB,YAAY,CAAC,IAAIK,GAAWC,WAAWL,EAAgB,YAAY,CAAC,MAAM,CAEzI,GAOcpB,gBAAc,QAAAK,EAAA,sBAExB,IAAIqB,EAAW,MAAM,KAAK/B,sBAAsBgC,YAAY,IAAI7D,KAAK,IAAM,EAAG,CAAC,EAAG,IAAIA,IAAM,EAExF8D,EAAc,IAAI7B,MAEtB,QAASsB,KAAWK,EAEhBE,EAAYC,KAAKC,GAAsBC,2BAA2BV,CAAO,CAAC,EAG9E,KAAKzB,WAAWsB,KAAOU,CAC3B,mDAlISnC,GAAgBuC,EAAAF,EAAA,CAAA,CAAA,CAAA,+BAAhBrC,EAAgBwC,UAAA,CAAA,CAAA,aAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,MA+CdE,GAAO,CAAA,syBCjEtB9E,EAAA,EAAA,MAAA,CAAA,EAAoB,EAAA,IAAA,CAAA,EACAC,EAAA,EAAA,sBAAA,EAAoBC,EAAA,EACpCF,EAAA,EAAA,SAAA,CAAA,EAAQyB,GAAA,QAAA,UAAA,CAAA,OAASoD,EAAAtB,YAAA,CAAkB,CAAA,EAAEtD,EAAA,EAAA,QAAA,EAAMC,EAAA,EAAS,EAExDF,EAAA,EAAA,QAAA,CAAA,EAGI+E,EAAA,EAAA,CAAA,EACIC,EAAA,EAAAC,GAAA,EAAA,EAAA,KAAA,CAAA,EAAsD,EAAAC,GAAA,EAAA,EAAA,KAAA,CAAA,MAK1DH,EAAA,EAAA,CAAA,EACIC,EAAA,GAAAG,GAAA,EAAA,EAAA,KAAA,CAAA,EAAsC,GAAAC,GAAA,EAAA,EAAA,KAAA,CAAA,MAK1CL,EAAA,GAAA,CAAA,EACIC,EAAA,GAAAK,GAAA,EAAA,EAAA,KAAA,CAAA,EAAsC,GAAAC,GAAA,EAAA,EAAA,KAAA,CAAA,MAK1CP,EAAA,GAAA,EAAA,EACIC,EAAA,GAAAO,GAAA,EAAA,EAAA,KAAA,CAAA,EAAsC,GAAAC,GAAA,EAAA,EAAA,KAAA,CAAA,MAK1CT,EAAA,GAAA,EAAA,EACIC,EAAA,GAAAS,GAAA,EAAA,EAAA,KAAA,CAAA,EAAsD,GAAAC,GAAA,EAAA,EAAA,KAAA,CAAA,MAK1DX,EAAA,GAAA,EAAA,EACIC,EAAA,GAAAW,GAAA,EAAA,EAAA,KAAA,CAAA,EAAsD,GAAAC,GAAA,EAAA,EAAA,KAAA,CAAA,MAK1Db,EAAA,GAAA,EAAA,EACIC,EAAA,GAAAa,GAAA,EAAA,EAAA,KAAA,CAAA,EAAsC,GAAAC,GAAA,EAAA,EAAA,KAAA,EAAA,MAI1Cd,EAAA,GAAAe,GAAA,EAAA,EAAA,KAAA,EAAA,EAA4D,GAAAC,GAAA,EAAA,EAAA,KAAA,EAAA,EAEhE9F,EAAA,SA9CiBC,EAAA,CAAA,EAAA8F,EAAA,aAAApB,EAAAxC,UAAA,EA4COlC,EAAA,EAAA,EAAA8F,EAAA,kBAAApB,EAAAtC,gBAAA,EACapC,EAAA,EAAA8F,EAAA,mBAAApB,EAAAtC,gBAAA,kBDnCvB2D,GAAcC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAEC,GAAa/B,GAAAgC,GAAEC,GAAUC,EAAY,EAAAC,OAAA,CAAA;2DAAA,CAAA,CAAA,CAAA,SAItD/E,CAAgB,GAAA,EEdtB,IAAMgF,GAAiB,CAC1B,CAAEC,KAAM,UAAWC,UAAWC,EAAoB,EAClD,CAAEF,KAAM,UAAWC,UAAWE,EAAgB,EAC9C,CAAEH,KAAM,KAAMI,WAAY,SAAS,CAAE,ECIzC,IAAMC,GAAuB,gEAC7B,SAASC,GAAgBC,EAAS,CAChC,OAAOC,GAAM,IAAMC,GAAW,IAAI,MAAMF,CAAO,CAAC,CAAC,CACnD,CAIA,IAAMG,GAAN,KAAsB,CACpB,YAAYC,EAAe,CAEzB,GADA,KAAK,cAAgBA,EACjB,CAACA,EACH,KAAK,OAAS,KAAK,OAAS,KAAK,aAAeL,GAAgBD,EAAoB,MAC/E,CAEL,IAAMO,EADyBC,GAAUF,EAAe,kBAAkB,EACzB,KAAKG,EAAI,IAAMH,EAAc,UAAU,CAAC,EACnFI,EAAoBP,GAAM,IAAMQ,EAAGL,EAAc,UAAU,CAAC,EAC5DM,EAAwBC,GAAOH,EAAmBH,CAAiB,EACzE,KAAK,OAASK,EAAsB,KAAKE,GAAOC,GAAK,CAAC,CAACA,CAAC,CAAC,EACzD,KAAK,aAAe,KAAK,OAAO,KAAKC,GAAU,IAAMV,EAAc,gBAAgB,CAAC,CAAC,EAIrF,IAAMW,EAHYT,GAAUF,EAAe,SAAS,EAClB,KAAKG,EAAIS,GAASA,EAAM,IAAI,CAAC,EACrB,KAAKJ,GAAOI,GAASA,GAASA,EAAM,IAAI,CAAC,EAClD,KAAKC,GAAQ,CAAC,EAC/CF,EAAO,QAAQ,EACf,KAAK,OAASA,CAChB,CACF,CACA,YAAYG,EAAQC,EAAS,CAC3B,OAAO,KAAK,OAAO,KAAKC,EAAK,CAAC,EAAGC,EAAIC,GAAM,CACzCA,EAAG,YAAYC,EAAA,CACb,OAAAL,GACGC,EACJ,CACH,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,IAAG,EAAY,CACtC,CACA,yBAAyBK,EAAML,EAASM,EAAgB,CACtD,IAAMC,EAA4B,KAAK,0BAA0BD,CAAc,EACzEE,EAAc,KAAK,YAAYH,EAAML,CAAO,EAClD,OAAO,QAAQ,IAAI,CAACQ,EAAaD,CAAyB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAEE,CAAM,IAAMA,CAAM,CAC1F,CACA,eAAgB,CACd,OAAO,KAAK,MAAM,KAAK,OAAO,EAAI,GAAQ,CAC5C,CACA,aAAaJ,EAAM,CACjB,IAAIK,EACJ,OAAI,OAAOL,GAAS,SAClBK,EAAWb,GAASA,EAAM,OAASQ,EAEnCK,EAAWb,GAASQ,EAAK,SAASR,EAAM,IAAI,EAEvC,KAAK,OAAO,KAAKJ,GAAOiB,CAAQ,CAAC,CAC1C,CACA,gBAAgBL,EAAM,CACpB,OAAO,KAAK,aAAaA,CAAI,EAAE,KAAKJ,EAAK,CAAC,CAAC,CAC7C,CACA,0BAA0BU,EAAO,CAC/B,OAAO,KAAK,aAAa,qBAAqB,EAAE,KAAKlB,GAAOI,GAASA,EAAM,QAAUc,CAAK,EAAGV,EAAK,CAAC,EAAGb,EAAIS,GAAS,CACjH,GAAIA,EAAM,SAAW,OACnB,OAAOA,EAAM,OAEf,MAAM,IAAI,MAAMA,EAAM,KAAK,CAC7B,CAAC,CAAC,EAAE,UAAU,CAChB,CACA,IAAI,WAAY,CACd,MAAO,CAAC,CAAC,KAAK,aAChB,CACF,EAiFIe,IAAuB,IAAM,CAC/B,MAAMA,CAAO,CAKX,IAAI,WAAY,CACd,OAAO,KAAK,GAAG,SACjB,CACA,YAAYT,EAAI,CAId,GAHA,KAAK,GAAKA,EACV,KAAK,YAAc,KACnB,KAAK,oBAAsB,IAAIU,EAC3B,CAACV,EAAG,UAAW,CACjB,KAAK,SAAWW,GAChB,KAAK,mBAAqBA,GAC1B,KAAK,aAAeA,GACpB,MACF,CACA,KAAK,SAAW,KAAK,GAAG,aAAa,MAAM,EAAE,KAAK1B,EAAIP,GAAWA,EAAQ,IAAI,CAAC,EAC9E,KAAK,mBAAqB,KAAK,GAAG,aAAa,oBAAoB,EAAE,KAAKO,EAAIP,GAAWA,EAAQ,IAAI,CAAC,EACtG,KAAK,YAAc,KAAK,GAAG,aAAa,KAAKO,EAAI2B,GAAgBA,EAAa,WAAW,CAAC,EAC1F,IAAMC,EAA4B,KAAK,YAAY,KAAKrB,GAAUsB,GAAMA,EAAG,gBAAgB,CAAC,CAAC,EAC7F,KAAK,aAAeC,GAAMF,EAA2B,KAAK,mBAAmB,CAC/E,CAQA,oBAAoBG,EAAS,CAC3B,GAAI,CAAC,KAAK,GAAG,WAAa,KAAK,cAAgB,KAC7C,OAAO,QAAQ,OAAO,IAAI,MAAMxC,EAAoB,CAAC,EAEvD,IAAMyC,EAAc,CAClB,gBAAiB,EACnB,EACIC,EAAM,KAAK,aAAaF,EAAQ,gBAAgB,QAAQ,KAAM,GAAG,EAAE,QAAQ,KAAM,GAAG,CAAC,EACrFG,EAAuB,IAAI,WAAW,IAAI,YAAYD,EAAI,MAAM,CAAC,EACrE,QAASE,EAAI,EAAGA,EAAIF,EAAI,OAAQE,IAC9BD,EAAqBC,CAAC,EAAIF,EAAI,WAAWE,CAAC,EAE5C,OAAAH,EAAY,qBAAuBE,EAC5B,KAAK,YAAY,KAAK3B,GAAUsB,GAAMA,EAAG,UAAUG,CAAW,CAAC,EAAGnB,EAAK,CAAC,CAAC,EAAE,UAAU,EAAE,KAAKuB,IACjG,KAAK,oBAAoB,KAAKA,CAAG,EAC1BA,EACR,CACH,CAOA,aAAc,CACZ,GAAI,CAAC,KAAK,GAAG,UACX,OAAO,QAAQ,OAAO,IAAI,MAAM7C,EAAoB,CAAC,EAEvD,IAAM8C,EAAgBD,GAAO,CAC3B,GAAIA,IAAQ,KACV,MAAM,IAAI,MAAM,uCAAuC,EAEzD,OAAOA,EAAI,YAAY,EAAE,KAAKE,GAAW,CACvC,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,qBAAqB,EAEvC,KAAK,oBAAoB,KAAK,IAAI,CACpC,CAAC,CACH,EACA,OAAO,KAAK,aAAa,KAAKzB,EAAK,CAAC,EAAGN,GAAU8B,CAAa,CAAC,EAAE,UAAU,CAC7E,CACA,aAAaE,EAAO,CAClB,OAAO,KAAKA,CAAK,CACnB,CACA,MAAO,CACL,KAAK,UAAO,SAAwB,EAAG,CACrC,OAAO,IAAK,GAAKf,GAAWgB,EAAS5C,EAAe,CAAC,CACvD,CACF,CACA,MAAO,CACL,KAAK,WAA0B6C,EAAmB,CAChD,MAAOjB,EACP,QAASA,EAAO,SAClB,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAaCkB,IAAyB,IAAM,CACjC,MAAMA,CAAS,CAKb,IAAI,WAAY,CACd,OAAO,KAAK,GAAG,SACjB,CACA,YAAY3B,EAAI,CAEd,GADA,KAAK,GAAKA,EACN,CAACA,EAAG,UAAW,CACjB,KAAK,eAAiBW,GACtB,KAAK,cAAgBA,GACrB,MACF,CACA,KAAK,eAAiB,KAAK,GAAG,aAAa,CAAC,mBAAoB,8BAA+B,gBAAiB,yBAAyB,CAAC,EAC1I,KAAK,cAAgB,KAAK,GAAG,aAAa,qBAAqB,CACjE,CAUA,gBAAiB,CACf,GAAI,CAAC,KAAK,GAAG,UACX,OAAO,QAAQ,OAAO,IAAI,MAAMnC,EAAoB,CAAC,EAEvD,IAAMgC,EAAQ,KAAK,GAAG,cAAc,EACpC,OAAO,KAAK,GAAG,yBAAyB,oBAAqB,CAC3D,MAAAA,CACF,EAAGA,CAAK,CACV,CAyBA,gBAAiB,CACf,GAAI,CAAC,KAAK,GAAG,UACX,OAAO,QAAQ,OAAO,IAAI,MAAMhC,EAAoB,CAAC,EAEvD,IAAMgC,EAAQ,KAAK,GAAG,cAAc,EACpC,OAAO,KAAK,GAAG,yBAAyB,kBAAmB,CACzD,MAAAA,CACF,EAAGA,CAAK,CACV,CACA,MAAO,CACL,KAAK,UAAO,SAA0B,EAAG,CACvC,OAAO,IAAK,GAAKmB,GAAaF,EAAS5C,EAAe,CAAC,CACzD,CACF,CACA,MAAO,CACL,KAAK,WAA0B6C,EAAmB,CAChD,MAAOC,EACP,QAASA,EAAS,SACpB,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAYH,IAAMC,GAAsB,IAAIC,EAAoD,EAAE,EACtF,SAASC,GAAmBC,EAAUC,EAAQhB,EAASiB,EAAY,CACjE,MAAO,IAAM,CACX,GAAI,EAAEC,GAAkBD,CAAU,GAAK,kBAAmB,WAAajB,EAAQ,UAAY,IACzF,OAKF,UAAU,cAAc,iBAAiB,mBAAoB,IAAM,CAC7D,UAAU,cAAc,aAAe,MACzC,UAAU,cAAc,WAAW,YAAY,CAC7C,OAAQ,YACV,CAAC,CAEL,CAAC,EACD,IAAImB,EACJ,GAAI,OAAOnB,EAAQ,sBAAyB,WAC1CmB,EAAmBnB,EAAQ,qBAAqB,MAC3C,CACL,GAAM,CAACoB,EAAU,GAAGC,CAAI,GAAKrB,EAAQ,sBAAwB,4BAA4B,MAAM,GAAG,EAClG,OAAQoB,EAAU,CAChB,IAAK,sBACHD,EAAmBhD,EAAG,IAAI,EAC1B,MACF,IAAK,oBACHgD,EAAmBG,GAAiB,CAACD,EAAK,CAAC,GAAK,CAAC,EACjD,MACF,IAAK,qBACHF,EAAoBE,EAAK,CAAC,EAA2BtB,GAAMwB,GAAWR,CAAQ,EAAGO,GAAiB,CAACD,EAAK,CAAC,CAAC,CAAC,EAA7EE,GAAWR,CAAQ,EACjD,MACF,QAEE,MAAM,IAAI,MAAM,gDAAgDf,EAAQ,oBAAoB,EAAE,CAClG,CACF,CAKee,EAAS,IAAIS,CAAM,EAC3B,kBAAkB,IAAML,EAAiB,KAAKrC,EAAK,CAAC,CAAC,EAAE,UAAU,IAAM,UAAU,cAAc,SAASkC,EAAQ,CACrH,MAAOhB,EAAQ,KACjB,CAAC,EAAE,MAAMyB,GAAO,QAAQ,MAAM,2CAA4CA,CAAG,CAAC,CAAC,CAAC,CAClF,CACF,CACA,SAASH,GAAiBI,EAAS,CACjC,OAAOvD,EAAG,IAAI,EAAE,KAAKwD,GAAMD,CAAO,CAAC,CACrC,CACA,SAASH,GAAWR,EAAU,CAE5B,OADeA,EAAS,IAAIa,EAAc,EAC5B,SAAS,KAAKtD,GAAOuD,GAAUA,CAAM,CAAC,CACtD,CACA,SAASC,GAAuBC,EAAMd,EAAY,CAChD,OAAO,IAAIpD,GAAgBqD,GAAkBD,CAAU,GAAKc,EAAK,UAAY,GAAQ,UAAU,cAAgB,MAAS,CAC1H,CAaA,IAAMC,GAAN,KAA4B,CAAC,EAkB7B,SAASC,GAAqBjB,EAAQhB,EAAU,CAAC,EAAG,CAClD,OAAOkC,GAAyB,CAACzC,GAAQkB,GAAU,CACjD,QAASC,GACT,SAAUI,CACZ,EAAG,CACD,QAASgB,GACT,SAAUhC,CACZ,EAAG,CACD,QAASnC,GACT,WAAYiE,GACZ,KAAM,CAACE,GAAuBG,EAAW,CAC3C,EAAG,CACD,QAASC,GACT,WAAYtB,GACZ,KAAM,CAACuB,GAAUzB,GAAQoB,GAAuBG,EAAW,EAC3D,MAAO,EACT,CAAC,CAAC,CACJ,CChcA,IAAMG,GAAmB,IACrBC,IAA8C,IAAM,CACtD,MAAMA,CAA8B,CAKlC,YAAYC,EAAKC,EAAUC,EAAMC,EAAeC,EAAY,CAC1D,KAAK,IAAMJ,EACX,KAAK,SAAWC,EAChB,KAAK,KAAOC,EACZ,KAAK,cAAgBC,EACrB,KAAK,WAAaC,EAClB,KAAK,wBAA0B,KAC/B,KAAK,UAAYC,EAAOC,GAA2B,CACjD,SAAU,EACZ,CAAC,CACH,CAEA,aAAc,CAOZ,KAAK,SAAS,MAAM,CACtB,CAIA,UAAW,CAET,OADmB,KAAK,YAAc,OAAO,qBAA6B,GACxD,MAAMC,GAAK,CAC3B,MAAM,IAAIC,EAAc,KAA2G,EAAkN,CACvV,CAAC,EAAE,KAAK,CAAC,CACP,mBAAAC,EACA,+BAAAC,CACF,IAAM,CAGJ,KAAK,QAAUD,EAAc,KAAK,cAAe,KAAK,IAAK,KAAK,SAAS,EACzE,IAAME,EAAkB,IAAID,EAA0B,KAAK,SAAU,KAAK,QAAS,KAAK,IAAI,EAC5F,YAAK,SAAWC,EACTA,CACT,CAAC,CACH,CASA,eAAeC,EAAaC,EAAc,CACxC,IAAMC,EAAW,KAAK,SAAS,eAAeF,EAAaC,CAAY,EACvE,GAAIC,EAAS,aAAU,EAErB,OAAOA,EAGL,OAAOA,EAAS,uBAA0B,YAC5CA,EAAS,sBAAwB,IAGnC,IAAMC,EAAkB,IAAIC,GAA0BF,CAAQ,EAG9D,OAAID,GAAc,MAAO,WAAgB,CAAC,KAAK,0BAC7C,KAAK,wBAA0B,KAAK,SAAS,GAE/C,KAAK,yBAAyB,KAAKI,GAA4B,CAC7D,IAAMC,EAAoBD,EAAyB,eAAeL,EAAaC,CAAY,EAC3FE,EAAgB,IAAIG,CAAiB,CACvC,CAAC,EAAE,MAAMX,GAAK,CAEZQ,EAAgB,IAAID,CAAQ,CAC9B,CAAC,EACMC,CACT,CACA,OAAQ,CACN,KAAK,SAAS,QAAQ,CACxB,CACA,KAAM,CACJ,KAAK,SAAS,MAAM,CACtB,CACA,mBAAoB,CAClB,OAAO,KAAK,SAAS,oBAAoB,GAAK,QAAQ,QAAQ,CAChE,CACA,MAAO,CACL,KAAK,UAAO,SAA+C,EAAG,CACzDI,GAAiB,CACtB,CACF,CACA,MAAO,CACL,KAAK,WAA0BC,EAAmB,CAChD,MAAOrB,EACP,QAASA,EAA8B,SACzC,CAAC,CACH,CACF,CACA,OAAOA,CACT,GAAG,EAQGiB,GAAN,KAAgC,CAC9B,YAAYf,EAAU,CACpB,KAAK,SAAWA,EAEhB,KAAK,OAAS,CAAC,EACf,KAAK,WAAQ,CACf,CACA,IAAIoB,EAAM,CAER,GADA,KAAK,SAAWA,EACZ,KAAK,SAAW,KAAM,CAGxB,QAAWC,KAAM,KAAK,OACpBA,EAAGD,CAAI,EAIT,KAAK,OAAS,IAChB,CACF,CACA,IAAI,MAAO,CACT,OAAO,KAAK,SAAS,IACvB,CACA,SAAU,CACR,KAAK,OAAS,KACd,KAAK,SAAS,QAAQ,CACxB,CACA,cAAcE,EAAMC,EAAW,CAC7B,OAAO,KAAK,SAAS,cAAcD,EAAMC,CAAS,CACpD,CACA,cAAcC,EAAO,CACnB,OAAO,KAAK,SAAS,cAAcA,CAAK,CAC1C,CACA,WAAWA,EAAO,CAChB,OAAO,KAAK,SAAS,WAAWA,CAAK,CACvC,CACA,IAAI,aAAc,CAChB,OAAO,KAAK,SAAS,WACvB,CACA,YAAYC,EAAQC,EAAU,CAC5B,KAAK,SAAS,YAAYD,EAAQC,CAAQ,CAC5C,CACA,aAAaD,EAAQC,EAAUC,EAAUC,EAAQ,CAC/C,KAAK,SAAS,aAAaH,EAAQC,EAAUC,EAAUC,CAAM,CAC/D,CACA,YAAYH,EAAQI,EAAUC,EAAe,CAC3C,KAAK,SAAS,YAAYL,EAAQI,EAAUC,CAAa,CAC3D,CACA,kBAAkBC,EAAgBC,EAAiB,CACjD,OAAO,KAAK,SAAS,kBAAkBD,EAAgBC,CAAe,CACxE,CACA,WAAWC,EAAM,CACf,OAAO,KAAK,SAAS,WAAWA,CAAI,CACtC,CACA,YAAYA,EAAM,CAChB,OAAO,KAAK,SAAS,YAAYA,CAAI,CACvC,CACA,aAAaC,EAAIZ,EAAME,EAAOD,EAAW,CACvC,KAAK,SAAS,aAAaW,EAAIZ,EAAME,EAAOD,CAAS,CACvD,CACA,gBAAgBW,EAAIZ,EAAMC,EAAW,CACnC,KAAK,SAAS,gBAAgBW,EAAIZ,EAAMC,CAAS,CACnD,CACA,SAASW,EAAIZ,EAAM,CACjB,KAAK,SAAS,SAASY,EAAIZ,CAAI,CACjC,CACA,YAAYY,EAAIZ,EAAM,CACpB,KAAK,SAAS,YAAYY,EAAIZ,CAAI,CACpC,CACA,SAASY,EAAIC,EAAOX,EAAOY,EAAO,CAChC,KAAK,SAAS,SAASF,EAAIC,EAAOX,EAAOY,CAAK,CAChD,CACA,YAAYF,EAAIC,EAAOC,EAAO,CAC5B,KAAK,SAAS,YAAYF,EAAIC,EAAOC,CAAK,CAC5C,CACA,YAAYF,EAAIZ,EAAME,EAAO,CAGvB,KAAK,aAAaF,CAAI,GACxB,KAAK,OAAO,KAAKT,GAAYA,EAAS,YAAYqB,EAAIZ,EAAME,CAAK,CAAC,EAEpE,KAAK,SAAS,YAAYU,EAAIZ,EAAME,CAAK,CAC3C,CACA,SAASS,EAAMT,EAAO,CACpB,KAAK,SAAS,SAASS,EAAMT,CAAK,CACpC,CACA,OAAOa,EAAQC,EAAWC,EAAU,CAGlC,OAAI,KAAK,aAAaD,CAAS,GAC7B,KAAK,OAAO,KAAKzB,GAAYA,EAAS,OAAOwB,EAAQC,EAAWC,CAAQ,CAAC,EAEpE,KAAK,SAAS,OAAOF,EAAQC,EAAWC,CAAQ,CACzD,CACA,aAAaC,EAAiB,CAE5B,OAAO,KAAK,SAAW,MAAQA,EAAgB,WAAW3C,EAAgB,CAC5E,CACF,EA8BA,SAAS4C,GAAuBC,EAAO,aAAc,CACnD,OAAAC,GAAwB,mBAAmB,EACpCC,GAAyB,CAAC,CAC/B,QAASC,GACT,WAAY,CAAC9C,EAAKc,EAAUZ,IACnB,IAAIH,GAA8BC,EAAKc,EAAUZ,EAAMyC,CAAI,EAEpE,KAAM,CAACI,EAAUC,GAAsBC,CAAM,CAC/C,EAAG,CACD,QAASC,GACT,SAAUP,IAAS,OAAS,iBAAmB,mBACjD,CAAC,CAAC,CACJ,CC9PO,IAAMQ,GAA+B,CACxCC,UAAW,CACPC,GAAcC,GAAQC,GAAgB,CAAE,EACxCC,GACI,iBACA,CACIC,QAAS,CAACC,GAAS,EACnBC,qBAAsB,2BACzB,EACFC,GAAsB,CAAE,GCHnC,IAAaC,IAAY,IAAA,CAAnB,MAAOA,CAAY,CAErBC,YAAmBC,EAAc,CAE7B,KAAKC,WAAa,UAElBD,EAAOE,OAAOC,UACTC,GAAS,CACFA,aAAiBC,KAEbD,EAAME,IAAIC,QAAQ,SAAS,IAAM,GAEjC,KAAKN,WAAa,UAEbG,EAAME,IAAIC,QAAQ,SAAS,IAAM,KAEtC,KAAKN,WAAa,WAG9B,CAAC,CAGT,iDAtBSH,GAAYU,EAAAC,EAAA,CAAA,CAAA,CAAA,+BAAZX,EAAYY,UAAA,CAAA,CAAA,UAAA,CAAA,EAAAC,WAAA,GAAAC,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA,OAAA,WAAA,EAAA,CAAA,OAAA,WAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICbzBE,EAAA,EAAA,MAAA,CAAA,EAAoB,EAAA,IAAA,CAAA,EACI,EAAA,KAAA,EACmCC,EAAA,EAAA,SAAA,EAAOC,EAAA,EAAM,EAEpEF,EAAA,EAAA,IAAA,CAAA,EAAoB,EAAA,KAAA,EACmCC,EAAA,EAAA,SAAA,EAAOC,EAAA,EAAM,EAChE,EAERF,EAAA,EAAA,MAAA,CAAA,EACIG,EAAA,EAAA,eAAA,EACJD,EAAA,SARaE,EAAA,CAAA,EAAAC,GAAA,SAAAN,EAAAlB,YAAA,SAAA,EAGAuB,EAAA,CAAA,EAAAC,GAAA,SAAAN,EAAAlB,YAAA,SAAA,kBDICyB,EAAY,EAAAC,OAAA,CAAA;uDAAA,CAAA,CAAA,CAAA,SAIb7B,CAAY,GAAA,EETzB8B,GAAqBC,GAAcC,EAAS,EACzCC,MAAOC,GAAQC,QAAQC,MAAMF,CAAG,CAAC","names":["GenericBrowserDomAdapter","DomAdapter","BrowserDomAdapter","_BrowserDomAdapter","setRootDomAdapter","el","evt","listener","node","tagName","doc","target","href","getBaseElementHref","relativePath","baseElement","name","parseCookieValue","url","BrowserXhr","ɵɵdefineInjectable","EVENT_MANAGER_PLUGINS","InjectionToken","EventManager","plugins","_zone","plugin","element","eventName","handler","RuntimeError","ɵɵinject","NgZone","EventManagerPlugin","_doc","APP_ID_ATTRIBUTE_NAME","SharedStylesHost","doc","appId","nonce","platformId","isPlatformServer","styles","style","styleNodesInDOM","node","hostNode","host","styleRef","styleMap","delta","map","styleRefValue","styleEl","styleElRef","hostNodes","DOCUMENT","APP_ID","CSP_NONCE","PLATFORM_ID","NAMESPACE_URIS","COMPONENT_REGEX","COMPONENT_VARIABLE","HOST_ATTR","CONTENT_ATTR","REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT","REMOVE_STYLES_ON_COMPONENT_DESTROY","shimContentAttribute","componentShortId","shimHostAttribute","shimStylesContent","compId","s","DomRendererFactory2","eventManager","sharedStylesHost","removeStylesOnCompDestroy","ngZone","DefaultDomRenderer2","type","ViewEncapsulation$1","__spreadProps","__spreadValues","renderer","EmulatedEncapsulationDomRenderer2","NoneEncapsulationDomRenderer","rendererByCompId","platformIsServer","ShadowDomRenderer","name","namespace","value","parent","newChild","isTemplateNode","refChild","oldChild","selectorOrNode","preserveContent","el","namespaceUri","flags","RendererStyleFlags2","target","event","callback","getDOM","eventHandler","isTemplateNode","node","ShadowDomRenderer","DefaultDomRenderer2","eventManager","sharedStylesHost","hostEl","component","doc","ngZone","nonce","platformIsServer","styles","shimStylesContent","style","styleEl","parent","newChild","refChild","oldChild","NoneEncapsulationDomRenderer","removeStylesOnCompDestroy","compId","EmulatedEncapsulationDomRenderer2","appId","shimContentAttribute","shimHostAttribute","element","name","el","DomEventsPlugin","EventManagerPlugin","eventName","handler","target","callback","ɵɵinject","DOCUMENT","ɵɵdefineInjectable","MODIFIER_KEYS","_keyMap","MODIFIER_KEY_GETTERS","event","KeyEventsPlugin","parsedEvent","outsideHandler","getDOM","parts","domEventName","key","fullKey","codeIX","modifierName","index","result","fullKeyCode","keycode","modifierGetter","zone","keyName","bootstrapApplication","rootComponent","options","internalCreateApplication","__spreadValues","createProvidersConfig","createProvidersConfig","options","BROWSER_MODULE_PROVIDERS","INTERNAL_BROWSER_PLATFORM_PROVIDERS","initDomAdapter","BrowserDomAdapter","errorHandler","ErrorHandler","_document","setDocument","INTERNAL_BROWSER_PLATFORM_PROVIDERS","PLATFORM_ID","PLATFORM_BROWSER_ID","PLATFORM_INITIALIZER","DOCUMENT","BROWSER_MODULE_PROVIDERS","INJECTOR_SCOPE","ErrorHandler","errorHandler","EVENT_MANAGER_PLUGINS","DomEventsPlugin","DOCUMENT","NgZone","PLATFORM_ID","KeyEventsPlugin","DomRendererFactory2","SharedStylesHost","EventManager","RendererFactory2","XhrFactory","BrowserXhr","Title","_doc","newTitle","ɵɵinject","DOCUMENT","ɵɵdefineInjectable","DomSanitizer","ɵɵdefineInjectable","ɵɵinject","DomSanitizerImpl","_doc","ctx","value","SecurityContext","allowSanitizationBypassAndThrow","unwrapSafeValue","_sanitizeHtml","RuntimeError","_sanitizeUrl","bypassSanitizationTrustHtml","bypassSanitizationTrustStyle","bypassSanitizationTrustScript","bypassSanitizationTrustUrl","bypassSanitizationTrustResourceUrl","DOCUMENT","PRIMARY_OUTLET","RouteTitleKey","ParamsAsMap","params","name","v","convertToParamMap","defaultUrlMatcher","segments","segmentGroup","route","parts","posParams","index","part","segment","shallowEqualArrays","a","b","i","shallowEqual","k1","getDataKeys","k2","key","equalArraysOrString","obj","aSorted","bSorted","val","last","wrapIntoObservable","value","isObservable","isPromise","from","of","pathCompareMap","equalSegmentGroups","containsSegmentGroup","paramCompareMap","equalParams","containsParams","containsTree","container","containee","options","matrixParams","equalPath","matrixParamsMatch","c","containsSegmentGroupHelper","containeePaths","current","next","containerPaths","containeeSegment","UrlTree","root","UrlSegmentGroup","queryParams","fragment","DEFAULT_SERIALIZER","children","serializePaths","UrlSegment","path","parameters","serializePath","equalSegments","as","bs","mapChildrenIntoArray","fn","res","childOutlet","child","UrlSerializer","ɵɵdefineInjectable","DefaultUrlSerializer","url","p","UrlParser","tree","serializeSegment","query","serializeQueryParams","encodeUriFragment","primary","k","encodeUriString","s","encodeUriQuery","encodeUriSegment","decode","decodeQuery","serializeMatrixParams","strParams","SEGMENT_RE","matchSegments","str","match","MATRIX_PARAM_SEGMENT_RE","matchMatrixKeySegments","QUERY_PARAM_RE","matchQueryParams","QUERY_PARAM_VALUE_RE","matchUrlQueryParamValue","RuntimeError","valueMatch","decodedKey","decodedVal","currentVal","allowPrimary","outletName","createRoot","rootCandidate","squashSegmentGroup","newChildren","childCandidate","grandChildOutlet","grandChild","mergeTrivialChildren","isUrlTree","createUrlTreeFromSnapshot","relativeTo","commands","relativeToUrlSegmentGroup","createSegmentGroupFromRoute","createUrlTreeFromSegmentGroup","targetGroup","createSegmentGroupFromRouteRecursive","currentRoute","childOutlets","childSnapshot","rootSegmentGroup","nav","computeNavigation","position","findStartingPositionForTargetGroup","newSegmentGroup","updateSegmentGroupChildren","updateSegmentGroup","isMatrixParams","command","isCommandWithOutlets","oldRoot","oldSegmentGroup","qp","replaceSegment","newRoot","oldSegment","newSegment","Navigation","isAbsolute","numberOfDoubleDots","cmdWithOutlet","cmd","cmdIdx","outlets","urlPart","partIndex","Position","processChildren","target","modifier","createPositionApplyingDoubleDots","group","g","ci","dd","getOutlets","startIndex","m","prefixedWith","slicedCommands","createNewSegmentGroup","childrenOfEmptyChild","outlet","currentCommandIndex","currentPathIndex","noMatch","curr","compare","paths","createNewSegmentChildren","stringify","IMPERATIVE_NAVIGATION","EventType","RouterEvent","id","NavigationStart","navigationTrigger","restoredState","NavigationEnd","urlAfterRedirects","NavigationCancellationCode","NavigationSkippedCode","NavigationCancel","reason","code","NavigationSkipped","NavigationError","error","RoutesRecognized","state","GuardsCheckStart","GuardsCheckEnd","shouldActivate","ResolveStart","ResolveEnd","RouteConfigLoadStart","RouteConfigLoadEnd","ChildActivationStart","snapshot","ChildActivationEnd","ActivationStart","ActivationEnd","BeforeActivateRoutes","RedirectRequest","url","OutletContext","ChildrenOutletContexts","childName","outlet","context","contexts","ɵɵdefineInjectable","Tree","root","t","p","n","findNode","findPath","c","cc","s","value","node","child","path","TreeNode","children","nodeChildrenAsMap","map","RouterState","snapshot","setRouterState","createEmptyState","rootComponent","createEmptyStateSnapshot","emptyUrl","BehaviorSubject","UrlSegment","emptyParams","emptyData","emptyQueryParams","fragment","activated","ActivatedRoute","PRIMARY_OUTLET","ActivatedRouteSnapshot","RouterStateSnapshot","urlSubject","paramsSubject","queryParamsSubject","fragmentSubject","dataSubject","component","futureSnapshot","d","RouteTitleKey","of","convertToParamMap","getInherited","route","parent","paramsInheritanceStrategy","inherited","routeConfig","__spreadValues","hasStaticTitle","url","params","queryParams","data","resolve","segment","matched","serializeNode","state","advanceActivatedRoute","currentSnapshot","nextSnapshot","shallowEqual","shallowEqualArrays","equalParamsAndUrlSegments","a","b","equalUrlParams","equalSegments","parentsMismatch","config","RouterOutlet","EventEmitter","inject","ViewContainerRef","ChangeDetectorRef","EnvironmentInjector","INPUT_BINDER","changes","firstChange","previousValue","outletName","RuntimeError","cmp","ref","activatedRoute","environmentInjector","location","childContexts","injector","OutletInjector","ɵɵdefineDirective","ɵɵNgOnChangesFeature","_OutletInjector","parentInjector","token","notFoundValue","InjectionToken","createRouterState","routeReuseStrategy","curr","prevState","root","createNode","RouterState","value","children","createOrReuseChildren","TreeNode","detachedRouteHandle","tree","c","createActivatedRoute","child","p","ActivatedRoute","BehaviorSubject","NAVIGATION_CANCELING_ERROR","redirectingNavigationError","urlSerializer","redirect","redirectTo","navigationBehaviorOptions","isUrlTree","error","navigationCancelingError","NavigationCancellationCode","message","code","isRedirectingNavigationCancelingError","isNavigationCancelingError","ɵEmptyOutletComponent","ɵɵdefineComponent","ɵɵStandaloneFeature","rf","ctx","ɵɵelement","RouterOutlet","getOrCreateRouteInjectorIfNeeded","route","currentInjector","createEnvironmentInjector","standardizeConfig","r","children","c","__spreadProps","__spreadValues","PRIMARY_OUTLET","ɵEmptyOutletComponent","getOutlet","route","sortByMatchingOutlets","routes","outletName","sortedConfig","getClosestRouteInjector","snapshot","s","activateRoutes","rootContexts","routeReuseStrategy","forwardEvent","inputBindingEnabled","map","t","ActivateRoutes","futureState","currState","parentContexts","futureRoot","currRoot","advanceActivatedRoute","futureNode","currNode","contexts","children","nodeChildrenAsMap","futureChild","childOutletName","v","parentContext","future","curr","context","route","treeNode","componentRef","c","ActivationEnd","ChildActivationEnd","stored","injector","getClosestRouteInjector","CanActivate","path","CanDeactivate","component","getAllRouteGuards","getChildRouteGuards","getCanActivateChild","p","canActivateChild","getTokenOrFunctionIdentity","tokenOrFunction","NOT_FOUND","result","isInjectable","futurePath","checks","prevChildren","getRouteGuards","k","deactivateRouteAndItsChildren","shouldRun","shouldRunGuardsAndResolvers","mode","equalPath","shallowEqual","equalParamsAndUrlSegments","childName","node","isFunction","isBoolean","isCanLoad","guard","isCanActivate","isCanActivateChild","isCanDeactivate","isCanMatch","isEmptyError","e","EmptyError","INITIAL_VALUE","prioritizedGuardValue","switchMap","obs","combineLatest","o","take","startWith","results","UrlTree","filter","item","checkGuards","mergeMap","targetSnapshot","currentSnapshot","canActivateChecks","canDeactivateChecks","of","__spreadProps","__spreadValues","runCanDeactivateChecks","canDeactivate","runCanActivateChecks","guardsResult","futureRSS","currRSS","from","check","runCanDeactivate","first","futureSnapshot","concatMap","concat","fireChildActivationStart","fireActivationStart","runCanActivateChild","runCanActivate","snapshot","ActivationStart","ChildActivationStart","futureARS","canActivate","canActivateObservables","defer","closestInjector","guardVal","runInInjectionContext","wrapIntoObservable","canActivateChildGuardsMapped","_","d","guardsMapped","currARS","canDeactivateObservables","runCanLoadGuards","segments","urlSerializer","canLoad","canLoadObservables","injectionToken","redirectIfUrlTree","pipe","tap","isUrlTree","redirectingNavigationError","runCanMatchGuards","canMatch","canMatchObservables","NoMatch","segmentGroup","AbsoluteRedirect","urlTree","noMatch$1","throwError","namedOutletsRedirect","redirectTo","throwError","RuntimeError","canLoadFails","route","navigationCancelingError","NavigationCancellationCode","ApplyRedirects","urlSerializer","urlTree","res","c","of","PRIMARY_OUTLET","segments","posParams","newTree","AbsoluteRedirect","newRoot","UrlTree","redirectToParams","actualParams","k","v","sourceName","group","updatedSegments","children","name","child","UrlSegmentGroup","redirectToSegments","actualSegments","s","redirectToUrlSegment","pos","idx","noMatch","matchWithChecks","segmentGroup","injector","result","match","getOrCreateRouteInjectorIfNeeded","runCanMatchGuards","map","__spreadValues","createWildcardMatchResult","defaultUrlMatcher","parameters","last","split","consumedSegments","slicedSegments","config","containsEmptyPathMatchesWithNamedOutlets","createChildrenForEmptyPaths","containsEmptyPathMatches","addEmptyPathsToChildrenIfNeeded","routes","r","emptyPathMatch","getOutlet","primarySegment","isImmediateMatch","rawSegment","outlet","noLeftoversInUrl","NoLeftoversInUrl","recognize$1","configLoader","rootComponentType","paramsInheritanceStrategy","Recognizer","MAX_ALLOWED_REDIRECTS","e","rootSegmentGroup","root","ActivatedRouteSnapshot","rootNode","TreeNode","routeState","RouterStateSnapshot","tree","createUrlTreeFromSnapshot","catchError","NoMatch","routeNode","parent","i","getInherited","n","childOutlets","from","concatMap","childOutlet","sortedConfig","sortByMatchingOutlets","scan","outletChildren","defaultIfEmpty","mergeMap","noMatch$1","mergedChildren","mergeEmptyPathMatches","sortActivatedRouteSnapshots","allowRedirects","first","x","isEmptyError","matched","positionalParamSegments","remainingSegments","newSegments","matchResult","switchMap","childConfig","childInjector","snapshot","getData","getResolve","matchedOnOutlet","runCanLoadGuards","shouldLoadResult","tap","cfg","nodes","a","b","hasEmptyPathConfig","node","mergedNodes","duplicateEmptyPathNode","resultNode","mergedNode","getData","route","getResolve","recognize","injector","configLoader","rootComponentType","config","serializer","paramsInheritanceStrategy","mergeMap","t","recognize$1","map","targetSnapshot","urlAfterRedirects","__spreadProps","__spreadValues","resolveData","canActivateChecks","of","routesWithResolversToRun","check","routesNeedingDataUpdates","newRoute","flattenRouteTree","routesProcessed","from","concatMap","runResolve","getInherited","tap","takeLast","_","EMPTY","descendants","child","futureARS","futureRSS","resolve","hasStaticTitle","RouteTitleKey","resolveNode","resolvedData","keys","getDataKeys","data","key","getResolver","first","value","mapTo","catchError","e","isEmptyError","throwError","injectionToken","closestInjector","getClosestRouteInjector","resolver","getTokenOrFunctionIdentity","resolverValue","runInInjectionContext","wrapIntoObservable","switchTap","next","switchMap","v","nextResult","TitleStrategy","snapshot","pageTitle","PRIMARY_OUTLET","ɵɵdefineInjectable","inject","DefaultTitleStrategy","title","ɵɵinject","Title","ROUTER_CONFIGURATION","InjectionToken","ROUTES","RouterConfigLoader","Compiler","loadRunner","maybeUnwrapDefaultExport","component","finalize","loader","ConnectableObservable","Subject","refCount","parentInjector","loadChildren","compiler","onLoadEndListener","NgModuleFactory$1","factoryOrRoutes","rawRoutes","requireStandaloneComponents","standardizeConfig","isWrappedDefaultExport","input","UrlHandlingStrategy","DefaultUrlHandlingStrategy","url","newUrlPart","wholeUrl","CREATE_VIEW_TRANSITION","NavigationTransitions","Subject","inject","RouterConfigLoader","EnvironmentInjector","UrlSerializer","ChildrenOutletContexts","Location","INPUT_BINDER","TitleStrategy","ROUTER_CONFIGURATION","UrlHandlingStrategy","CREATE_VIEW_TRANSITION","of","onLoadStart","RouteConfigLoadStart","onLoadEnd","RouteConfigLoadEnd","request","id","__spreadProps","__spreadValues","router","initialUrlTree","initialRouterState","BehaviorSubject","IMPERATIVE_NAVIGATION","filter","t","map","switchMap","overallTransitionState","completed","errored","NavigationCancellationCode","EMPTY","urlTransition","onSameUrlNavigation","reason","NavigationSkipped","NavigationSkippedCode","transition","NavigationStart","recognize","tap","routesRecognized","RoutesRecognized","extractedUrl","source","restoredState","extras","navStart","targetSnapshot","createEmptyState","guardsStart","GuardsCheckStart","getAllRouteGuards","checkGuards","evt","isUrlTree","redirectingNavigationError","guardsEnd","GuardsCheckEnd","switchTap","resolveStart","ResolveStart","dataResolved","resolveData","resolveEnd","ResolveEnd","loadComponents","route","loaders","loadedComponent","child","combineLatest","defaultIfEmpty","take","currentSnapshot","viewTransitionStarted","from","targetRouterState","createRouterState","BeforeActivateRoutes","activateRoutes","NavigationEnd","takeUntil","err","finalize","catchError","e","isNavigationCancelingError","NavigationCancel","isRedirectingNavigationCancelingError","RedirectRequest","NavigationError","ee","code","navCancel","ɵɵdefineInjectable","isBrowserTriggeredNavigation","RouteReuseStrategy","DefaultRouteReuseStrategy","BaseRouteReuseStrategy","detachedTree","future","curr","ɵDefaultRouteReuseStrategy_BaseFactory","ɵɵgetInheritedFactory","StateManager","HistoryStateManager","UrlTree","listener","event","currentTransition","rawUrl","url","path","currentBrowserPageId","state","navigation","restoringFromCaughtError","targetPagePosition","navigationId","routerPageId","ɵHistoryStateManager_BaseFactory","NavigationResult","afterNextNavigation","action","result","defaultErrorHandler","error","exactMatchOptions","subsetMatchOptions","Router","Console","PendingTasks","ROUTES","Subscription","NgZone","subscription","currentNavigation","mergedTree","isPublicRouterEvent","rootComponentType","stateCopy","urlTree","config","standardizeConfig","commands","navigationExtras","relativeTo","queryParams","fragment","queryParamsHandling","preserveFragment","f","q","relativeToUrlSegmentGroup","relativeToSnapshot","createSegmentGroupFromRoute","createUrlTreeFromSegmentGroup","validateCommands","matchOptions","options","containsTree","params","key","value","priorPromise","resolve","reject","promise","res","rej","taskId","i","RuntimeError","ROUTER_SCROLLER","InjectionToken","provideRouter","routes","features","makeEnvironmentProviders","ROUTES","ActivatedRoute","rootRoute","Router","APP_BOOTSTRAP_LISTENER","getBootstrapListener","feature","router","routerFeature","kind","providers","getBootstrapListener","injector","inject","Injector","bootstrappedComponentRef","ref","ApplicationRef","router","Router","bootstrapDone","BOOTSTRAP_DONE","INITIAL_NAVIGATION","ROUTER_PRELOADER","InjectFlags","ROUTER_SCROLLER","InjectionToken","Subject","ROUTER_PRELOADER","InjectionToken","withHashLocation","routerFeature","LocationStrategy","HashLocationStrategy","TimeSliceType","viewBoxXMin","viewBoxYMin","viewBoxXMax","viewBoxYMax","headerHeight","timeBarHeight","bottomAxisHeight","bottomAxisTopMargin","leftPadding","rightPadding","timeBarPadding","scalarTickLength","scalarTextHeight","millisecondsInDay","StateDiagramm","Create","workDays","timeSliceTypeColorHashTable","TimeSliceType","Transfer","Work","svgElement","document","createElementNS","setAttribute","workDayIndex","length","currentWorkDay","viewBoxSliceYMin","headerText","CreateHeaderTextElement","Date","SummericeHoursInTimeSlicesByType","TimeSlots","appendChild","minMintuesOfDay","maxMinutesOfDay","scalePath","CreateScalarPathElement","scalarTextElements","CreateBottomLegend","scalarText","timeSlice","sliceRect","CreateTimeSlice","yStart","date","hoursByType","headerMiddle","haederText","toString","dateString","getDate","padStart","getMonth","getFullYear","workHours","transferHours","innerHTML","HourNumberToHourMinuteString","number","fullHours","Math","floor","minutes","timeSlices","result","Type","Start","End","getTime","xStart","xWidth","minMinutesOfDay","minutesInDay","hourAmount","tickDistanceX","tickStartX","scaleDInstructions","Array","i","push","join","textElements","textElement","ceil","millisecondsInDisplayedSliceOfDay","xPerMillisecond","startMillisecondsOfDay","TimeOfDayAsMilliseconds","MillisecondsInSecond","MillisecondsInMinute","MillisecondsInHour","LiveTimeSpanDirective","constructor","elementRef","startTime","endTime","timer","StartTime","EndTime","ngOnDestroy","clearInterval","ngOnChanges","ReinitializeDisplay","SplitMillisecondsIntoParts","milliseconds","result","Hours","Minutes","Seconds","Milliseconds","remainingMilliseconds","Math","floor","Date","setInterval","HandleOnIntervalElapsed","timeDifference","getTime","timeFragments","toString","padStart","nativeElement","innerText","ɵɵdirectiveInject","ElementRef","selectors","inputs","standalone","features","ɵɵNgOnChangesFeature","ActiveWorkDay","constructor","date","timeslots","Date","TimeSlots","Array","SortTimeSlots","CurrentSlice","length","EndCurrentTimeSliceIfNotEnded","currentSlice","End","StartNewTimeSliceIfNonRunning","type","push","Start","Type","sort","a","b","aDate","bDate","getTime","TimeRepositoryService","constructor","databasePromise","Promise","resolve","reject","openDbRequest","window","indexedDB","open","onsuccess","result","onerror","event","target","error","onupgradeneeded","OnUpgradeNeeded","then","database","ConvertWorkDayToHistoryDay","workDay","transfers","TimeSlots","filter","x","Type","TimeSliceType","Transfer","workTimes","Work","workDayOverview","Date","StartToWork","EndToWork","StartWork","EndWork","StartToHome","EndToHome","WorkTimeMs","DriveTimeMs","length","Start","End","getTime","GetWorkDays","from","to","__async","workTimesObjectStore","transaction","objectStore","success","request","getAll","IDBKeyRange","bound","ParseToDate","timeSlots","PutWorkDay","put","DeleteWorkDay","date","deleteRequest","delete","version","oldVersion","newVersion","UpgradeVersion0To1","createObjectStore","autoIncrement","createIndex","factory","ɵfac","providedIn","ɵɵelementContainerStart","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","dayDisplay_r1","TransferTimeBeforeWork","Start","End","WorkTime","TransferTimeAfterWork","ɵɵlistener","ɵɵrestoreView","_r2","ctx_r2","ɵɵnextContext","ɵɵresetView","StartTransfer","_r4","StartWork","_r5","_r6","EndTransfer","ɵɵtemplate","CurrentWorkComponent_ng_container_0_ng_container_5_Template","CurrentWorkComponent_ng_container_0_ng_container_6_Template","CurrentWorkComponent_ng_container_0_ng_container_10_Template","CurrentWorkComponent_ng_container_0_ng_container_11_Template","CurrentWorkComponent_ng_container_0_ng_container_15_Template","CurrentWorkComponent_ng_container_0_ng_container_16_Template","CurrentWorkComponent_ng_container_0_button_18_Template","CurrentWorkComponent_ng_container_0_button_19_Template","CurrentWorkComponent_ng_container_0_button_20_Template","CurrentWorkComponent_ng_container_0_button_21_Template","ɵɵclassProp","CurrentStatus","TimeStatus","DrivingToWork","AfterWork","AtWork","DrivingHome","Initial","CurrentWorkComponent","constructor","timeRepositoryService","sanitizer","DayStatusChart","CurrentDayWorkPromise","GetCurrentDayWork","RefreshCurrentDayAndTimeStatus","__async","currentDayWork","WorkDay","EndCurrentTimeSliceIfNotEnded","StartNewTimeSliceIfNonRunning","TimeSliceType","Transfer","PutWorkDay","Date","TimeSlots","Work","EndWork","currentDay","LoadAndSetStateGrafic","currentTime","lastMonth","getFullYear","getMonth","getDate","endOfDay","setSeconds","workDays","Promise","success","reject","GetWorkDays","bypassSecurityTrustHtml","StateDiagramm","Create","outerHTML","startOfDay","emptyDayStatus","Type","ActiveWorkDay","length","transfers","filter","x","workTimes","ɵɵdirectiveInject","TimeRepositoryService","DomSanitizer","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","rf","ctx","CurrentWorkComponent_ng_container_0_Template","ɵɵpipeBind1","ɵɵsanitizeHtml","CommonModule","NgIf","NgSwitch","NgSwitchCase","NgSwitchDefault","AsyncPipe","LiveTimeSpanDirective","styles","hasV8BreakIterator","Platform","_platformId","isPlatformBrowser","ɵɵinject","PLATFORM_ID","ɵɵdefineInjectable","supportsPassiveEvents","supportsPassiveEventListeners","normalizePassiveListenerOptions","options","shadowDomIsSupported","_supportsShadowDom","head","_getShadowRoot","element","rootNode","_getEventTarget","event","_isTestEnvironment","_isNumberValue","value","coerceArray","coerceElement","elementOrRef","ElementRef","mediaQueriesForWebkitCompatibility","mediaQueryStyleNode","MediaMatcher","_platform","_nonce","noopMatchMedia","query","createEmptyStyleRule","ɵɵinject","Platform","CSP_NONCE","ɵɵdefineInjectable","nonce","BreakpointObserver","_mediaMatcher","_zone","Subject","value","splitQueries","coerceArray","mediaQuery","observables","stateObservable","combineLatest","concat","take","skip","debounceTime","map","breakpointStates","response","matches","mql","output","Observable","observer","handler","e","startWith","takeUntil","NgZone","queries","a1","a2","ID_DELIMITER","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","existingId","removeAriaReferencedId","filteredIds","val","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","AriaDescriber","_document","_platform","inject","APP_ID","hostElement","message","role","key","getKey","setMessageId","registeredMessage","describedElements","i","messageElement","containerClassName","serverContainers","messagesContainer","element","originalReferenceIds","getAriaReferenceIds","id","addAriaReferencedId","removeAriaReferencedId","referenceIds","messageId","trimmedMessage","ariaLabel","ɵɵinject","DOCUMENT","Platform","ɵɵdefineInjectable","serviceId","isFakeMousedownFromScreenReader","event","isFakeTouchstartFromScreenReader","touch","INPUT_MODALITY_DETECTOR_OPTIONS","InjectionToken","INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS","TOUCH_BUFFER_MS","modalityEventListenerOptions","normalizePassiveListenerOptions","InputModalityDetector","_platform","ngZone","document","options","BehaviorSubject","keyCode","_getEventTarget","__spreadValues","skip","distinctUntilChanged","ɵɵinject","Platform","NgZone","DOCUMENT","ɵɵdefineInjectable","FocusMonitorDetectionMode","FOCUS_MONITOR_DEFAULT_OPTIONS","InjectionToken","captureEventListenerOptions","normalizePassiveListenerOptions","FocusMonitor","_ngZone","_platform","_inputModalityDetector","document","options","Subject","event","target","_getEventTarget","element","checkChildren","nativeElement","coerceElement","of","rootNode","_getShadowRoot","cachedInfo","info","elementInfo","origin","focusedElement","currentElement","_info","focusEventTarget","isFromInteraction","ms","TOUCH_BUFFER_MS","rootNodeFocusListeners","takeUntil","modality","results","mostRecentTarget","mostRecentModality","labels","i","ɵɵinject","NgZone","Platform","InputModalityDetector","DOCUMENT","ɵɵdefineInjectable","HighContrastMode","BLACK_ON_WHITE_CSS_CLASS","WHITE_ON_BLACK_CSS_CLASS","HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS","HighContrastModeDetector","_platform","document","inject","BreakpointObserver","testElement","documentWindow","computedStyle","computedColor","bodyClasses","mode","ɵɵinject","Platform","DOCUMENT","ɵɵdefineInjectable","DIR_DOCUMENT","InjectionToken","DIR_DOCUMENT_FACTORY","inject","DOCUMENT","RTL_LOCALE_PATTERN","_resolveDirectionality","rawValue","value","Directionality","_document","EventEmitter","bodyDir","htmlDir","ɵɵinject","ɵɵdefineInjectable","BidiModule","ɵɵdefineNgModule","ɵɵdefineInjector","AnimationCurves","AnimationDurations","MATERIAL_SANITY_CHECKS_FACTORY","MATERIAL_SANITY_CHECKS","InjectionToken","MatCommonModule","highContrastModeDetector","_sanityChecks","_document","name","_isTestEnvironment","ɵɵinject","HighContrastModeDetector","DOCUMENT","ɵɵdefineNgModule","ɵɵdefineInjector","BidiModule","RippleState","RippleRef","_renderer","element","config","_animationForciblyDisabledThroughCss","passiveCapturingEventOptions$1","normalizePassiveListenerOptions","RippleEventManager","event","target","_getEventTarget","handlers","handler","ngZone","name","handlersForEvent","handlersForElement","defaultRippleAnimationConfig","ignoreMouseEventsTimeout","passiveCapturingEventOptions","pointerDownEvents","pointerUpEvents","RippleRenderer","_RippleRenderer","_target","_ngZone","elementOrElementRef","_platform","coerceElement","x","y","containerRect","animationConfig","__spreadValues","radius","distanceToFurthestCorner","offsetX","offsetY","enterDuration","ripple","computedStyles","userTransitionProperty","userTransitionDuration","animationForciblyDisabledThroughCss","rippleRef","eventListeners","onTransitionEnd","onTransitionCancel","rippleEl","type","isMostRecentTransientRipple","persistent","isFakeMousedown","isFakeMousedownFromScreenReader","isSyntheticEvent","isFakeTouchstartFromScreenReader","touches","i","isVisible","trigger","rect","distX","distY","_c0","_c1","MatSortHeader_Conditional_3_Template","rf","ctx","_r1","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","ɵɵelement","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","MAT_SORT_DEFAULT_OPTIONS","InjectionToken","MatSort","direction","_defaultOptions","ReplaySubject","Subject","EventEmitter","sortable","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","ɵɵdirectiveInject","ɵɵdefineDirective","InputFlags","booleanAttribute","ɵɵInputTransformsFeature","ɵɵNgOnChangesFeature","start","sortOrder","SORT_ANIMATION_TRANSITION","AnimationDurations","AnimationCurves","matSortAnimations","trigger","state","style","transition","animate","keyframes","query","animateChild","MatSortHeaderIntl","ɵɵdefineInjectable","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MAT_SORT_HEADER_INTL_PROVIDER","Optional","SkipSelf","MatSortHeader","value","_intl","_changeDetectorRef","_sort","_columnDef","_focusMonitor","_elementRef","_ariaDescriber","defaultOptions","origin","newState","visible","viewState","event","fromState","newDescription","merge","ChangeDetectorRef","FocusMonitor","ElementRef","AriaDescriber","ɵɵdefineComponent","rf","ctx","ɵɵlistener","$event","ɵɵattribute","ɵɵclassProp","ɵɵStandaloneFeature","_c0","_c1","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵtemplate","MatSortHeader_Conditional_3_Template","ɵɵadvance","ɵɵconditional","MatSortModule","ɵɵdefineNgModule","ɵɵdefineInjector","MatCommonModule","DataSource","isDataSource","value","ConnectableObservable","_ViewRepeaterOperation","_VIEW_REPEATER_STRATEGY","InjectionToken","_DisposeViewRepeaterStrategy","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","record","adjustedPreviousIndex","currentIndex","view","operation","insertContext","DEFAULT_RESIZE_TIME","ViewportRuler","_platform","ngZone","document","Subject","event","window","output","scrollPosition","width","height","documentElement","documentRect","top","left","throttleTime","auditTime","ɵɵinject","Platform","NgZone","DOCUMENT","ɵɵdefineInjectable","CdkScrollableModule","ɵɵdefineNgModule","ɵɵdefineInjector","ScrollingModule","BidiModule","_c0","_c1","CdkTable_Conditional_2_Template","rf","ctx","ɵɵprojection","CdkTable_Conditional_3_Template","ɵɵelementStart","ɵɵelementContainer","ɵɵelementEnd","CdkTable_Conditional_4_Template","CDK_TABLE","InjectionToken","CdkCellDef","template","ɵɵdirectiveInject","TemplateRef","ɵɵdefineDirective","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","name","value","_table","hasStickyChanged","CDK_TABLE","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","InputFlags","booleanAttribute","ɵɵProvidersFeature","ɵɵInputTransformsFeature","BaseCdkCell","columnDef","elementRef","CdkHeaderCell","ElementRef","ɵɵInheritDefinitionFeature","CdkCell","BaseCdkCell","columnDef","elementRef","role","ɵɵdirectiveInject","CdkColumnDef","ElementRef","ɵɵdefineDirective","ɵɵInheritDefinitionFeature","_Schedule","_COALESCED_STYLE_SCHEDULER","InjectionToken","_CoalescedStyleScheduler","_ngZone","Subject","task","takeUntil","schedule","from","take","ɵɵinject","NgZone","ɵɵdefineInjectable","BaseRowDef","template","_differs","changes","columns","column","CdkHeaderRowDef","CdkFooterRowDef","ɵɵdirectiveInject","TemplateRef","IterableDiffers","ɵɵdefineDirective","ɵɵNgOnChangesFeature","value","_table","hasStickyChanged","CDK_TABLE","InputFlags","booleanAttribute","ɵɵInputTransformsFeature","ɵɵInheritDefinitionFeature","CdkRowDef","CdkCellOutlet","_viewContainer","ViewContainerRef","CdkHeaderRow","ɵɵdefineComponent","ɵɵStandaloneFeature","rf","ctx","ɵɵelementContainer","CdkRow","ɵɵdefineComponent","ɵɵStandaloneFeature","rf","ctx","ɵɵelementContainer","CdkCellOutlet","CdkNoDataRow","templateRef","ɵɵdirectiveInject","TemplateRef","ɵɵdefineDirective","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","rows","stickyDirections","elementsToClear","row","i","element","stickyStartStates","stickyEndStates","recalculateCellWidths","state","firstRow","numCells","cellWidths","startPositions","endPositions","lastStickyStart","firstStickyEnd","isRtl","start","end","cell","width","index","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","height","borderedRowIndex","offset","isBorderedRowIndex","tableElement","tfoot","dir","dirValue","isBorderElement","zIndexIncrements","zIndex","firstRowCells","widths","positions","nextPosition","STICKY_POSITIONING_LISTENER","InjectionToken","DataRowOutlet","viewContainer","elementRef","table","inject","CDK_TABLE","ɵɵdirectiveInject","ViewContainerRef","ElementRef","ɵɵdefineDirective","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","CdkTable","role","cellRole","fn","dataSource","value","_differs","_changeDetectorRef","_elementRef","_dir","_document","_platform","_viewRepeater","_coalescedStyleScheduler","_viewportRuler","_stickyPositioningListener","_ngZone","Subject","EventEmitter","BehaviorSubject","_i","dataRow","takeUntil","def","isDataSource","changes","viewContainer","record","_adjustedPreviousIndex","currentIndex","change","_ViewRepeaterOperation","rowView","NgZone","take","columnDef","rowDef","headerRowDef","footerRowDef","noDataRow","headerRows","thead","closestTableSection","stickyStates","footerRows","tfoot","dataRows","headerRow","i","rows","footerRow","rowDefsChanged","renderRows","prevCachedRenderRows","data","renderRowsForData","j","renderRow","cache","dataIndex","cachedRenderRows","mergeArrayAndSet","defaultRowDefs","columnsDiffReducer","acc","dataColumnsChanged","headerColumnsChanged","footerColumnsChanged","dataStream","isObservable","of","columnDefs","columnName","stickyStartStates","stickyEndStates","rowOutlet","renderedRows","viewRef","rowDefs","index","context","outlet","view","cellTemplate","CdkCellOutlet","renderIndex","count","columnId","column","stickyCheckReducer","d","direction","StickyStyler","items","item","shouldShow","container","rootNode","ɵɵdirectiveInject","IterableDiffers","ChangeDetectorRef","ElementRef","ɵɵinjectAttribute","Directionality","DOCUMENT","Platform","_VIEW_REPEATER_STRATEGY","_COALESCED_STYLE_SCHEDULER","ViewportRuler","STICKY_POSITIONING_LISTENER","ɵɵdefineComponent","rf","ctx","dirIndex","ɵɵcontentQuery","CdkNoDataRow","CdkColumnDef","CdkRowDef","CdkHeaderRowDef","CdkFooterRowDef","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵclassProp","InputFlags","booleanAttribute","ɵɵProvidersFeature","CDK_TABLE","_DisposeViewRepeaterStrategy","_CoalescedStyleScheduler","ɵɵInputTransformsFeature","ɵɵStandaloneFeature","_c1","ɵɵprojectionDef","_c0","ɵɵprojection","ɵɵtemplate","CdkTable_Conditional_2_Template","CdkTable_Conditional_3_Template","CdkTable_Conditional_4_Template","ɵɵadvance","ɵɵconditional","HeaderRowOutlet","DataRowOutlet","NoDataRowOutlet","FooterRowOutlet","array","set","section","uppercaseSection","current","nodeName","CdkTableModule","ɵɵdefineNgModule","ɵɵdefineInjector","ScrollingModule","_c0","_c1","MatTable_Conditional_2_Template","rf","ctx","ɵɵprojection","MatTable_Conditional_3_Template","ɵɵelementStart","ɵɵelementContainer","ɵɵelementEnd","MatTable_Conditional_4_Template","MatTable","CdkTable","ɵMatTable_BaseFactory","t","ɵɵgetInheritedFactory","ɵɵdefineComponent","rf","ctx","ɵɵclassProp","ɵɵProvidersFeature","CDK_TABLE","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_VIEW_REPEATER_STRATEGY","_DisposeViewRepeaterStrategy","STICKY_POSITIONING_LISTENER","ɵɵInheritDefinitionFeature","ɵɵStandaloneFeature","_c1","ɵɵprojectionDef","_c0","ɵɵprojection","ɵɵtemplate","MatTable_Conditional_2_Template","MatTable_Conditional_3_Template","MatTable_Conditional_4_Template","ɵɵadvance","ɵɵconditional","HeaderRowOutlet","DataRowOutlet","NoDataRowOutlet","FooterRowOutlet","MatCellDef","CdkCellDef","ɵMatCellDef_BaseFactory","ɵɵdefineDirective","MatHeaderCellDef","CdkHeaderCellDef","ɵMatHeaderCellDef_BaseFactory","MatColumnDef","CdkColumnDef","name","ɵMatColumnDef_BaseFactory","t","ɵɵgetInheritedFactory","ɵɵdefineDirective","InputFlags","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","MatHeaderCell","CdkHeaderCell","ɵMatHeaderCell_BaseFactory","MatCell","CdkCell","ɵMatCell_BaseFactory","t","ɵɵgetInheritedFactory","ɵɵdefineDirective","ɵɵInheritDefinitionFeature","MatHeaderRowDef","CdkHeaderRowDef","ɵMatHeaderRowDef_BaseFactory","t","ɵɵgetInheritedFactory","ɵɵdefineDirective","InputFlags","booleanAttribute","ɵɵProvidersFeature","ɵɵInputTransformsFeature","ɵɵInheritDefinitionFeature","MatRowDef","CdkRowDef","ɵMatRowDef_BaseFactory","t","ɵɵgetInheritedFactory","ɵɵdefineDirective","InputFlags","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","MatHeaderRow","CdkHeaderRow","ɵMatHeaderRow_BaseFactory","ɵɵdefineComponent","ɵɵStandaloneFeature","rf","ctx","ɵɵelementContainer","CdkCellOutlet","MatRow","CdkRow","ɵMatRow_BaseFactory","t","ɵɵgetInheritedFactory","ɵɵdefineComponent","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ɵɵStandaloneFeature","rf","ctx","ɵɵelementContainer","CdkCellOutlet","MatTableModule","ɵɵdefineNgModule","ɵɵdefineInjector","MatCommonModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","DataSource","data","filter","sort","paginator","initialData","BehaviorSubject","Subject","sortHeaderId","value","_isNumberValue","numberValue","active","direction","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","dataStr","currentTerm","key","transformedFilter","sortChange","merge","of","pageChange","dataStream","filteredData","combineLatest","map","orderedData","paginatedData","obj","startIndex","filteredDataLength","lastPageIndex","newPageIndex","TimeSpanPipe","transform","value","args","timeParts","LiveTimeSpanDirective","SplitMillisecondsIntoParts","Hours","toString","padStart","Minutes","pure","standalone","DateHelper","FormatDate","date","format","result","indexOf","replaceAll","getDate","toString","padStart","getMonth","getFullYear","getHours","getMinutes","getSeconds","ExportHelper","WorkDayToCsv","workDays","separater","stringBuilder","Array","workDay","push","DateHelper","FormatDate","Date","StartToHome","EndToWork","StartWork","EndWork","EndToHome","workTimeSplit","LiveTimeSpanDirective","SplitMillisecondsIntoParts","WorkTimeMs","Hours","toString","padStart","Minutes","padEnd","transferTimeSplit","DriveTimeMs","Blob","join","type","DownloadHelper","DownloadFileBlob","fileBlob","displayFileName","__async","aElement","document","createElement","objectUrl","URL","createObjectURL","href","download","dispatchEvent","MouseEvent","bubbles","cancelable","view","window","Promise","success","fail","setTimeout","revokeObjectURL","remove","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind2","element_r1","Date","ɵɵtextInterpolate2","element_r2","StartToWork","EndToWork","element_r3","StartWork","EndWork","element_r4","StartToHome","EndToHome","ɵɵtextInterpolate1","ɵɵpipeBind1","element_r5","WorkTimeMs","element_r6","DriveTimeMs","ɵɵelement","ɵɵlistener","element_r8","ɵɵrestoreView","_r7","$implicit","ctx_r8","ɵɵnextContext","ɵɵresetView","DeleteWorkDayEntry","HistoryComponent","constructor","timeRepositoryService","DataSource","MatTableDataSource","DisplayedColumns","Array","FillDataSource","ngAfterViewInit","sort","Sort","date","__async","dateString","getDate","toString","padStart","getMonth","getFullYear","confirm","DeleteWorkDay","ExportAsCsv","csvBlob","ExportHelper","WorkDayToCsv","data","oldestWorkDate","latestWorkDate","workDay","DownloadHelper","DownloadFileBlob","DateHelper","FormatDate","workDays","GetWorkDays","historyDays","push","TimeRepositoryService","ConvertWorkDayToHistoryDay","ɵɵdirectiveInject","selectors","viewQuery","rf","ctx","MatSort","ɵɵelementContainerStart","ɵɵtemplate","HistoryComponent_th_7_Template","HistoryComponent_td_8_Template","HistoryComponent_th_10_Template","HistoryComponent_td_11_Template","HistoryComponent_th_13_Template","HistoryComponent_td_14_Template","HistoryComponent_th_16_Template","HistoryComponent_td_17_Template","HistoryComponent_th_19_Template","HistoryComponent_td_20_Template","HistoryComponent_th_22_Template","HistoryComponent_td_23_Template","HistoryComponent_th_25_Template","HistoryComponent_td_26_Template","HistoryComponent_tr_27_Template","HistoryComponent_tr_28_Template","ɵɵproperty","MatTableModule","MatTable","MatHeaderCellDef","MatHeaderRowDef","MatColumnDef","MatCellDef","MatRowDef","MatHeaderCell","MatCell","MatHeaderRow","MatRow","MatSortModule","MatSortHeader","DatePipe","TimeSpanPipe","styles","routes","path","component","CurrentWorkComponent","HistoryComponent","redirectTo","ERR_SW_NOT_SUPPORTED","errorObservable","message","defer","throwError","NgswCommChannel","serviceWorker","controllerChanges","fromEvent","map","currentController","of","controllerWithChanges","concat","filter","c","switchMap","events","event","publish","action","payload","take","tap","sw","__spreadValues","type","operationNonce","waitForOperationCompleted","postMessage","result","filterFn","nonce","SwPush","Subject","NEVER","registration","workerDrivenSubscriptions","pm","merge","options","pushOptions","key","applicationServerKey","i","sub","doUnsubscribe","success","input","ɵɵinject","ɵɵdefineInjectable","SwUpdate","SCRIPT","InjectionToken","ngswAppInitializer","injector","script","platformId","isPlatformBrowser","readyToRegister$","strategy","args","delayWithTimeout","whenStable","NgZone","err","timeout","delay","ApplicationRef","stable","ngswCommChannelFactory","opts","SwRegistrationOptions","provideServiceWorker","makeEnvironmentProviders","PLATFORM_ID","APP_INITIALIZER","Injector","ANIMATION_PREFIX","AsyncAnimationRendererFactory","doc","delegate","zone","animationType","moduleImpl","inject","ChangeDetectionScheduler","e","RuntimeError","ɵcreateEngine","ɵAnimationRendererFactory","rendererFactory","hostElement","rendererType","renderer","dynamicRenderer","DynamicDelegationRenderer","animationRendererFactory","animationRenderer","ɵɵinvalidFactory","ɵɵdefineInjectable","impl","fn","name","namespace","value","parent","newChild","refChild","isMove","oldChild","isHostElement","selectorOrNode","preserveContent","node","el","style","flags","target","eventName","callback","propOrEventName","provideAnimationsAsync","type","performanceMarkFeature","makeEnvironmentProviders","RendererFactory2","DOCUMENT","DomRendererFactory2","NgZone","ANIMATION_MODULE_TYPE","appConfig","providers","provideRouter","routes","withHashLocation","provideServiceWorker","enabled","isDevMode","registrationStrategy","provideAnimationsAsync","AppComponent","constructor","router","CurrentTab","events","subscribe","event","NavigationEnd","url","indexOf","ɵɵdirectiveInject","Router","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵclassProp","RouterOutlet","styles","bootstrapApplication","AppComponent","appConfig","catch","err","console","error"],"x_google_ignoreList":[0,1,9,10,11,12,13,14,15,16,17,18,19,27,28]}